### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "Biztosít egy objektumot, amely lehetővé teszi, hogy két <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> vezérlők kapcsolat kialakításához. Ez az osztály nem örökölhető."
  remarks: "A kijelzők vezérlő készletben, a kapcsolat egy hivatkozásra vagy a kettő közötti társítás <xref:System.Web.UI.WebControls.WebParts.WebPart>(vagy egyéb kiszolgálói vagy felhasználó), amely lehetővé teszi az adatok oszthat vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> Így meghatározhatja, hogy adatmegosztásra lehetővé teszi, hogy a csatlakoztatott vezérlők módszereket, amelyek mérete meghaladja az elkülönített vezérlők által kínált funkciót használni. Például ha egy vezérlő Irányítószám adatokat biztosít, és egy másik vezérlő olvashatja el az adatok, és adja meg a helyi időjárási információk lekérdezéséhez az irányítószám alapján, majd két vezérlők csatlakoztatott képességének kihasználása felhasználók számára lehetővé. Ez a példa kiterjesztéséhez más vezérlők sikerült létrehozni, hogy is a megjelenített információk alapján irányítószámot, például a helyi hírek mutató hivatkozásokkal vezérlő, és ezen vezérlők irányítószám adatokkal együttműködő sikerült adatok megosztása a egyetlen vezérlő irányítószámát biztosítja. A kijelzők alkalmazások végfelhasználók létrehozhat és kezelhet ilyen kompatibilis vezérlők közvetlenül egy webböngészőből, a standard kapcsolatok felhasználói felületen (UI) által biztosított közötti kapcsolatok a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>vezérlő, vagy egy egyéni felhasználói felületén a fejlesztők által biztosított.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       A WebPartConnection osztály – áttekintés egy kapcsolat létrehozására vonatkozó alapvető adatokat általános nyilatkozat. Meghatározott összetevőkre és kapcsolatok létrehozásával kapcsolatos követelmények kapcsolatban bővebben lásd: [webes kijelzők kapcsolatok – áttekintés](~/add/includes/ajax-current-ext-md.md), vagy a hivatkozás osztályok című témakörben talál, és a következő leírását említett kódpéldák. Szempontot több alapvető kijelzők kapcsolódási: – két <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> Minden kijelzők kapcsolat két vezérlők áll. Lehetséges, hogy a vezérlő egyszerre egynél több kapcsolat részt, de minden egyetlen kapcsolat pontosan két vezérlők áll. A vezérlők származtathatók közvetlenül a <xref:System.Web.UI.WebControls.WebParts.WebPart>alaposztályt a base attribútummal, de lehet más vezérlőket, beleértve az ASP.NET vezérlőket, egyéni vezérlőket és felhasználói vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> Vezérlők, amelyek nem a a <xref:System.Web.UI.WebControls.WebParts.WebPart>osztályhoz használatosak, ha egy <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zónára, automatikusan követően egy <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objektum futás közben, amely lehetővé teszi, hogy örökölje a <xref:System.Web.UI.WebControls.WebParts.WebPart>osztály és futásidejű funkciót <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Vezérlők szereplő <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zónák.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Mindkét <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők és semmilyen más típusú kiszolgálói vezérlőnek kell lennie egy <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zónát, hogy a kijelzők kapcsolatok (és a legtöbb más kijelzők szolgáltatások) részt vehetnek.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -A fogyasztók és szolgáltatók. Minden kijelzők kapcsolat van két vezérlők: az adatok és a felhasználói adatok szolgáltató. A szolgáltató, amely visszaadja az adatokat illesztőfelület formájában megadott visszahívási módszerrel bizonyítékot szolgáltat adatokat a fogyasztó számára. (A példa bemutatja, hogyan hozhat létre és a visszahívási metódus megadásával, című példa szakaszát.) A visszahívási metódus a szolgáltatói csatlakozási pont néven ismert. A szolgáltatáskapcsolódási pont (a &quot;barátságos&quot; nevét, egy Azonosítót és a visszaadott interfész típusa) részleteit tartalmazza egy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektum a szolgáltató vezérlőhöz.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> A fogyasztó az adatokat a megadott módszerrel, amely elfogadja az illesztőfelület példánya. Ez a módszer egy ügyfél-csatlakozási pont nevezik, és a csatlakozási pont (név, azonosítója és interfész típusa) részleteit tartalmazza egy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektum a felhasználói vezérlőhöz.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -Kompatibilis vezérlők vagy egy érvényes átalakító. A kapcsolathoz, a ügyfelének és szolgáltatójának kell lennie (azaz, hogy a megadott csatlakozási pont módszerek felület ugyanolyan együttműködhet) kompatibilis, vagy mert kell lenniük egy <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektumot képes a típus egy típussá. az ügyfél megértette a szolgáltató által kínált fordítása.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -A WebPartConnection objektum. A kapcsolat létezik hivatkozásokat a szolgáltatói és vezérlőkhöz, és a csatlakozási pontok részleteit tartalmazó WebPartConnection osztály egy példányának kell lennie. Ha a szolgáltatói és nem kompatibilis, és inkább a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum szeretne csatlakozni, a kapcsolat átalakító hivatkozik.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -Eszköz létesített kapcsolat. Miután kompatibilis ügyfelének és szolgáltatójának vezérlők, amelyek megfelelően tervezése kapcsolódási pont metódusával és a területre, és egy WebPartConnection objektum érhető el, a legutóbbi alapvető lépés szükséges a kapcsolat létrehozására. Ez akkor fordulhat elő, például a felhasználók a felhasználói felületen a VPN-kapcsolat létrehozásához. Ha egy `<asp:connectionszone>` elemet a lapon, és egyéb szükséges összetevők kapcsolat vannak helyen, futási időben, a felhasználó válthat az oldal való csatlakozás megjelenítési mód, kattintson a Műveletek menü a szolgáltató vagy a felhasználói és a felhasználói felület kapcsolatot egy connect művelet (alapján a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>vezérlő) jelenik meg.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> A felhasználói felületen keresztül a felhasználó kezdeményezhet a kapcsolatot. Egy másik kezdeményezzen kapcsolatot módja programozott módon elvégezhető. Mindenképpen hogy a felhasználói felület vagy programozott módon, az alapul szolgáló módszer, amely kezdeményezi a kapcsolatot megegyezik. Az alkalmazás hívások a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metódus (vagy a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>módszert, ha egy átalakító használatával) a a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>szabályozhatja, hogy a szolgáltató, az ügyfél és a megfelelő csatlakozási pont objektumokat, és a metódus egy WebPartConnection objektumot ad vissza.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       A WebPartConnection osztály határozza meg, amely magában foglalja a kettő közötti kapcsolat alapvető adatait objektum <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> Az osztály szinte teljes egészében egy adott kapcsolat részleteinek kapcsolódó tulajdonságok tartalmaz. Több tulajdonságok vonatkoznak a felhasználói vezérlő kapcsolaton keresztül. A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>tulajdonság hivatkozik a fogyasztói vezérlőbe ágyazni, és a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>tulajdonság hivatkozik a felhasználói azonosítóját.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektum, amely tartalmazza az ügyfél-csatlakozási pont, a fogyasztó által hivatkozott <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>tulajdonság.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>tulajdonság azonosítója hivatkozik a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektum.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> A fogyasztó kapcsolatos kapcsolati tulajdonságok rendelve a VPN-kapcsolat létrehozásához értékkel kell rendelkeznie.       A WebPartConnection osztály is rendelkezik számos olyan tulajdonság, a szolgáltató vezérlő kapcsolaton keresztül kapcsolódik, és egy végfelhasználói ezek megegyeznek a tulajdonságai. A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>tulajdonság hivatkozik a szolgáltató vezérlőbe ágyazni, miközben <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>tulajdonsága a következő azonosítójú hivatkozik</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>tulajdonsághivatkozást a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektumot, és a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>tulajdonság hivatkozik a szolgáltatói csatlakozási pont azonosítója.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       Több tulajdonságok érintik a kapcsolat állapotát. A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>tulajdonság azt jelzi, hogy a kapcsolat (jelenleg adatcsere) aktív vagy inaktív (továbbra is csatlakoztatott, de az aktívan megosztási adatok).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>tulajdonság azt jelzi, hogy a kapcsolat egy megosztott (a lap minden felhasználó számára elérhető) vagy a felhasználó-specifikus kapcsolat létrehozásakor, és a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>tulajdonság azt jelzi, hogy a vezérlő statikus (és így állandó, a lap jelölőkódjában megadott) vagy dinamikus (hozta létre, ami azt jelenti, hogy akkor is törlődik).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> osztály."
  remarks: "A WebPartConnection konstruktor nyilvános, hogy az ASP.NET elemző hozhat létre egy példányát, amikor kapcsolatot is deklarálva van a kód egy weblap; Ez a konstruktor nem célja a fejlesztői kód használható.       Ha szeretne létrehozni egy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum programozott módon, használja a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>vagy a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>megadott módszer a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Ezek a módszerek kapcsolódás lépésein sok részleteit kezeli, és térjen vissza a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       WebPartConnection konstruktora a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>osztály értékekre állítja a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>és <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>Tulajdonságok `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Így az új kapcsolat alapértelmezett állapotának statikus (ami azt jelenti, hogy a kód a tartalmazó weblap deklarált), és megosztott (a lap minden felhasználó számára látható). Ez lesz az esetben, ha a kapcsolat hozzá is deklarálni kell a kapcsolat a kód a lap a jellemző forgatókönyv, egy `<asp:webpartconnection>` elemet. Más esetekben viszont kapcsolat lesz különböző érték is ezeket a tulajdonságokat. Például hozzáadhat egy kapcsolatot programozott módon kapcsolati objektum létrehozása a kódban, és a felhasználó az alapértelmezett felhasználó testreszabási hatókörében szereplő megtekinti a lapon, a kapcsolat létrehozott dinamikus,-user(visible only to the specific user) kapcsolatként.      > [!NOTE] > A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>és <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>tulajdonságainak, csak olvasható, és a ezeket a tulajdonságokat, melyek meghatározzák az ügyet, a kapcsolat által belsőleg a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő attól függően, hogy hogyan hozták létre a kapcsolat (a lap jelölőkódjában deklaratív módon, vagy programozott módon a kódban, illetve a felhasználói felületen keresztül).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> objektum, amely nevében jár el a felhasználói vezérlő kapcsolaton keresztül."
  remarks: "Minden kijelzők kapcsolat megoszthatják az adatokat két vezérlő áll. Egy vezérlőt úgy működik, mint az adatok a szolgáltató, és a fogyasztónak, fogadására és feldolgozni az adatokat a szolgáltató által a más vezérlő kezeli. A fogyasztó tulajdonság lekér egy hivatkozást a <xref:System.Web.UI.WebControls.WebParts.WebPart>kapcsolat kapcsolatban ügyféllel hitelesítésszolgáltatóként történő szabályozása.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> , amely jelöli, hogy a kijelzők vezérlő működött a fogyasztó kapcsolaton keresztül."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A hosszát a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>tulajdonság értéke nulla.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi az objektum, amely a kapcsolat az ügyféllel ügyfélként viselkedő vezérlőelem kapcsolódási pontként szolgál."
  remarks: "A kettő közötti kapcsolat létrehozásához szükséges lépéseket egyik <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők, ha a csatlakozási pontok minden vezérlőjének.</xref:System.Web.UI.WebControls.WebParts.WebPart> Az ügyfél-csatlakozási pont olyan objektum, amely a vezérlő vásárlói működő csatlakoztatása adatait tartalmazza. A fogyasztó forráskód, a módszerek egyikét kell azonosítani a `ConnectionConsumer` attribútum. A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektum, amely a fogyasztói vezérlővel társítva a metódus, és az attribútum, beleértve a metódust, használja a felhasználói felületen (UI) megjelenítendő neve azonosítója kapcsolatos részleteket tartalmaz, és milyen típusú felület metódus lekérhetik.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Ez a felhasználói információkat, a képező kapcsolatoknál, valamint hogy megértette, interfész típusa az metódust készlete együttesen egy ügyfél-csatlakozási pont képezi.       Alapértelmezés szerint egy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektum csak egyetlen kapcsolódhatnak <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektum egyszerre.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> A fogyasztó lehet lehetséges fogyasztói csatlakozási pontok azonosítottak többféle módszer, de a fogyasztó részt vehetnek-csak egy kapcsolat vásárlói (csak így lehet, hogy az ügyfél-csatlakozási pontok egyikét aktív) egyszerre. Ezzel szemben egy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>tetszőleges számú csatlakozhat <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektumok.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Ez az alapértelmezett viselkedés felülbírálható módosítható a <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>tulajdonságát a <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>attribútum.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> a felhasználói vezérlőhöz kapcsolaton keresztül."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi vagy beállítja a tulajdonság értékének egy kapcsolattal, amely hivatkozik a objektum szolgál az adott kapcsolathoz ügyfél-csatlakozási pont azonosítója."
  remarks: "A kód egy weblap deklarált statikus kapcsolatot, a fejlesztők adhat meg melyik ügyfél-csatlakozási pont a kapcsolat által használható értéket rendelni a `ConsumerConnectionPointID` attribútuma a `<asp:webpartconnection>` elemet. Ha az értéket az attribútumnak nincs hozzárendelve a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>tulajdonság értékét használja.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Dinamikus (programozott) kapcsolatok létrehozásakor általában nem célszerű a ConsumerConnectionPointID tulajdonság értéke. Egyszerűen hívása a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metódust a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>szabályozása, átadja azt a felhasználói és az ügyfél-kapcsolódási pont az objektumok (a többi szükséges paraméter), és ez a módszer határozza meg helyesen az Azonosítóját, az ügyfél-csatlakozási pont használandó.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Hasonlóképpen, amikor leválasztja az aktív, hívása a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metódus anélkül, hogy adja meg a ConsumerConnectionPointID tulajdonság értéke.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > A egy ügyfél-csatlakozási pont azonosítója lehet meghatározni, ha kijelöl egy <xref:System.Web.UI.WebControls.WebParts.WebPart>vagy egyéb kiszolgálói vezérlőnek vásárlói.</xref:System.Web.UI.WebControls.WebParts.WebPart> Meg kell adnia a szolgáltató vezérlő vagy a átalakítók illesztőfelület példánya által fogyasztói metódus. A metódus azonosításához jelölje meg a a `ConnectionConsumer` kód attribútum. Amikor ezt az attribútumot, adhat hozzá egy nem kötelező karakterlánc-érték paraméter a fogyasztó számára egy ID látja, hogy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektum.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Az azonosító nem kötelező paraméter értékét adja meg, ha ezt az értéket a ConsumerConnectionPointID tulajdonságának a kapcsolat értéke lesz. Ha nem ad meg egy azonosító értéke, a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>tulajdonság értékét használja.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Karakterlánc, amely tartalmazza az azonosító az ügyfél-kapcsolódási pont."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi vagy beállítja a tulajdonság azonosítója hivatkozó használjanak a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> működött az adott kapcsolathoz ügyféllel szabályozzák."
  remarks: "A ConsumerID tulajdonság értéket kell adni, ha közötti kapcsolatot hoz létre a <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> A tulajdonság nincs társítva egy értéket, ha kivételt vált ki, ha a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő megpróbálja aktiválni a kapcsolatot.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "A kapcsolat az ügyféllel működött vezérlő azonosítója tartalmazó karakterlánc."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi vagy beállítja a azonosítója egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektum."
  remarks: "Minden <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum értéke egyedi az ID tulajdonságának rendelt.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Ez azért szükséges, hogy van-e több kapcsolatot megkülönböztetésére mód.       Ha statikus kapcsolatot hoz létre a is deklarálni kell egy `<asp:webpartconnection>` eleme egy weblapot, és nem rendel egy értéket a `ID` attribútum a kapcsolathoz, kivételt vált ki, ha a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő megpróbálja aktiválni a kapcsolatot.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Ha a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő kapcsolatot hoz létre új dinamikus, meghívja a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>metódus egy egyedi azonosítót a kapcsolathoz.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "Egy Azonosítóját tartalmazó karakterláncot egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektum jelenleg létrejötte és képes az exchange-adatok között a szolgáltatói és vezérlők."
  remarks: "Az IsActive tulajdonság egy állapotát jelzi egy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Kapcsolat esetén ebben az állapotban, a szolgáltatói és szabályozza a kapcsolaton történő kommunikáció során, és képes az exchange-adatok közös felületen keresztül-e vagy egy <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Ha a felhasználó megtekinti a megjelenített lap, amely tartalmaz egy kapcsolat normál Tallózás módban, a általában aktív kapcsolat (kivéve, ha a szolgáltatás egyes ütközés vagy egyéb probléma miatt lehet aktiválni, ha a lap betöltése sikertelen volt). A lap és vezérlés életciklus korai szakaszában, a tulajdonság értéke nem `false`. A kapcsolat aktiválása után csak a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>azonosítójú esemény a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő következik be.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Pontosabban, a kapcsolat aktiválása után a felhasználó rendelkezik a megadott kapcsolat példányának lekért a szolgáltató vagy a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Tudjuk, hogy a kapcsolat aktív olyan esetekben hasznos, ahol előfordulhat ütközések vagy szinkronizálási probléma miatt több kapcsolatot egy oldalon. Például, ha valamilyen ütközés két kapcsolatok között van a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő lehetősége van a kapcsolatok egyike nem aktiválása az ütközés elkerülése érdekében.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a kapcsolat nem aktív. Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektum az összes felhasználóra, vagy csak az aktuális felhasználó számára látható."
  remarks: "A személy <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum lehet megosztott vagy egy felhasználói példányt.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> Egy megosztott példánnyal azt jelenti, hogy a kapcsolat az adott webhely minden felhasználó számára látható, és a felhasználói példány azt jelenti, hogy a kapcsolat csak egy adott felhasználó számára látható.       Általában a kapcsolat legyen adva a laphoz módját határozza meg, hogy a kapcsolat meg van osztva. A kapcsolat deklarálva van a kód egy weblap, akkor a kapcsolat meg van osztva, és a IsShared tulajdonság értéke `true`. Emellett ha a weblap megosztott, személyes beállításokat tartalmazó hatókörbe egy kapcsolat hozzáadása, a kapcsolat is megosztott. Általában, amikor a felhasználó használja a `<asp:connectionszone>` felhasználói felület (UI)-kapcsolatot, a lap felhasználó testreszabási hatókörében szereplő van, így a kapcsolathoz nincsenek megosztva, és a IsShared tulajdonság értéke `false`."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a kapcsolat meg van osztva; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektum deklarálva a kód egy weblap vagy hozta létre."
  remarks: "A kijelzők vezérlők közötti kapcsolatok lehet statikus vagy dinamikus. A statikus kapcsolat deklarálva van a kód egy weblap használatával egy `<asp:WebPartConnection>` elemet. Dinamikus kapcsolatok programozott módon jönnek létre, vagy ha egy felhasználó kapcsolatot hoz létre a felhasználói felületen (UI) határozzák meg a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>vezérlő.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Statikus kapcsolatok olyan megosztott objektumok, azaz a weblap összes felhasználója számára elérhetők. Is, amelyek alapvetően állandó, mert, például a statikus <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlő, azokat nem véglegesen törli.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Statikus kapcsolatobjektumot véglegesen nem törölhető, amíg az választható véglegesen le. Ebben az esetben a leválasztott objektum lenne található a kiszolgálón, de a felhasználó soha nem lesznek tudomást az objektum létezését lapon."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a kapcsolat statikus; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> vezérlő, amely különbséglemezként funkcionál a szolgáltató kijelzők kapcsolaton keresztül."
  remarks: "Minden kijelzők kapcsolat két áll <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők – egy végfelhasználói és a szolgáltató--és a szolgáltató tulajdonság visszaad egy hivatkozást a szolgáltató vezérlő kapcsolaton keresztül.</xref:System.Web.UI.WebControls.WebParts.WebPart>       A párjukhoz (a felhasználói hozzáférés) kapcsolaton keresztül, például a szolgáltató vezérlő kapcsolat létrehozásához szükséges. Programozott módon, vagy is deklarálni kell az adatmegőrzési formátumban hoz létre a kapcsolatot, hogy meg kell adnia egy vezérlő kapcsolat szolgáltató nevében járhasson el."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> , amely az adatok a szolgáltató funkcionál."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A hosszát a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>tulajdonság értéke nulla.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Az objektum, amely a kapcsolódási pontként lekérdezi egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kapcsolat szolgáltatóként működő szabályozzák."
  remarks: "A kettő közötti kapcsolat létrehozásához szükséges lépéseket egyik <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők, ha a csatlakozási pontok minden vezérlőjének.</xref:System.Web.UI.WebControls.WebParts.WebPart> A szolgáltatói csatlakozási pont olyan objektum, amely a szolgáltatóként működő vezérlő csatlakoztatása adatait tartalmazza. A szolgáltató forráskód, a módszerek egyikét kell azonosítani a `ConnectionProvider` attribútum. A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>, amely szolgáltatóhoz vezérlő tartalmaz a metódus, és az attribútum, beleértve a használata esetén egy megjelenítési nevet használja a felhasználói felületen (UI), azonosító adatait, és milyen típusú illesztőfelület példánya a metódus egy felhasználói vezérlő térhet vissza.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Ez a szolgáltató kapcsolatos információkat, a módszer a kapcsolatokat, és milyen típusú felületet biztosít, amely készlete együttesen képezi a szolgáltatói csatlakozási pont.       Alapértelmezés szerint egy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>csatlakozhat csak az egyik <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektum egyszerre.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> A fogyasztó lehet lehetséges fogyasztói csatlakozási pontok azonosítottak többféle módszer, de a fogyasztó részt vehetnek-csak egy kapcsolat vásárlói (csak így lehet, hogy az ügyfél-csatlakozási pontok egyikét aktív) egyszerre. Ezzel szemben egy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>tetszőleges számú csatlakozhat <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>alapértelmezés szerint az objektumok.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Például egy szolgáltató vezérlő, irányítószámát kell csatlakoztatni több fogyasztói vezérlők, irányítószámát hozhatunk létre különböző típusú adatok alapján az irányítószámot, például a időjárási adatok, híreket és így tovább. Ez az alapértelmezett viselkedés felülbírálható módosítható a <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>tulajdonságát a <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>attribútum.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> a szolgáltató vezérlőhöz kapcsolaton keresztül."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi vagy beállítja a tulajdonság értékének egy kapcsolattal, amely hivatkozik a objektum szolgál az adott kapcsolathoz szolgáltatói csatlakozási pont azonosítója."
  remarks: "A kód egy weblap deklarált statikus kapcsolatot, a fejlesztők adhat meg mely szolgáltatói csatlakozási pont a kapcsolat által használható értéket rendelni a `ProviderConnectionPointID` attribútuma a `<asp:webpartconnection>` elemet. Ha az értéket az attribútumnak nincs hozzárendelve a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>tulajdonság értékét használja.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Dinamikus (programozott) kapcsolatok létrehozásakor általában nem célszerű a ProviderConnectionPointID tulajdonság értéke. Egyszerűen hívása a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metódust a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>szabályozása, átadja azt a szolgáltatót, és a szolgáltatói kapcsolat mutasson az objektumok (a többi szükséges paraméter), és ez a módszer határozza meg helyesen az Azonosítóját, a szolgáltatói csatlakozási pont használandó.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Hasonlóképpen, amikor leválasztja az aktív, hívása a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metódus anélkül, hogy adja meg a ProviderConnectionPointID tulajdonság értéke.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > A azonosítója a szolgáltatói csatlakozási pont lehet meghatározni, ha kijelöl egy <xref:System.Web.UI.WebControls.WebParts.WebPart>vagy egyéb kiszolgálói vezérlőnek-szolgáltatóként.</xref:System.Web.UI.WebControls.WebParts.WebPart> Meg kell adnia egy felhasználói adatokat tartalmazó illesztőfelület példánya látja, hogy a szolgáltató egy visszahívási metódusa. A metódus azonosításához jelölje meg a a `ConnectionProvider` kód attribútum. Ez az attribútum hozzáadásakor is hozzáadhat egy választható karakterlánc-érték paraméter, amely az ID szolgál. a szolgáltató <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektum.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Az azonosító nem kötelező paraméter értékét adja meg, ha ezt az értéket a ProviderConnectionPointID tulajdonságának a kapcsolat értéke lesz. Ha nem ad meg egy azonosító értéke, a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő alapértelmezett Azonosítót rendel hozzá, az objektum létrehozásakor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "A szolgáltató kapcsolati pont objektum Azonosítóját tartalmazó karakterláncot."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi vagy beállítja a tulajdonság azonosítója hivatkozó használjanak a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> az adott kapcsolathoz szolgáltatóként működő szabályozzák."
  remarks: "A ProviderID tulajdonság értéket kell adni, ha a kettő közötti kapcsolatot hoz létre a <xref:System.Web.UI.WebControls.WebParts.WebPart>vezérlők.</xref:System.Web.UI.WebControls.WebParts.WebPart> A tulajdonság nincs társítva egy értéket, ha kivételt vált ki, ha a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő megpróbálja aktiválni a kapcsolatot.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "A szolgáltató vezérlő azonosítója tartalmazó karakterlánc."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Felülbírálja az örökölt <xref:System.Object.ToString*>metódus, és egy rövid típus neve a kapcsolati objektum beolvasása.</xref:System.Object.ToString*>"
  remarks: "Ezzel a módszerrel legtöbbször a kényelem vezérlő tervezők használja. Ez növeli a kapcsolatobjektumok megjelenését a tervezési nézetben rövidebb típus nevével, egy teljesen minősített típusnév szemben. Azonban a metódus nem hívható a kódban, bármikor Ha szeretné tudni kapcsolati objektum nevét."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A rövid (minősítés nélküli) típusú nevét tartalmazó karakterlánc egy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objektum, amely használatával a data kijelzők kapcsolat két egyébként nem kompatibilis csatlakozási pont között."
  remarks: "A kijelzők kapcsolat létrehozásakor, a két módja van, amelyben a kapcsolatot a szolgáltatói és vezérlők kapcsolódhatnak. Ezek kapcsolódhatnak közvetlenül, valamint saját <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objektumok és egy illesztőfelület-típus, amely mindkét vezérlők értendő.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Vagy, ha azok nem kompatibilis, hogy csatlakozhassanak közvetve használatával egy <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum, amely átalakítja az illesztőfelület példánya olyan szolgáltató egy világos az ügyféllel típussá.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Az átalakító tulajdonság biztosít mutató hivatkozás, ha az átalakítók szükség van a kapcsolat részeként, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Belül egy egyéni átalakító (vagy az egyik a kijelzők vezérlő beállított megadott karban) címkét egy kapcsolat deklaratív módon a kód egy weblap átalakítók is hozzáadhat a `<asp:WebPartConnection>` elemet. Azt is megteheti átalakítók programozott módon, egy példányának létrehozása a kódban, és hívja a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>metódust a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>vezérlő létrehozása a kapcsolatot, és a szükséges paramétereket az átalakító objektum átadja.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Lekérdezi a gyűjteménye <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> kijelzők vezérlő készlete által használt belső objektumok."
  remarks: "A transzformátorok tulajdonság soha nem célja, hogy a fejlesztők használja. A kapcsolathoz társított átalakító eléréséhez a fejlesztők mindig használjon a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>tulajdonság.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       A transzformátorok tulajdonság belsőleg a kijelzők vezérlő belül átalakító elemeket deklarálja a lap fejlesztők beállítása a `<asp:webpartconnection>` a kód egy weblap elemében."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> tartalmazó <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objektumok."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
