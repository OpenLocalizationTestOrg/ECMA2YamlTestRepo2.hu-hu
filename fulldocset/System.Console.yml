### YamlMime:ManagedReference
items:
- uid: System.Console
  id: Console
  children:
  - System.Console.BackgroundColor
  - System.Console.Beep
  - System.Console.Beep(System.Int32,System.Int32)
  - System.Console.BufferHeight
  - System.Console.BufferWidth
  - System.Console.CancelKeyPress
  - System.Console.CapsLock
  - System.Console.Clear
  - System.Console.CursorLeft
  - System.Console.CursorSize
  - System.Console.CursorTop
  - System.Console.CursorVisible
  - System.Console.Error
  - System.Console.ForegroundColor
  - System.Console.In
  - System.Console.InputEncoding
  - System.Console.IsErrorRedirected
  - System.Console.IsInputRedirected
  - System.Console.IsOutputRedirected
  - System.Console.KeyAvailable
  - System.Console.LargestWindowHeight
  - System.Console.LargestWindowWidth
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  - System.Console.NumberLock
  - System.Console.OpenStandardError
  - System.Console.OpenStandardError(System.Int32)
  - System.Console.OpenStandardInput
  - System.Console.OpenStandardInput(System.Int32)
  - System.Console.OpenStandardOutput
  - System.Console.OpenStandardOutput(System.Int32)
  - System.Console.Out
  - System.Console.OutputEncoding
  - System.Console.Read
  - System.Console.ReadKey
  - System.Console.ReadKey(System.Boolean)
  - System.Console.ReadLine
  - System.Console.ResetColor
  - System.Console.SetBufferSize(System.Int32,System.Int32)
  - System.Console.SetCursorPosition(System.Int32,System.Int32)
  - System.Console.SetError(System.IO.TextWriter)
  - System.Console.SetIn(System.IO.TextReader)
  - System.Console.SetOut(System.IO.TextWriter)
  - System.Console.SetWindowPosition(System.Int32,System.Int32)
  - System.Console.SetWindowSize(System.Int32,System.Int32)
  - System.Console.Title
  - System.Console.TreatControlCAsInput
  - System.Console.WindowHeight
  - System.Console.WindowLeft
  - System.Console.WindowTop
  - System.Console.WindowWidth
  - System.Console.Write(System.Boolean)
  - System.Console.Write(System.Char)
  - System.Console.Write(System.Char[])
  - System.Console.Write(System.Decimal)
  - System.Console.Write(System.Double)
  - System.Console.Write(System.Int32)
  - System.Console.Write(System.Int64)
  - System.Console.Write(System.Object)
  - System.Console.Write(System.Single)
  - System.Console.Write(System.String)
  - System.Console.Write(System.UInt32)
  - System.Console.Write(System.UInt64)
  - System.Console.Write(System.String,System.Object)
  - System.Console.Write(System.String,System.Object[])
  - System.Console.Write(System.Char[],System.Int32,System.Int32)
  - System.Console.Write(System.String,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  - System.Console.WriteLine
  - System.Console.WriteLine(System.Boolean)
  - System.Console.WriteLine(System.Char)
  - System.Console.WriteLine(System.Char[])
  - System.Console.WriteLine(System.Decimal)
  - System.Console.WriteLine(System.Double)
  - System.Console.WriteLine(System.Int32)
  - System.Console.WriteLine(System.Int64)
  - System.Console.WriteLine(System.Object)
  - System.Console.WriteLine(System.Single)
  - System.Console.WriteLine(System.String)
  - System.Console.WriteLine(System.UInt32)
  - System.Console.WriteLine(System.UInt64)
  - System.Console.WriteLine(System.String,System.Object)
  - System.Console.WriteLine(System.String,System.Object[])
  - System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.Console.WriteLine(System.String,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  langs:
  - csharp
  name: Console
  nameWithType: Console
  fullName: System.Console
  type: Class
  summary: "A szabványos bemeneti, kimeneti és adatfolyamok konzol alkalmazások jelöli. Ez az osztály nem örökölhető.       Keresse meg a .NET-keretrendszer forráskód ehhez a típushoz, tekintse meg a [hivatkozás forrás](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  \n  \n For information about developing with the Console class, see the following sections:  \n  \n-   [Console I/O Streams](#Streams)  \n  \n-   [Screen Buffer and Console Window](#Buffer)  \n  \n-   [Unicode Support for the Console](#Unicode)  \n  \n-   [Common Operations](#Operations)  \n  \n-   [.NET Core Notes](#Core)  \n  \n<a name=\"Streams\"></a>   \n## Console I/O Streams  \n When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=fullName>, <xref:System.Console.Out%2A?displayProperty=fullName>, and <xref:System.Console.Error%2A?displayProperty=fullName> properties.  \n  \n By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=fullName> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=fullName> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=fullName>, <xref:System.Console.SetOut%2A?displayProperty=fullName>, or <xref:System.Console.SetError%2A?displayProperty=fullName> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>, execute synchronously if the object represents a console stream.  \n  \n> [!NOTE]\n>  Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <xref:System.Console.Write%2A?displayProperty=fullName> and <xref:System.Console.WriteLine%2A?displayProperty=fullName> have no effect in GUI applications.  \n  \n Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <xref:System.IO.IOException?displayProperty=fullName> exceptions if you redirect a standard stream. You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=fullName> exception.  \n  \n It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties. For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=fullName> method reads input from the standard input stream. Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed (\"\\r\\n\"). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  \n  \n You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  \n  \n `Console.Error.NewLine = \"\\r\\n\\r\\n\";`  \n  \n You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:  \n  \n `Console.Error.WriteLine();`  \n  \n<a name=\"Buffer\"></a>   \n## Screen Buffer and Console Window  \n Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  \n  \n The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  \n  \n A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  \n  \n The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=fullName>.  \n  \n<a name=\"Unicode\"></a>   \n## Unicode Support for the Console  \n In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  \n  \n [!code-cs[System.Console.Class#1](~/add/codesnippet/csharp/t-system.console_1.cs)]\n [!code-vb[System.Console.Class#1](~/add/codesnippet/visualbasic/t-system.console_1.vb)]  \n  \n In addition to supporting code pages, the Console class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class. To display Unicode characters to the console. you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.  \n  \n Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  \n  \n [!code-cs[System.Console.Class.Unsafe#3](~/add/codesnippet/csharp/setfont1/setfont1.cs#3)]\n [!code-vb[System.Console.Class.Unsafe#3](~/add/codesnippet/visualbasic/t-system.console_2.vb)]  \n  \n However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.  \n  \n Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111). Linked fonts are defined in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  \n  \n [!code-cs[System.Console.Class#2](~/add/codesnippet/csharp/t-system.console_3.cs)]\n [!code-vb[System.Console.Class#2](~/add/codesnippet/visualbasic/t-system.console_3.vb)]  \n  \n Unicode support for the console has the following limitations:  \n  \n-   UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.  \n  \n-   Bidirectional output is not supported.  \n  \n-   Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  \n  \n-   Display of characters in complex scripts is not supported.  \n  \n-   Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=fullName> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=fullName> method is called.  \n  \n     [!code-cs[System.Console.Class#5](~/add/codesnippet/csharp/t-system.console_4.cs)]\n     [!code-vb[System.Console.Class#5](~/add/codesnippet/visualbasic/t-system.console_4.vb)]  \n  \n     Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  \n  \n-   If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  \n  \n The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`). It assumes that the console is using a TrueType font.  \n  \n [!code-cs[System.Console.Class#4](~/add/codesnippet/csharp/t-system.console_5.cs)]\n [!code-vb[System.Console.Class#4](~/add/codesnippet/visualbasic/t-system.console_5.vb)]  \n  \n<a name=\"Operations\"></a>   \n## Common Operations  \n The Console class contains the following methods for reading console input and writing console output:  \n  \n-   The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.  \n  \n-   The <xref:System.Console.ReadLine%2A> method reads an entire line of input.  \n  \n-   The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  \n  \n-   A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.  \n  \n The Console class also contains methods and properties to perform the following operations:  \n  \n-   Get or set the size of the screen buffer. The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.  \n  \n-   Get or set the size of the console window. The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.  \n  \n-   Get or set the size of the cursor. The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.  \n  \n-   Get or set the position of the console window relative to the screen buffer. The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.  \n  \n-   Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.  \n  \n-   Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.  \n  \n-   Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.  \n  \n-   Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.  \n  \n<a name=\"Core\"></a>   \n## [!INCLUDE[net_core](~/add/includes/net-core-md.md)] Notes  \n In the .NET Framework on the desktop, the Console class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, [!INCLUDE[net_core](~/add/includes/net-core-md.md)] may make only a limited subset of these encodings available. Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName> is used as the default encoding for the console.  \n  \n If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any Console methods:  \n  \n1.  Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  \n  \n2.  Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName> property.  \n  \n3.  Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName> method to make the additional encodings supported by the encoding provider available.  \n  \n The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods."
  example:
  - "The following example demonstrates how to read data from, and write data to, the standard input and output streams. Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.  \n  \n [!code-cs[Classic Console Example#1](~/add/codesnippet/csharp/t-system.console_6.cs)]\n [!code-cpp[Classic Console Example#1](~/add/codesnippet/cpp/t-system.console_6.cpp)]\n [!code-vb[Classic Console Example#1](~/add/codesnippet/visualbasic/t-system.console_6.vb)]"
  syntax:
    content: public static class Console
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Console.BackgroundColor
  id: BackgroundColor
  parent: System.Console
  langs:
  - csharp
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a konzol hátterének színét."
  remarks: "BackgroundColor tulajdonságának módosítása hatással van a csak kimeneti írott egyedi karaktert cellák háttérszíne módosítása után. Ha módosítani szeretné a konzolablakban egész háttérszínét, állítsa be a BackgroundColor tulajdonságának és hívás a <xref:System.Console.Clear%2A>metódus.</xref:System.Console.Clear%2A> A következő példa illusztrálja.       [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)][!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs) ] egy Windows-alapú alkalmazáshoz, amelyben a konzol nem létezik, A get műveletet <xref:System.ConsoleColor?displayProperty=fullName>.</xref:System.ConsoleColor?displayProperty=fullName> adja vissza.  "
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the BackgroundColor and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.backgro_2.cs)]"
  syntax:
    content: public static ConsoleColor BackgroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "Egy érték, amely meghatározza a konzol; háttérszíne Ez azt jelenti, hogy az egyes karakterek mögötti színét. Az alapértelmezett érték a fekete."
  overload: System.Console.BackgroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Beállítási művelet a megadott szín tagja nem egy érvényes <xref href=&quot;System.ConsoleColor&quot;> </xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Beep
  id: Beep
  parent: System.Console
  langs:
  - csharp
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A hangjelzés keresztül a konzol hangalapú hang lejátszása."
  remarks: "Alapértelmezés szerint a hangjelzés játszik 800 Hz gyakorisággal 200 ezredmásodperc időtartamára.      > [!NOTE] > A <xref:System.Console.Beep%2A>metódus nem támogatott a Windows Vista és Windows XP 64 bites verzióján.</xref:System.Console.Beep%2A>       Hangjelzés becsomagolja a Windows hívása [függvény sípoló](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). E hangjelzés hozza létre a Windows, Windows 7 előtti verzióiban hang attól függ, hogy egy 8254 programozható időköz időzítő csipje jelenlétét. Windows 7 verziótól kezdődően ez függ az alapértelmezett hangeszköz."
  example:
  - "The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  \n  \n [!code-cs[console.beep#1](~/add/codesnippet/csharp/m-system.console.beep_1.cs)]\n [!code-cpp[console.beep#1](~/add/codesnippet/cpp/m-system.console.beep_1.cpp)]\n [!code-vb[console.beep#1](~/add/codesnippet/visualbasic/m-system.console.beep_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: System.Console.Beep*
  exceptions:
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "Ez a módszer egy kiszolgálón, például az SQL Server, amely nem engedélyezi a hozzáférést a felhasználói felület történt meg."
  platform:
  - net462
- uid: System.Console.Beep(System.Int32,System.Int32)
  id: Beep(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Egy adott gyakorisággal és a konzol hangalapú időtartamát állította hang lejátszása."
  remarks: "<xref:System.Console.Beep%2A>a Windows hívása becsomagolja [függvény sípoló](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx).</xref:System.Console.Beep%2A> E <xref:System.Console.Beep%2A>előtt a Windows 7 8254 programozható időköz időzítő lapka jelenléte függ, hozza létre a Windows verzióknál hang.</xref:System.Console.Beep%2A> Windows 7 verziótól kezdődően ez függ az alapértelmezett hangeszköz.      > [!NOTE] > A <xref:System.Console.Beep%2A>metódus nem támogatott a Windows Vista és Windows XP 64 bites verzióján.</xref:System.Console.Beep%2A>"
  example:
  - "This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  \n  \n [!code-cpp[console.beep2#1](~/add/codesnippet/cpp/m-system.console.beep-sy_1.cpp)]\n [!code-vb[console.beep2#1](~/add/codesnippet/visualbasic/m-system.console.beep-sy_1.vb)]\n [!code-cs[console.beep2#1](~/add/codesnippet/csharp/m-system.console.beep-sy_1.cs)]"
  syntax:
    content: public static void Beep (int frequency, int duration);
    parameters:
    - id: frequency
      type: System.Int32
      description: "A hangjelzés 32767 hertz 37 kezdve gyakoriságát."
    - id: duration
      type: System.Int32
      description: "A hangjelzés időtartama ezredmásodpercben."
  overload: System.Console.Beep*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>frequency</code>kisebb, mint 37 van vagy több, mint 32767 hertz.       – vagy – <code>duration</code> kisebb vagy egyenlő, mint nulla."
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "Ez a módszer egy kiszolgálón, például az SQL Server, amely nem teszi lehetővé a konzolhoz való hozzáférés történt meg."
  platform:
  - net462
- uid: System.Console.BufferHeight
  id: BufferHeight
  parent: System.Console
  langs:
  - csharp
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a pufferterület magasságát."
  remarks: "Ez a tulajdonság megadja a száma a pufferben, amelyhez a konzol mód ablakot indít által tárolt sorok (vagy sorok). Ezzel szemben a <xref:System.Console.WindowHeight%2A>tulajdonság határozza meg a konzolablakban egy adott időpontban ténylegesen megjelenített sorok száma.</xref:System.Console.WindowHeight%2A> Ha ténylegesen írni a puffer sorok száma által meghatározott sorok száma meghaladja a <xref:System.Console.WindowHeight%2A>tulajdonság, az ablak görgetéséhez függőleges, hogy a sorok, amelyekre egyenlőnek kell lennie összefüggő számos megjeleníti a <xref:System.Console.WindowHeight%2A>és a tulajdonság bárhol a pufferben.</xref:System.Console.WindowHeight%2A> </xref:System.Console.WindowHeight%2A>       Beállítási művelet csökkenti a BufferHeight tulajdonság értékét, ha a legfelső sorok törlődnek. Például ha a sorok száma 300 250 csökken, 0 – 49 sorok törlődnek, és 50 és 299 válnak a meglévő sorok sorok 0-tól 249."
  example:
  - "This example demonstrates the BufferHeight and <xref:System.Console.BufferWidth%2A> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferh_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferh_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferh_1.vb)]"
  syntax:
    content: public static int BufferHeight { get; set; }
    return:
      type: System.Int32
      description: "A sorok, a puffer területének jelenlegi magassága."
  overload: System.Console.BufferHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Beállítási művelet érték nagyobb, mint nulla.       - vagy - beállítási művelet érték nagyobb vagy egyenlő &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       - vagy - beállítási művelet érték kisebb, mint <> </> *> + <> </> *>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.BufferWidth
  id: BufferWidth
  parent: System.Console
  langs:
  - csharp
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a pufferterület szélességét."
  remarks: "Beállítási művelet csökkenti a BufferWidth tulajdonság értéke, a jobb szélső oszlop eltávolítja. Például az oszlopok számának 60 csökken a 80-as, 60 79 az egyes sorok és oszlopok eltávolítja."
  example:
  - "This example demonstrates the <xref:System.Console.BufferHeight%2A> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferw_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferw_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferw_1.vb)]"
  syntax:
    content: public static int BufferWidth { get; set; }
    return:
      type: System.Int32
      description: "A jelenlegi szélessége, oszlopok, a puffer terület."
  overload: System.Console.BufferWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Beállítási művelet érték nagyobb, mint nulla.       - vagy - beállítási művelet érték nagyobb vagy egyenlő &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       - vagy - beállítási művelet érték kisebb, mint <> </> *> + <> </> *>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.CancelKeyPress
  id: CancelKeyPress
  parent: System.Console
  langs:
  - csharp
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
  type: Event
  assemblies:
  - mscorlib
  namespace: System
  summary: "Akkor következik be, amikor a <xref href=&quot;System.ConsoleModifiers&quot;> </xref> módosító (Ctrl) és vagy a <xref href=&quot;System.ConsoleKey&quot;> </xref> konzol (C) vagy a Break billentyűt egyidejű lenyomásakor (Ctrl + C vagy Ctrl + Break)."
  remarks: "Ez az esemény <xref:System.ConsoleCancelEventHandler?displayProperty=fullName>és <xref:System.ConsoleCancelEventArgs?displayProperty=fullName>.</xref:System.ConsoleCancelEventArgs?displayProperty=fullName> </xref:System.ConsoleCancelEventHandler?displayProperty=fullName> együtt használatos A CancelKeyPress esemény lehetővé teszi, hogy egy konzolalkalmazást intercept a Ctrl + C jel, így az eseménykezelő is határozza meg, hogy folytatja, vagy állítsa le. Események kezelésére vonatkozó további információkért lásd: [kezelésére és események kiváltása](~/add/includes/ajax-current-ext-md.md).       Amikor a felhasználó lenyom Ctrl + C vagy Ctrl + Break, az esemény a CancelKeyPress és az alkalmazás <xref:System.ConsoleCancelEventHandler>eseménykezelő végrehajtása.</xref:System.ConsoleCancelEventHandler> Az eseménykezelő átadása egy <xref:System.ConsoleCancelEventArgs>objektum, amely két hasznos tulajdonságokkal rendelkezik:- <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, meghatározhatja, hogy a kezelő miatt a felhasználó nyomja le a Ctrl + C lett meghívva lehetővé teszi (a tulajdonság értéke <xref:System.ConsoleSpecialKey?displayProperty=fullName>) vagy a Ctrl + Break (a tulajdonság értéke <xref:System.ConsoleSpecialKey?displayProperty=fullName>).</xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleCancelEventArgs.SpecialKey%2A> </xref:System.ConsoleCancelEventArgs>      - <xref:System.ConsoleCancelEventArgs.Cancel%2A>, amely lehetővé teszi annak meghatározását, hogyan az alkalmazáshoz kell a felhasználónak válaszolni lenyomásával Ctrl + C vagy Ctrl + Break.</xref:System.ConsoleCancelEventArgs.Cancel%2A> Alapértelmezés szerint a <xref:System.ConsoleCancelEventArgs.Cancel%2A>tulajdonság `false`, mely okok programok végrehajtása leáll, amikor az eseménykezelő kilép.</xref:System.ConsoleCancelEventArgs.Cancel%2A> A tulajdonság módosítása `true` Megadja, hogy az alkalmazás folytatni kell-e végrehajtani.      > [!TIP] >-E az alkalmazás egyszerű követelmények, használhatja a <xref:System.Console.TreatControlCAsInput%2A>tulajdonság helyett ezt az eseményt.</xref:System.Console.TreatControlCAsInput%2A> Ez a tulajdonság beállításával `false`, biztosíthatja, hogy az alkalmazás mindig kilép, ha a felhasználó megnyomja a Ctrl + C. Értékre állításával `true`, biztosíthatja, hogy nyomja le a Ctrl + C nem megszünteti az alkalmazást.       Ez az esemény eseménykezelőjét végrehajtása szál készlet szálban."
  example:
  - "The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked. Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property is `false`, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`, which means that the process will not terminate and the read operation will resume.  \n  \n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/e-system.console.cancelk_1.cs)]\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/e-system.console.cancelk_1.cpp)]\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/e-system.console.cancelk_1.vb)]"
  syntax:
    content: public static event ConsoleCancelEventHandler CancelKeyPress;
    return:
      type: System.ConsoleCancelEventHandler
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: System.Console.CapsLock
  id: CapsLock
  parent: System.Console
  langs:
  - csharp
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi egy érték, amely jelzi, hogy a CAPS LOCK billentyűzet váltógomb kapcsolja be vagy ki van kapcsolva."
  syntax:
    content: public static bool CapsLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a CAPS LOCK be van kapcsolva; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> CAPS LOCK be van kapcsolva."
  overload: System.Console.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.Clear
  id: Clear
  parent: System.Console
  langs:
  - csharp
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A konzol puffer és a megfelelő konzolablak Megjelenítési adatok törlése."
  remarks: "A Clear metódus használatával értéke megegyezik az MS-DOS meghívása `cls` parancsot a parancssorablakba. Törölje a jelet metódus hívásakor a kurzor automatikusan görget az ablak bal felső sarkában, és a képernyőpuffer tartalma üres értékeket az aktuális előtér háttérszíneket használata van beállítva.      > [!NOTE] > <xref:System.IO.IOException>.</xref:System.IO.IOException> Egy konzolalkalmazás kimenet átirányítása fájlba a Clear metódus hívására tett kísérlet jelez. Ennek megelőzése érdekében mindig burkolja a Clear metódus hívása a `try`...`catch` blokk."
  example:
  - "The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console's original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  \n  \n [!code-vb[System.Console.Clear#1](~/add/codesnippet/visualbasic/m-system.console.clear_1.vb)]\n [!code-cs[System.Console.Clear#1](~/add/codesnippet/csharp/m-system.console.clear_1.cs)]  \n  \n The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  \n  \n This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.clear_2.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.clear_2.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.clear_2.vb)]"
  syntax:
    content: public static void Clear ();
    parameters: []
  overload: System.Console.Clear*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.CursorLeft
  id: CursorLeft
  parent: System.Console
  langs:
  - csharp
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a kurzor oszlopbeli pozíciója a puffer területen belül."
  remarks: ''
  example:
  - "This example demonstrates the CursorLeft and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursorl_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursorl_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursorl_1.vb)]"
  syntax:
    content: public static int CursorLeft { get; set; }
    return:
      type: System.Int32
      description: "Az aktuális pozíció, az oszlopok, a kurzor."
  overload: System.Console.CursorLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Beállítási művelet értéke kisebb, mint nulla.       - vagy - beállítási művelet érték nagyobb vagy egyenlő a <xref:System.Console.BufferWidth*>.</xref:System.Console.BufferWidth*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.CursorSize
  id: CursorSize
  parent: System.Console
  langs:
  - csharp
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a kurzor magasságának karakter cellán belül."
  remarks: "A kurzor megjelenését változik, a cella aljához vízszintes vonal kezdve, ha a tulajdonság értéke 1, a teljes kitöltése a cella, ha a tulajdonság értéke 100."
  example:
  - "This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  \n  \n [!code-cs[console.cursorsize#1](~/add/codesnippet/csharp/p-system.console.cursors_1.cs)]\n [!code-cpp[console.cursorsize#1](~/add/codesnippet/cpp/p-system.console.cursors_1.cpp)]\n [!code-vb[console.cursorsize#1](~/add/codesnippet/visualbasic/p-system.console.cursors_1.vb)]"
  syntax:
    content: public static int CursorSize { get; set; }
    return:
      type: System.Int32
      description: "A kurzor egy karakter cella magasságának százalékában kifejezett mérete. A tulajdonság értékét tartománya 1 és 100."
  overload: System.Console.CursorSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Beállítási művelet a megadott érték kisebb, mint 1 vagy nagyobb 100-nál."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.CursorTop
  id: CursorTop
  parent: System.Console
  langs:
  - csharp
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a kurzor sorbeli pozíciója a puffer területen belül."
  remarks: ''
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and CursorTop properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursortop_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursortop_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursortop_1.vb)]"
  syntax:
    content: public static int CursorTop { get; set; }
    return:
      type: System.Int32
      description: "Az aktuális pozíció sorok, a kurzor."
  overload: System.Console.CursorTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Beállítási művelet értéke kisebb, mint nulla.       - vagy - beállítási művelet érték nagyobb vagy egyenlő a <xref:System.Console.BufferHeight*>.</xref:System.Console.BufferHeight*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.CursorVisible
  id: CursorVisible
  parent: System.Console
  langs:
  - csharp
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja egy értéket, amely azt jelzi, hogy a kurzor látható."
  remarks: ''
  example:
  - "This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.  \n  \n [!code-cs[console.cursorvis#1](~/add/codesnippet/csharp/p-system.console.cursorv_1.cs)]\n [!code-vb[console.cursorvis#1](~/add/codesnippet/visualbasic/p-system.console.cursorv_1.vb)]\n [!code-cpp[console.cursorvis#1](~/add/codesnippet/cpp/p-system.console.cursorv_1.cpp)]"
  syntax:
    content: public static bool CursorVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a kurzor látható; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.CursorVisible*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Error
  id: Error
  parent: System.Console
  langs:
  - csharp
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi a szabványos hibaadatfolyam kimeneti."
  remarks: "A konzol a szabványos hibaadatfolyam értéke alapértelmezés szerint. Egy másik adatfolyam beállítható a <xref:System.Console.SetError%2A>metódus.</xref:System.Console.SetError%2A> Miután a rendszer átirányítja a szabványos hibaadatfolyam, azt is lehet visszavásárolt meghívásával a <xref:System.Console.OpenStandardError%2A>metódus.</xref:System.Console.OpenStandardError%2A>       A konzol alkalmazások tájékoztató kimenete gyakran átirányítja a fájl a szabványos hibaadatfolyam, a hiba tulajdonságon keresztül elérhető információk megjelenítéséhez a konzolhoz, akkor is, ha a kimenet átirányítása is használható. Az alábbi példa termék táblák 10 számok 1-től induló egyszerre jeleníti meg. Minden 10 számból álló készletet, miután a hiba a tulajdonság segítségével kér a felhasználóktól, hogy a következő készlete megjelenjen-e. Ha egy fájl a szabványos kimenet átirányítása, a felhasználónak továbbra is kapcsolatba e a rutin kell létrehozni a következő set termékek.       [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)][!code-vb[System.Console.Error#1  ](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]"
  example:
  - "The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  \n  \n [!code-cpp[Console-EXPANDTABSEX#1](~/add/codesnippet/cpp/p-system.console.error_2.cpp)]\n [!code-cs[Console-EXPANDTABSEX#1](~/add/codesnippet/csharp/p-system.console.error_2.cs)]\n [!code-vb[Console-EXPANDTABSEX#1](~/add/codesnippet/visualbasic/p-system.console.error_2.vb)]  \n  \n The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/p-system.console.error_3.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/p-system.console.error_3.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.TextWriter Error { get; }
    return:
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter>, amely jelzi, hogy a szabványos hibaadatfolyam kimeneti.</xref:System.IO.TextWriter>"
  overload: System.Console.Error*
  exceptions: []
  platform:
  - net462
- uid: System.Console.ForegroundColor
  id: ForegroundColor
  parent: System.Console
  langs:
  - csharp
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a rácsterület előtérszínét a konzolt."
  remarks: "Egy Windows-alapú alkalmazáshoz, amelyben a konzol nem létezik, a get műveletet <xref:System.ConsoleColor>.</xref:System.ConsoleColor> adja vissza."
  example:
  - "The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.  \n  \n [!code-cs[System.ConsoleColor#2](~/add/codesnippet/csharp/p-system.console.foregro_1.cs)]\n [!code-vb[System.ConsoleColor#2](~/add/codesnippet/visualbasic/p-system.console.foregro_1.vb)]  \n  \n The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.foregro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.foregro_2.cs)]"
  syntax:
    content: public static ConsoleColor ForegroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "A <xref href=&quot;System.ConsoleColor&quot;> </xref> , amely megadja, hogy a konzol előtérszíne; Ez azt jelenti, hogy az egyes színét karakter, amely akkor jelenik meg. Az alapértelmezett érték a szürke."
  overload: System.Console.ForegroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Beállítási művelet a megadott szín tagja nem egy érvényes <xref href=&quot;System.ConsoleColor&quot;> </xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.In
  id: In
  parent: System.Console
  langs:
  - csharp
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi a szabványos bemeneti folyama."
  remarks: "Ez a tulajdonság a szabványos bemeneti folyama értéke alapértelmezés szerint. Ez a tulajdonság állítható be egy másik adatfolyam a <xref:System.Console.SetIn%2A>metódus.</xref:System.Console.SetIn%2A>       A szabványos bemeneti folyama olvasási műveletek szinkron módon hajtható végre. Ez azt jelenti, hogy letiltják a csak a megadott olvasási művelet befejezése után. Ez érvényét veszti, még akkor is, ha egy aszinkron metódus, például a <xref:System.IO.TextReader.ReadLineAsync%2A>, meghívta a <xref:System.IO.TextReader>In tulajdonság által visszaadott objektum.</xref:System.IO.TextReader> </xref:System.IO.TextReader.ReadLineAsync%2A>"
  example:
  - "The following sample illustrates the use of the `In` property.  \n  \n [!code-cpp[consolein#1](~/add/codesnippet/cpp/p-system.console.in_1.cpp)]\n [!code-cs[consolein#1](~/add/codesnippet/csharp/p-system.console.in_1.cs)]\n [!code-vb[consolein#1](~/add/codesnippet/visualbasic/p-system.console.in_1.vb)]"
  syntax:
    content: public static System.IO.TextReader In { get; }
    return:
      type: System.IO.TextReader
      description: "A <xref:System.IO.TextReader>, amely jelzi, hogy a szabványos bemeneti folyama.</xref:System.IO.TextReader>"
  overload: System.Console.In*
  exceptions: []
  platform:
  - net462
- uid: System.Console.InputEncoding
  id: InputEncoding
  parent: System.Console
  langs:
  - csharp
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a konzol segítségével olvassa a bemeneti kódolást."
  remarks: "A konzol a bevitel a billentyűzetről a megfelelő karakterré lefordítani kódolás bemeneti használ. A kódlapot, amely leképezhető 256 billentyűzet karakter kódok karakterek kódolását magában foglalja. Különböző kódlapok közé tartoznak a különböző különleges karaktereket, általában testreszabhatók nyelvet vagy a nyelvek egy csoportját.       Kezdve a [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a tulajdonság get művelethez térhetnek vissza egy gyorsítótárazott érték helyett a konzol aktuális kódolását. Ez akkor fordulhat elő, ha az InputEncoding tulajdonság értékének módosítása, például az EndEnumeration a Windows az InputEncoding tulajdonság a hozzárendelés eltérő módon `SetConsoleCP` függvény, vagy használja a `chcp` parancsot egy PowerShell-parancsfájlt."
  syntax:
    content: public static System.Text.Encoding InputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "A kódolás konzol bemeneti olvasásához használt."
  overload: System.Console.InputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A tulajdonság beállítási művelet érték <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Hiba történt a művelet végrehajtása közben."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Az alkalmazás nem rendelkezik engedéllyel a művelet elvégzéséhez."
  platform:
  - net462
- uid: System.Console.IsErrorRedirected
  id: IsErrorRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy a hiba kimeneti adatfolyamba átirányította a a szabványos hibaadatfolyam."
  syntax:
    content: public static bool IsErrorRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a hiba kimenet átirányítása; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.IsErrorRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsInputRedirected
  id: IsInputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Egy érték, amely azt jelzi, hogy bemeneti átirányította a szabványos bemeneti adatfolyamból való beolvasása."
  syntax:
    content: public static bool IsInputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a rendszer átirányítja a bemeneti; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.IsInputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsOutputRedirected
  id: IsOutputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy kimeneti átirányította a szabványos kimeneti adatfolyam."
  syntax:
    content: public static bool IsOutputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a kimenet átirányítása; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.IsOutputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.KeyAvailable
  id: KeyAvailable
  parent: System.Console
  langs:
  - csharp
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "E billentyű megnyomása érhető el a bemeneti adatfolyam jelző érték beolvasása."
  remarks: "A tulajdonság értéket adja vissza azonnal; Ez azt jelenti, hogy a KeyAvailable tulajdonság nem blokkolja az bemeneti addig, amíg egy billentyű megnyomása nem érhető el.       A KeyAvailable tulajdonsággal együtt csak a <xref:System.Console.ReadKey%2A>metódus, nem a <xref:System.Console.Read%2A>vagy <xref:System.Console.ReadLine%2A>módszerek.</xref:System.Console.ReadLine%2A> </xref:System.Console.Read%2A> </xref:System.Console.ReadKey%2A>"
  example:
  - "The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  \n  \n [!code-cs[console.keyavailable#1](~/add/codesnippet/csharp/p-system.console.keyavai_1.cs)]\n [!code-cpp[console.keyavailable#1](~/add/codesnippet/cpp/p-system.console.keyavai_1.cpp)]\n [!code-vb[console.keyavailable#1](~/add/codesnippet/visualbasic/p-system.console.keyavai_1.vb)]"
  syntax:
    content: public static bool KeyAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha egy billentyű megnyomása érhető el; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.KeyAvailable*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Szabványos bemeneti fájl helyett a billentyűzet van átirányítva."
  platform:
  - net462
- uid: System.Console.LargestWindowHeight
  id: LargestWindowHeight
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi a konzol lehetséges legnagyobb száma ablak sorok az aktuális betűtípust és a képernyő felbontása alapján."
  syntax:
    content: public static int LargestWindowHeight { get; }
    return:
      type: System.Int32
      description: "Sorok mért legnagyobb lehetséges konzolablak magasságát."
  overload: System.Console.LargestWindowHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Console.LargestWindowWidth
  id: LargestWindowWidth
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi a konzol lehetséges legnagyobb száma ablak oszlopok, az aktuális betűtípust és a képernyő felbontása alapján."
  syntax:
    content: public static int LargestWindowWidth { get; }
    return:
      type: System.Int32
      description: "A legnagyobb konzolablak szélessége oszlopok."
  overload: System.Console.LargestWindowWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott forrás területén a képernyőpuffer másolja egy konkrét célhoz területre."
  remarks: "Ha a cél és forrás paramétert adja meg az aktuális képernyő puffer határain kívül található pozíció, csak a terület része, a forrás, amely megfelel a cél területen belül másolja. A jelenlegi képernyő pufferbe Ez azt jelenti, hogy a forrás terület legyen levágva.       A MoveBufferArea metódus célterületre másolja át a forrás területen. A célként megadott terület nem intersect a forrás területen, ha a forrás terület üres értékeket az aktuális előtérben és háttérben színnel van megtöltve. Ellenkező esetben a forrás terület keresztezett része nincs kitöltve."
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "A forrás terület bal szélső oszlopában."
    - id: sourceTop
      type: System.Int32
      description: "A forrás terület legfelső sorában."
    - id: sourceWidth
      type: System.Int32
      description: "A forrás terület oszlopainak száma."
    - id: sourceHeight
      type: System.Int32
      description: "A forrás területen sorok száma."
    - id: targetLeft
      type: System.Int32
      description: "A cél terület bal szélső oszlopában."
    - id: targetTop
      type: System.Int32
      description: "A célként megadott terület legfelső sorában."
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Egy vagy több paraméterének nullánál kisebb.       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.       -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott forrás területén a képernyőpuffer másolja egy konkrét célhoz területre."
  remarks: "Ha a cél és forrás paraméter adja meg az aktuális képernyő puffer határain található pozíció, csak a terület része, a forrás, amely megfelel a cél területen belül másolja. A jelenlegi képernyő pufferbe Ez azt jelenti, hogy a forrás terület legyen levágva.       A <xref:System.Console.MoveBufferArea%2A>metódus másolja a forrás terület célterületre.</xref:System.Console.MoveBufferArea%2A> Ha a célként megadott terület nem intersect a forrás-terület, a forrás terület által megadott karaktert van megtöltve `sourceChar`, által megadott színekkel `sourceForeColor` és `sourceBackColor`. Ellenkező esetben a forrás terület keresztezett része nincs kitöltve.       A <xref:System.Console.MoveBufferArea%2A>metódus nem műveletet hajt végre, ha `sourceWidth` vagy `sourceHeight` nulla.</xref:System.Console.MoveBufferArea%2A>"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "A forrás terület bal szélső oszlopában."
    - id: sourceTop
      type: System.Int32
      description: "A forrás terület legfelső sorában."
    - id: sourceWidth
      type: System.Int32
      description: "A forrás terület oszlopainak száma."
    - id: sourceHeight
      type: System.Int32
      description: "A forrás területen sorok száma."
    - id: targetLeft
      type: System.Int32
      description: "A cél terület bal szélső oszlopában."
    - id: targetTop
      type: System.Int32
      description: "A célként megadott terület legfelső sorában."
    - id: sourceChar
      type: System.Char
      description: "A forrás terület kitöltéséhez használandó karakter."
    - id: sourceForeColor
      type: System.ConsoleColor
      description: "A forrás terület kitöltéséhez használandó előtérszíne."
    - id: sourceBackColor
      type: System.ConsoleColor
      description: "A forrás terület kitöltéséhez használandó háttérszíne."
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Egy vagy több paraméterének nullánál kisebb.       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.       -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Egyik vagy mindkét a szín paraméterek tagja nem a <xref href=&quot;System.ConsoleColor&quot;> </xref> enumerálása."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.NumberLock
  id: NumberLock
  parent: System.Console
  langs:
  - csharp
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi egy érték, amely jelzi, hogy a NUM LOCK billentyűzet váltógomb kapcsolja be vagy ki van kapcsolva."
  syntax:
    content: public static bool NumberLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>NUM LOCK bekapcsolt; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Ha NUM ZÁR ki van kapcsolva."
  overload: System.Console.NumberLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError
  id: OpenStandardError
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Szerez be a szabványos hibaadatfolyam."
  remarks: "Ez a módszer a szabványos hibaadatfolyam újbóli, miután módosította által használható a <xref:System.Console.SetError%2A>metódus.</xref:System.Console.SetError%2A>"
  example:
  - "The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/m-system.console.opensta_4_1.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/m-system.console.opensta_4_1.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.Stream OpenStandardError ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "A szabványos hibaadatfolyam."
  overload: System.Console.OpenStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError(System.Int32)
  id: OpenStandardError(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Szerez be a szabványos hibaadatfolyam, amely a megadott pufferméret van beállítva."
  remarks: "Ez a módszer a szabványos hibaadatfolyam újbóli, miután módosította által használható a <xref:System.Console.SetError%2A>metódus.</xref:System.Console.SetError%2A>"
  syntax:
    content: public static System.IO.Stream OpenStandardError (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "Az adatfolyam belső puffer mérete."
    return:
      type: System.IO.Stream
      description: "A szabványos hibaadatfolyam."
  overload: System.Console.OpenStandardError*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>értéke nem nulla."
  platform:
  - net462
- uid: System.Console.OpenStandardInput
  id: OpenStandardInput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A szabványos bemeneti folyama szerez be."
  remarks: "Ez a módszer a szabványos bemeneti folyama újbóli, miután módosította által használható a <xref:System.Console.SetIn%2A>metódus.</xref:System.Console.SetIn%2A>"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_3_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_3_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_3_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "A szabványos bemeneti folyama."
  overload: System.Console.OpenStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardInput(System.Int32)
  id: OpenStandardInput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Szerez be a szabványos bemeneti adatfolyam, amely a megadott pufferméret van beállítva."
  remarks: "Ez a módszer a szabványos kimeneti adatfolyam újbóli, miután módosította által használható a <xref:System.Console.SetIn%2A>metódus.</xref:System.Console.SetIn%2A>"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_2_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_2_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_2_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "Az adatfolyam belső puffer mérete."
    return:
      type: System.IO.Stream
      description: "A szabványos bemeneti folyama."
  overload: System.Console.OpenStandardInput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>értéke nem nulla."
  platform:
  - net462
- uid: System.Console.OpenStandardOutput
  id: OpenStandardOutput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Szerez be a szabványos kimeneti adatfolyam."
  remarks: "Ez a módszer a szabványos kimeneti adatfolyam újbóli, miután módosította által használható a <xref:System.Console.SetOut%2A>metódus.</xref:System.Console.SetOut%2A>"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_0_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_0_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_0_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "A szabványos kimeneti adatfolyam."
  overload: System.Console.OpenStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardOutput(System.Int32)
  id: OpenStandardOutput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Szerez be a szabványos kimeneti adatfolyam, amely a megadott pufferméret van beállítva."
  remarks: "Ez a módszer a szabványos kimeneti adatfolyam újbóli, miután módosította által használható a <xref:System.Console.SetOut%2A>metódus.</xref:System.Console.SetOut%2A>"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_1_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_1_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_1_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "Az adatfolyam belső puffer mérete."
    return:
      type: System.IO.Stream
      description: "A szabványos kimeneti adatfolyam."
  overload: System.Console.OpenStandardOutput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>értéke nem nulla."
  platform:
  - net462
- uid: System.Console.Out
  id: Out
  parent: System.Console
  langs:
  - csharp
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi a szabványos kimeneti adatfolyam."
  remarks: "Ez a tulajdonság a szabványos kimeneti adatfolyam értéke alapértelmezés szerint. Ez a tulajdonság állítható be egy másik adatfolyam a <xref:System.Console.SetOut%2A>metódus.</xref:System.Console.SetOut%2A>       Vegye figyelembe, hogy a hívások `Console.Out.WriteLine` módszerek egyenértékűek a megfelelő hívásainak <xref:System.Console.WriteLine%2A>módszerek.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the Out property to display an array containing the names of files in the application's current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  \n  \n [!code-cs[System.Console.Out#1](~/add/codesnippet/csharp/p-system.console.out_1.cs)]\n [!code-vb[System.Console.Out#1](~/add/codesnippet/visualbasic/p-system.console.out_1.vb)]"
  syntax:
    content: public static System.IO.TextWriter Out { get; }
    return:
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter>, amely jelzi, hogy a szabványos kimeneti adatfolyam.</xref:System.IO.TextWriter>"
  overload: System.Console.Out*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OutputEncoding
  id: OutputEncoding
  parent: System.Console
  langs:
  - csharp
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a kódolás a konzol kimeneti írni használ."
  remarks: "A konzol használatával a kódolás kimenete állomásneveket, az alkalmazások megfelelő konzol megjelenítési karakterekké írt karakterek. Az alapértelmezett kódlapján találhatók, amelyek a konzol használ a rendszer területi beállítása határozza meg.       Kezdve a [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a tulajdonság get művelet lehet, hogy a konzol aktuális kimeneti kódolás helyett gyorsítótárazott érték visszaadása. Ez akkor fordulhat elő, ha a OutputEncoding tulajdonság értékének módosítása, például az EndEnumeration a Windows a OutputEncoding tulajdonság a hozzárendelés eltérő módon `SetConsoleOutputCP` függvény."
  syntax:
    content: public static System.Text.Encoding OutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Kódolás a konzol kimeneti írásához használt."
  overload: System.Console.OutputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A tulajdonság beállítási művelet érték <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Hiba történt a művelet végrehajtása közben."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Az alkalmazás nem rendelkezik engedéllyel a művelet elvégzéséhez."
  platform:
  - net462
- uid: System.Console.Read
  id: Read
  parent: System.Console
  langs:
  - csharp
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Olvassa be a következő karakter a szabványos bemeneti folyama."
  remarks: "A Read metódusból való blokkol, amikor a bemeneti karaktereket; akkor ér véget, amikor lenyomja az a <xref:System.ConsoleKey>kulcs.</xref:System.ConsoleKey> Egy sor platformfüggő lezárást feladatütemezési Enter billentyű megnyomásával hozzáfűzi a bemeneti (például Windows hozzáfűz egy kocsivissza visszatérési-soremelés feladatütemezési). A Read metódusból későbbi hívásainak egyszerre a bemeneti egy karakter beolvasása. Után utolsó karakterének beolvasott, olvasási blokkolja a return újra és a ciklus ismétlődik.      > [!IMPORTANT] > A <xref:System.Console.ReadLine%2A>metódus, vagy a <xref:System.Console.KeyAvailable%2A>tulajdonság és <xref:System.Console.ReadKey%2A>módszer a Read metódusból használata helyett.</xref:System.Console.ReadKey%2A> </xref:System.Console.KeyAvailable%2A> </xref:System.Console.ReadLine%2A>       Vegye figyelembe, hogy az a metódus nem ad vissza a -1, kivéve, ha hajtsa végre az alábbi műveletek egyikét: - egyidejűleg nyomja meg a <xref:System.ConsoleModifiers>billentyűlenyomás és <xref:System.ConsoleKey>konzol kulcsot (Ctrl + Z), amely a következő feltételt: fájl vége jelet.</xref:System.ConsoleKey> </xref:System.ConsoleModifiers>      -A fájl végét az állapot, például a F6 függvény kulcsot a Windows jelzi egy egyenértékű billentyű lenyomásával.      -A bemeneti adatfolyam átirányítja a forrás, például egy szövegfájlt, amely egy tényleges fájl vége karaktert tartalmaz."
  example:
  - "The following example demonstrates the Read method.  \n  \n [!code-cpp[console.read#1](~/add/codesnippet/cpp/m-system.console.read_1.cpp)]\n [!code-cs[console.read#1](~/add/codesnippet/csharp/m-system.console.read_1.cs)]\n [!code-vb[console.read#1](~/add/codesnippet/visualbasic/m-system.console.read_1.vb)]"
  syntax:
    content: public static int Read ();
    parameters: []
    return:
      type: System.Int32
      description: "A következő bemeneti adatfolyamból karakter, vagy negatív (-1) egy, ha jelenleg nincsenek további karakterek kell olvasni."
  overload: System.Console.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.ReadKey
  id: ReadKey
  parent: System.Console
  langs:
  - csharp
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A következő karakter vagy függvény kulcs a felhasználó kap. A megnyomott billentyűt a konzolablakban jelennek meg."
  remarks: "A ReadKey metódus vár, ez azt jelenti, hogy blokkolja a kiállító ReadKey metódus, amíg egy karakter vagy függvény billentyű lenyomásakor szálon. Egy karakter vagy függvény kulcs egy vagy több Alt, Ctrl és Shift módosító kulcsokkal együtt is kattintanak. Azonban egy módosító billentyű lenyomásával önmagában nem okoz a ReadKey metódus való visszatéréshez.       Az alkalmazástól függően előfordulhat, hogy használni kívánt ReadKey metódus együtt a <xref:System.Console.KeyAvailable%2A>tulajdonság.</xref:System.Console.KeyAvailable%2A>       A ReadKey metódus a billentyűzet olvassa be, akkor is, ha a szabványos bemeneti fájl átirányítja a <xref:System.Console.SetIn%2A>metódus.</xref:System.Console.SetIn%2A>"
  example:
  - "One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  \n  \n [!code-cs[System.Console.ReadKey#1](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]\n [!code-vb[System.Console.ReadKey#1](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]  \n  \n Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.  \n  \n The following example uses the ReadKey method to display information about which key the user pressed..  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey ();
    parameters: []
    return:
      type: System.ConsoleKeyInfo
      description: "Egy objektum, amely leírja a <xref href=&quot;System.ConsoleKey&quot;> </xref> állandó és Unicode-karakter, ha van ilyen, amely megfelel a megnyomott konzol kulcs. A <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref> objektum is ismerteti, hogy, tagértékeinek <xref href=&quot;System.ConsoleModifiers&quot;> </xref> értékeket, hogy egy vagy több Shift, Alt vagy Ctrl módosító kulcsot megnyomásakor egyidejűleg a konzol kulccsal."
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref:System.Console.In*>tulajdonság a rendszer átirányítja a konzol csak néhány adatfolyamból.</xref:System.Console.In*>"
  platform:
  - net462
- uid: System.Console.ReadKey(System.Boolean)
  id: ReadKey(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A következő karakter vagy függvény kulcs a felhasználó kap. A megnyomott kulcsot nem kötelező a konzolablakban jelennek meg."
  remarks: "A <xref:System.Console.ReadKey%2A>metódust vár, ez azt jelenti, hogy a szál kiállító blokkolja a <xref:System.Console.ReadKey%2A>metódus, amíg egy karakter vagy függvény billentyű lenyomásakor.</xref:System.Console.ReadKey%2A> </xref:System.Console.ReadKey%2A> Egy karakter vagy függvény kulcs egy vagy több Alt, Ctrl és Shift módosító kulcsokkal együtt is kattintanak. Azonban egy módosító billentyű lenyomásával önmagában nem okoz a <xref:System.Console.ReadKey%2A>metódus való visszatéréshez.</xref:System.Console.ReadKey%2A>       Ha a `intercept` paraméter `true`, a megnyomott kulcs elfogják, és nem a konzolablakban jelennek meg, ha sikertelen, a megnyomott kulcs jelenik meg.       Az alkalmazástól függően előfordulhat, hogy használni kívánt a <xref:System.Console.ReadKey%2A>metódus együtt a <xref:System.Console.KeyAvailable%2A>tulajdonság.</xref:System.Console.KeyAvailable%2A> </xref:System.Console.ReadKey%2A>       A <xref:System.Console.ReadKey%2A>metódus beolvassa a billentyűzet, akkor is, ha a szabványos bemeneti fájl átirányítja a <xref:System.Console.SetIn%2A>metódus.</xref:System.Console.SetIn%2A> </xref:System.Console.ReadKey%2A>"
  example:
  - "One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  \n  \n [!code-vb[System.Console.ReadKey#2](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]\n [!code-cs[System.Console.ReadKey#2](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]  \n  \n The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  \n  \n [!code-cs[console.readkey2#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey2#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey2#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey (bool intercept);
    parameters:
    - id: intercept
      type: System.Boolean
      description: "Meghatározza, hogy megjelenjen-e a megnyomott billentyűt a konzolablakban. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a megnyomott kulcs; megjelenítése Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ConsoleKeyInfo
      description: "Egy objektum, amely leírja a <xref href=&quot;System.ConsoleKey&quot;> </xref> állandó és Unicode-karakter, ha van ilyen, amely megfelel a megnyomott konzol kulcs. A <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref> objektum is ismerteti, hogy, tagértékeinek <xref href=&quot;System.ConsoleModifiers&quot;> </xref> értékeket, hogy egy vagy több Shift, Alt vagy Ctrl módosító kulcsot megnyomásakor egyidejűleg a konzol kulccsal."
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref:System.Console.In*>tulajdonság a rendszer átirányítja a konzol csak néhány adatfolyamból.</xref:System.Console.In*>"
  platform:
  - net462
- uid: System.Console.ReadLine
  id: ReadLine
  parent: System.Console
  langs:
  - csharp
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A szabványos bemeneti folyama olvassa be a következő sor karaktereket."
  remarks: "A ReadLine metódus egy sort a szabványos bemeneti folyama olvassa be. (Egy sort a meghatározását, olvassa el az alábbi után.) Ez azt jelenti, hogy: - Ha a szabványos bemeneti eszköz a billentyűzet, amíg a felhasználó megnyomja ReadLine metódus blokkok a **Enter** kulcs.           A leggyakoribb egyikét használja a ReadLine módja szüneteltetni a következő futtatása előtt törölje a konzolon, és hozzá új információk megjelenítése, vagy kérjen a felhasználótól, hogy nyomja meg az Enter billentyűt az alkalmazás megszakítása előtt. A következő példa ezt mutatja be.           [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)][!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)][!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs) ] -szabványos bemeneti átirányítja egy fájlt, ha a ReadLine metódus fájlból olvassa be egy szövegsor.             Például az alábbiakban egy ReadLine1.txt nevű: ```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ``` az alábbi példában a ReadLine metódus olvassa a bemeneti, hogy a rendszer átirányítja egy fájlból. Az olvasási művelet ér véget, amikor a metódus visszaadja `null`, ami azt jelenti, hogy nincsenek sorok továbbra is olvasható.           [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)][!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb) ] fordítása a példa egy ReadLine1.exe nevű végrehajtható fájlba, után futtatható a használatával a parancssorból ```       ReadLine1 < ReadLine1.txt       ``` olvassa el a fájl tartalmát, és megjeleníti őket a konzolhoz.             Egy sor van definiálva, a karaktersorozatot, mely egy kocsivissza (hexadecimális 0x000d), egy üres sort (hexadecimális 0x000a) vagy értékét követi a <xref:System.Environment.NewLine%2A?displayProperty=fullName>tulajdonság.</xref:System.Environment.NewLine%2A?displayProperty=fullName> A visszaadott karakterlánc nem tartalmaz a lezáró karaktert. Alapértelmezés szerint a metódust a 256 karaktert bemeneti puffer bemeneti olvassa be. Mivel ez magában foglalja a <xref:System.Environment.NewLine%2A?displayProperty=fullName>karaktert, a módszer legfeljebb 254 karaktert tartalmazó sorok olvashatja.</xref:System.Environment.NewLine%2A?displayProperty=fullName> Hosszabb sorok olvasása, hívja meg a <xref:System.Console.OpenStandardInput%28System.Int32%29>metódus.</xref:System.Console.OpenStandardInput%28System.Int32%29>       A ReadLine metódus szinkron módon végrehajtja. Ez azt jelenti, hogy blokkol, amíg egy sor olvasható, vagy a Ctrl + Z billentyűkombináció kattintanak. A <xref:System.Console.In%2A>tulajdonság értéket ad vissza egy <xref:System.IO.TextReader>objektum, amely a szabványos bemeneti folyama jelöli, és mindkét szinkron rendelkező <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName>metódus és egy aszinkron <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>metódus.</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> </xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> </xref:System.IO.TextReader> </xref:System.Console.In%2A> Azonban, ha a konzol szabványos bemeneti folyama, használja a <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>aszinkron módon történik, hanem szinkron módon történik lefut és visszatér a `Task<String>` csak az olvasási művelet befejeződése után.</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>       Ha ez a módszer jelez egy <xref:System.OutOfMemoryException>kivétel, az olvasó helyzete, az alapul szolgáló <xref:System.IO.Stream>objektum által karakterek metódus tudta beolvasni a kiemelt, de már olvasta be a belső ReadLine pufferbe a karakterek törlődnek.</xref:System.IO.Stream> </xref:System.OutOfMemoryException> Az olvasó a az adatfolyam pozíciója nem módosítható, mert már olvassa el a karaktereket helyreállíthatatlan, és csak a <xref:System.IO.TextReader>.</xref:System.IO.TextReader> újrainicializálását keresztül elérhető legyen Ha a kezdeti pozícióra belül az adatfolyam érvénytelen, vagy az adatfolyam nem támogatja a keresést, az alapul szolgáló <xref:System.IO.Stream>is meg lehet újrainicializálni.</xref:System.IO.Stream> Ilyen helyzet elkerülése érdekében, és a megfelelő kód létrehozásához kell használnia a <xref:System.Console.KeyAvailable%2A>tulajdonság és <xref:System.Console.ReadKey%2A>metódus és a tároló az olvasás karakterek előre pufferbe.</xref:System.Console.ReadKey%2A> </xref:System.Console.KeyAvailable%2A>       Ha a Ctrl + Z karakter lenyomásakor, ha a módszer olvasási bemeneti a konzolról, a metódus visszaadja `null`. Ez lehetővé teszi, hogy a felhasználót, hogy megakadályozza a további bevitel a billentyűzetről ismétlődő ReadLine metódus hívásakor. Az alábbi példában látható az ebben a forgatókönyvben.       [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)][!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)][!code-vb[System.Console.ReadLine#1    ](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]"
  example:
  - "The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method to write the result to the output file.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.readline_4.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.readline_4.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.readline_4.cs)]"
  syntax:
    content: public static string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "A bemeneti adatfolyam karaktert tartalmaz a következő kódsorban vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha nincsenek további sorok érhetők el."
  overload: System.Console.ReadLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elegendő memória a visszaadott karakterlánc puffert kiosztani."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A következő kódsorban karaktereket karakterek érték nagyobb, mint &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Console.ResetColor
  id: ResetColor
  parent: System.Console
  langs:
  - csharp
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Beállítja az előtérben és háttérben konzol színét az alapértékekre."
  remarks: "Előtér-és háttér létezett, akkor az aktuális folyamatának megkezdését színek állítja vissza. További információkért lásd: a <xref:System.Console.ForegroundColor%2A>és <xref:System.Console.BackgroundColor%2A>Tulajdonságok.</xref:System.Console.BackgroundColor%2A> </xref:System.Console.ForegroundColor%2A>"
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the ResetColor method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/m-system.console.resetco_1.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/m-system.console.resetco_1.cs)]"
  syntax:
    content: public static void ResetColor ();
    parameters: []
  overload: System.Console.ResetColor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  id: SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott értékre állítja a magassága és szélessége által meghatározott képernyő pufferterület."
  remarks: ''
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, SetBufferSize, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setbuff_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setbuff_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setbuff_1.cs)]"
  syntax:
    content: public static void SetBufferSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "A puffer terület szélessége oszlopok."
    - id: height
      type: System.Int32
      description: "Egy sor pufferterület magasságának mérése történik."
  overload: System.Console.SetBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>height</code>vagy <code>width</code> kisebb vagy egyenlő, mint nulla.       – vagy – <code>height</code> vagy <code>width</code> nagyobb vagy egyenlő &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.       -or-       <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  id: SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Beállítja a kurzor pozíciója."
  remarks: "A SetCursorPosition metódus használatával adja meg, ahol a következő írási művelet a konzolablakban megkezdéséhez. Ha a megadott kurzor pozíciója kívül a területet, amely jelenleg látható a konzolablakban van, az ablak forrása automatikusan a kurzor láthatóvá megváltozik.       Az automatikusan kurzor a következő Karakterpozíció minden alkalommal, amikor egy karaktert a konzolablakban írni. Ha a kurzor konzolablak alsó jobb karakter helyén, a következő írási művelet okok ne kelljen több, a kurzor látható marad a konzolablakban. Ha szeretné-e egy karakter írni a jobb alsó Karakterpozíció anélkül, hogy ez a konzolablakban görgessen, használja a <xref:System.Console.MoveBufferArea%2A>metódus egy karakterrel adott pozícióban.</xref:System.Console.MoveBufferArea%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the SetCursorPosition and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.setcurs_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.setcurs_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.setcurs_1.vb)]"
  syntax:
    content: public static void SetCursorPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "A kurzor oszlopbeli pozíciója. Oszlopok számozása balról jobbra kezdődően: 0."
    - id: top
      type: System.Int32
      description: "A kurzor sorbeli pozíciója. Sorok számozása 0 kezdődő felülről."
  overload: System.Console.SetCursorPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>vagy <code>top</code> nullánál kisebb.       – vagy – <code>left</code> nagyobb vagy egyenlő <xref:System.Console.BufferWidth*>.       – vagy – <code>top</code> nagyobb vagy egyenlő <xref:System.Console.BufferHeight*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.SetError(System.IO.TextWriter)
  id: SetError(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Beállítja a <xref:System.Console.Error*>tulajdonság a megadott <xref:System.IO.TextWriter>objektum.</xref:System.IO.TextWriter> </xref:System.Console.Error*>"
  remarks: "Alapértelmezés szerint a <xref:System.Console.Error%2A>tulajdonsága a szabványos hibaadatfolyam kimeneti.</xref:System.Console.Error%2A>       A <xref:System.IO.StreamWriter>, amely magában foglalja a <xref:System.IO.FileStream>segítségével hibaüzenetek fájlba szeretné küldeni.</xref:System.IO.FileStream> </xref:System.IO.StreamWriter>"
  example:
  - "The following example shows how to redirect the standard error stream to a file.  \n  \n [!code-vb[System.Console.SetError#1](~/add/codesnippet/visualbasic/m-system.console.seterro_1.vb)]\n [!code-cs[System.Console.SetError#1](~/add/codesnippet/csharp/m-system.console.seterro_1.cs)]\n [!code-cpp[System.Console.SetError#1](~/add/codesnippet/cpp/m-system.console.seterro_1.cpp)]"
  syntax:
    content: public static void SetError (System.IO.TextWriter newError);
    parameters:
    - id: newError
      type: System.IO.TextWriter
      description: "Amely az új standard hiba kimeneti adatfolyam."
  overload: System.Console.SetError*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newError</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.Console.SetIn(System.IO.TextReader)
  id: SetIn(System.IO.TextReader)
  parent: System.Console
  langs:
  - csharp
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Beállítja a <xref:System.Console.In*>tulajdonság a megadott <xref:System.IO.TextReader>objektum.</xref:System.IO.TextReader> </xref:System.Console.In*>"
  remarks: "Alapértelmezés szerint a <xref:System.Console.In%2A>tulajdonsága a szabványos bemeneti folyama.</xref:System.Console.In%2A>       A <xref:System.IO.StreamReader>, amely magában foglalja a <xref:System.IO.FileStream>is használható, hogy fogadja a fájlból.</xref:System.IO.FileStream> </xref:System.IO.StreamReader>"
  example:
  - "The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setin-s_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setin-s_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setin-s_1.cs)]"
  syntax:
    content: public static void SetIn (System.IO.TextReader newIn);
    parameters:
    - id: newIn
      type: System.IO.TextReader
      description: "Olyan adatfolyamra, amely az új szabványos bemeneti."
  overload: System.Console.SetIn*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newIn</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.Console.SetOut(System.IO.TextWriter)
  id: SetOut(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Beállítja a <xref:System.Console.Out*>tulajdonság a megadott <xref:System.IO.TextWriter>objektum.</xref:System.IO.TextWriter> </xref:System.Console.Out*>"
  remarks: "Alapértelmezés szerint a <xref:System.Console.Out%2A>tulajdonsága a szabványos kimeneti adatfolyam.</xref:System.Console.Out%2A>       A <xref:System.IO.StreamWriter>, amely magában foglalja a <xref:System.IO.FileStream>segítségével kimeneti fájlba szeretné küldeni.</xref:System.IO.FileStream> </xref:System.IO.StreamWriter> Például: [!code-cs [System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)][!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)][!code-cpp[System.Console.SetOut#1    ](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]"
  example:
  - "The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setout-_2.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setout-_2.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setout-_2.cs)]"
  syntax:
    content: public static void SetOut (System.IO.TextWriter newOut);
    parameters:
    - id: newOut
      type: System.IO.TextWriter
      description: "Amely az új szabványos kimeneti adatfolyam."
  overload: System.Console.SetOut*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newOut</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  id: SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Beállítja a konzolablakban a képernyőpuffer viszonyított pozícióját."
  remarks: "Az operációs rendszer ablakában a konzolablakban, valamint a konzolablakban jeleníti meg a képernyőpuffer része. A SetWindowPosition metódus hatással van a konzolablakban a képernyőpuffer viszonyított helyzete, de nincs hatással az operációs rendszer ablak az asztal viszonyított pozícióját.       A konzol és az operációs rendszer windows általában nem befolyásolják egymással. Azonban a képernyőpuffer nem lehet megjeleníteni a konzolablak aktuális határokban, ha az operációs rendszer automatikusan hozzáfűzi görgetősávok az operációs rendszer ablakában. Ebben az esetben az operációs rendszer ablak görgetősávok áthelyezése hatással van a konzolablakban pozícióját, és helyezze át a konzolablakban SetWindowPosition módszerrel hatással van az operációs rendszer ablak görgetősávok pozícióját."
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the SetWindowPosition, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setwind_0_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setwind_0_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setwind_0_1.cs)]"
  syntax:
    content: public static void SetWindowPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "A konzolablakban bal felső sarkában oszlopbeli pozíciója."
    - id: top
      type: System.Int32
      description: "A konzolablakban bal felső sarkában sorbeli pozíciója."
  overload: System.Console.SetWindowPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>vagy <code>top</code> nullánál kisebb.       – vagy – <code>left</code>  + <xref:System.Console.WindowWidth*> nagyobb, mint <xref:System.Console.BufferWidth*>.       – vagy – <code>top</code>  + <xref:System.Console.WindowHeight*> nagyobb, mint <xref:System.Console.BufferHeight*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  id: SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott értékre állítja a magasságát és szélességét a konzolablakban."
  remarks: ''
  example:
  - "This example demonstrates the SetWindowSize method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/m-system.console.setwind_1_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/m-system.console.setwind_1_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/m-system.console.setwind_1_1.cs)]"
  syntax:
    content: public static void SetWindowSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "A konzolablakban szélessége oszlopok."
    - id: height
      type: System.Int32
      description: "Sorok mérni a konzolablak magasságát."
  overload: System.Console.SetWindowSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>width</code>vagy <code>height</code> kisebb vagy egyenlő, mint nulla.       – vagy – <code>width</code> plus <xref:System.Console.WindowLeft*> vagy <code>height</code> plus <xref:System.Console.WindowTop*> nagyobb vagy egyenlő &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       – vagy – <code>width</code> vagy <code>height</code> nagyobb, mint a legnagyobb lehetséges ablak szélesség vagy magasság az aktuális képernyő megoldás és a konzol betűtípus."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználónak nincs engedélye a művelet végrehajtásához."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Title
  id: Title
  parent: System.Console
  langs:
  - csharp
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a cím megjelenítése a konzol címsorában."
  remarks: ''
  example:
  - "This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  \n  \n [!code-cs[console.title#1](~/add/codesnippet/csharp/p-system.console.title_1.cs)]\n [!code-cpp[console.title#1](~/add/codesnippet/cpp/p-system.console.title_1.cpp)]\n [!code-vb[console.title#1](~/add/codesnippet/visualbasic/p-system.console.title_1.vb)]"
  syntax:
    content: public static string Title { get; set; }
    return:
      type: System.String
      description: "A konzol címsorában megjelenítendő karakterlánc. A cím karakterlánc maximális hossza 24500 karaktereket."
  overload: System.Console.Title*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Egy get művelettel lekérdezett neve 24500 karakternél hosszabb."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A beállítási művelet a megadott cím nem 24500 karakternél hosszabb."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A beállítási művelet a megadott cím nem <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.TreatControlCAsInput
  id: TreatControlCAsInput
  parent: System.Console
  langs:
  - csharp
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja, hogy egy érték, amely jelzi, hogy a kombinációja a <xref href=&quot;System.ConsoleModifiers&quot;> </xref> billentyűlenyomás és <xref href=&quot;System.ConsoleKey&quot;> </xref> konzol kulcs (Ctrl + C) kezeli a szokványos beviteli vagy megszakítását, amely az operációs rendszer kezeli."
  remarks: "Ha a TreatControlCAsInput tulajdonság értéke `false` van nyomva a Ctrl + C, majd a megnyomott kulcsok nem szerepelnek a bemeneti puffer és az operációs rendszer a jelenleg végrehajtás alatt álló folyamat leáll. Ez az alapértelmezett beállítás.      > [!CAUTION] > Körültekintően használja ezt a tulajdonságot, mert értékre állítaná `true` jelentős hatással van. A legtöbb felhasználó várt Ctrl + C egy konzolalkalmazás leáll. Tiltsa le a Ctrl + C hatását, ha a felhasználó kell fontos, hogy a Ctrl + Break leáll az alkalmazás, amely egy kevésbé ismert billentyűkombinációt."
  example:
  - "The following example demonstrates the TreatControlCAsInput property.  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.console.treatco_1.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.console.treatco_1.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.console.treatco_1.vb)]"
  syntax:
    content: public static bool TreatControlCAsInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a Ctrl + C úgy viselkedik, mint a szokásos bemeneti; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.TreatControlCAsInput*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Nem sikerült beolvasni vagy megadni a bemeneti mód a konzol bemeneti puffer."
  platform:
  - net462
- uid: System.Console.WindowHeight
  id: WindowHeight
  parent: System.Console
  langs:
  - csharp
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a konzol ablakot terület magasságát."
  remarks: "Kísérlet a WindowHeight tulajdonság értékét, ha a kimenet átirányítása jelez, vagy egy <xref:System.ArgumentOutOfRangeException>vagy egy <xref:System.IO.IOException>kivétel.</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> Kivétel érdekében állítsa be a tulajdonság csak akkor, ha az érték a <xref:System.Console.IsOutputRedirected%2A>tulajdonság beolvasása `false`.</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windowh_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windowh_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windowh_1.cs)]"
  syntax:
    content: public static int WindowHeight { get; set; }
    return:
      type: System.Int32
      description: "Sorok mérni a konzolablak magasságát."
  overload: System.Console.WindowHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Értékét a <> </> *> tulajdonság vagy a WindowHeight tulajdonság értéke nem kisebb vagy egyenlő, mint 0.       – vagy – a WindowHeight tulajdonság értéke plusz a értékének a <> </> *> tulajdonsága nagyobb vagy egyenlő &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       – vagy – értékének a <xref:System.Console.WindowWidth*>tulajdonság vagy a WindowHeight tulajdonság értéke nagyobb a legnagyobb lehetséges ablak szélesség vagy magasság az aktuális képernyő megoldás és a konzol betűtípus.</xref:System.Console.WindowWidth*>"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Olvasásakor hiba vagy adatok írása."
  platform:
  - net462
- uid: System.Console.WindowLeft
  id: WindowLeft
  parent: System.Console
  langs:
  - csharp
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a konzol ablakot terület a képernyőpuffer viszonyítva bal oldali pozíciója."
  remarks: "A konzol téglalap alakú ablak nagyobb téglalap alakú puffer területre jelöli. A ablakban, mind a puffer mérik függőleges azok a sorok számát és a vízszintes az oszlopok számát. Határozza meg a puffer terület méretét a <xref:System.Console.BufferHeight%2A>és <xref:System.Console.BufferWidth%2A>Tulajdonságok.</xref:System.Console.BufferWidth%2A> </xref:System.Console.BufferHeight%2A> Határozza meg a konzol terület méretét a <xref:System.Console.WindowHeight%2A>és <xref:System.Console.WindowWidth%2A>Tulajdonságok.</xref:System.Console.WindowWidth%2A> </xref:System.Console.WindowHeight%2A> A WindowLeft tulajdonság határozza meg, melyik oszlop puffer terület az első oszlopban a konzolablak jelenik meg. A WindowLeft tulajdonság értékének 0 és között lehet <xref:System.Console.BufferWidth%2A>- <xref:System.Console.WindowWidth%2A>.</xref:System.Console.WindowWidth%2A> </xref:System.Console.BufferWidth%2A> <xref:System.ArgumentOutOfRangeException>.</xref:System.ArgumentOutOfRangeException> Beállítani a tartományon kívül eső értéket jelez.       A konzolablakban első megnyitásakor, az alapértelmezett a WindowLeft tulajdonság értéke nulla, ami azt jelzi, hogy megfelel-e az első oszlopban látható a konzol pufferterület az első oszlop (a nulla pozíciótól. oszlop). Az alapértelmezett vonalvastagságot a konzolablakban és a pufferterület 80 oszlopok. Ez azt jelenti, hogy a WindowLeft tulajdonság csak akkor, ha létrejön, hogy a konzolablakban szűkebb vagy pufferterület szélesebb történik módosítható-e.       Vegye figyelembe, hogy a pufferterület szélessége meghaladja a konzolablakban szélességének, ha a WindowLeft tulajdonság automatikusan módosul a felhasználó a vízszintes görgetősáv használja az ablak kapcsolatot meghatározni a puffer területen, ha.       Kísérlet a WindowLeft tulajdonság átirányított jelez kimeneti esetén egy <xref:System.IO.IOException>kivétel.</xref:System.IO.IOException> A kivétel érdekében állítsa be a tulajdonság csak akkor, ha az értéke a <xref:System.Console.IsOutputRedirected%2A>tulajdonság beolvasása `false`.</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.  \n  \n [!code-vb[System.Console.WindowLeft#1](~/add/codesnippet/visualbasic/p-system.console.windowl_1.vb)]\n [!code-cs[System.Console.WindowLeft#1](~/add/codesnippet/csharp/p-system.console.windowl_1.cs)]\n [!code-cpp[System.Console.WindowLeft#1](~/add/codesnippet/cpp/p-system.console.windowl_1.cpp)]"
  syntax:
    content: public static int WindowLeft { get; set; }
    return:
      type: System.Int32
      description: "A konzol bal oldali ablak pozícióját oszlopok mérve."
  overload: System.Console.WindowLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A beállítási művelet hozzá kell rendelni a érték kisebb, mint nulla.       – vagy – a hozzárendelés, plusz WindowLeft miatt <> </> *> túllépné <> </> *>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Olvasásakor hiba vagy adatok írása."
  platform:
  - net462
- uid: System.Console.WindowTop
  id: WindowTop
  parent: System.Console
  langs:
  - csharp
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a konzol ablakot terület a képernyőpuffer viszonyítva felső pozíciója."
  remarks: "A konzol téglalap alakú ablak nagyobb téglalap alakú puffer területre jelöli. A ablakban, mind a puffer mérik függőleges azok a sorok számát és a vízszintes az oszlopok számát. Határozza meg a puffer terület méretét a <xref:System.Console.BufferHeight%2A>és <xref:System.Console.BufferWidth%2A>Tulajdonságok.</xref:System.Console.BufferWidth%2A> </xref:System.Console.BufferHeight%2A> Határozza meg a konzol terület méretét a <xref:System.Console.WindowHeight%2A>és <xref:System.Console.WindowWidth%2A>Tulajdonságok.</xref:System.Console.WindowWidth%2A> </xref:System.Console.WindowHeight%2A> A WindowTop tulajdonság határozza meg, melyik pufferterület jelennek meg, az első oszlopban a konzolablak. A WindowTop tulajdonság értékének 0 és között lehet <xref:System.Console.BufferHeight%2A>- <xref:System.Console.WindowHeight%2A>.</xref:System.Console.WindowHeight%2A> </xref:System.Console.BufferHeight%2A> <xref:System.ArgumentOutOfRangeException>.</xref:System.ArgumentOutOfRangeException> Beállítani a tartományon kívül eső értéket jelez.       Kísérlet a WindowTop tulajdonság átirányított jelez kimeneti esetén egy <xref:System.IO.IOException>kivétel.</xref:System.IO.IOException> A kivétel érdekében állítsa be a tulajdonság csak akkor, ha az értéke a <xref:System.Console.IsOutputRedirected%2A>tulajdonság beolvasása `false`.</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, WindowTop, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/p-system.console.windowtop_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/p-system.console.windowtop_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/p-system.console.windowtop_1.cs)]"
  syntax:
    content: public static int WindowTop { get; set; }
    return:
      type: System.Int32
      description: "A legfelső konzol ablak pozícióját mért egy sor."
  overload: System.Console.WindowTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A beállítási művelet hozzá kell rendelni a érték kisebb, mint nulla.       – vagy – a hozzárendelés, plusz WindowTop miatt <> </> *> túllépné <> </> *>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Olvasásakor hiba vagy adatok írása."
  platform:
  - net462
- uid: System.Console.WindowWidth
  id: WindowWidth
  parent: System.Console
  langs:
  - csharp
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Lekérdezi vagy beállítja a konzolablakban szélességét."
  remarks: "Kísérlet a WindowWidth tulajdonság értékét, ha a kimenet átirányítása jelez, vagy egy <xref:System.ArgumentOutOfRangeException>vagy egy <xref:System.IO.IOException>kivétel.</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> Kivétel érdekében állítsa be a tulajdonság csak akkor, ha az érték a <xref:System.Console.IsOutputRedirected%2A>tulajdonság beolvasása `false`.</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the WindowWidth and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windoww_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windoww_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windoww_1.cs)]"
  syntax:
    content: public static int WindowWidth { get; set; }
    return:
      type: System.Int32
      description: "A konzolablakban szélessége oszlopok."
  overload: System.Console.WindowWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A WindowWidth tulajdonságának vagy értékének értékének a <> </> *> tulajdonság értéke kisebb vagy egyenlő, mint 0.       – vagy – értékének a <> </> *> tulajdonság és az értékét a <> </> *> tulajdonsága nagyobb vagy egyenlő &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       – vagy – a WindowWidth tulajdonságának vagy értékének a <> </> *> tulajdonság értéke nagyobb, mint a legnagyobb lehetséges ablak szélesség vagy magasság az aktuális képernyő megoldás és a konzol betűtípus."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Olvasásakor hiba vagy adatok írása."
  platform:
  - net462
- uid: System.Console.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott logikai értéket a szöveges alakot ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` <xref:System.Boolean.ToString%2A?displayProperty=fullName>, amelyek kimenete <xref:System.Boolean.TrueString?displayProperty=fullName>vagy <xref:System.Boolean.FalseString?displayProperty=fullName>.</xref:System.Boolean.FalseString?displayProperty=fullName> </xref:System.Boolean.TrueString?displayProperty=fullName> </xref:System.Boolean.ToString%2A?displayProperty=fullName> hívja elő"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_8_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_8_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_8_1.cpp)]"
  syntax:
    content: public static void Write (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Char)
  id: Write(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott Unicode-karakter értéket ír a szabványos kimeneti adatfolyam."
  remarks: ''
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_9_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_9_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_9_1.cpp)]"
  syntax:
    content: public static void Write (char value);
    parameters:
    - id: value
      type: System.Char
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott tömb a Unicode-karaktereket ír a szabványos kimeneti adatfolyam."
  syntax:
    content: public static void Write (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode-karakter tömb."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott szöveges ábrázolását ír <xref:System.Decimal>érték a szabványos kimeneti adatfolyam.</xref:System.Decimal>"
  remarks: "A szöveges alakot `value` <xref:System.Decimal.ToString%2A?displayProperty=fullName>.</xref:System.Decimal.ToString%2A?displayProperty=fullName> hívja elő"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_12_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_12_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_12_1.cpp)]"
  syntax:
    content: public static void Write (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Double)
  id: Write(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott kétszeres pontosságú lebegőpontos értéket a szöveges alakot ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Double.ToString%2A?displayProperty=fullName>metódus.</xref:System.Double.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_6_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_6_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_6_1.cpp)]"
  syntax:
    content: public static void Write (double value);
    parameters:
    - id: value
      type: System.Double
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 32 bites előjeles egész érték a szöveges ábrázolást ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Int32.ToString%2A?displayProperty=fullName>metódus.</xref:System.Int32.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_10_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_10_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_10_1.cpp)]"
  syntax:
    content: public static void Write (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 64 bites előjeles egész érték a szöveges ábrázolást ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Int64.ToString%2A?displayProperty=fullName>metódus.</xref:System.Int64.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_0_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_0_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_0_1.cpp)]"
  syntax:
    content: public static void Write (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Object)
  id: Write(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum szöveges ábrázolását ír a szabványos kimeneti adatfolyam."
  remarks: "Ha `value` van `null`, semmi sem írása, és nincs kivétel történt. Ellenkező esetben a `ToString` metódusában `value` eredményezett a karakterlánc-ábrázolása, neve és az eredményül kapott karakterláncot a szabványos kimeneti adatfolyam."
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_3_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_3_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_3_1.cpp)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Az érték írni, vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.Single)
  id: Write(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott egyszeres pontosságú lebegőpontos értéket a szöveges alakot ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Single.ToString%2A?displayProperty=fullName>metódus.</xref:System.Single.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_1_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_1_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_1_1.cpp)]"
  syntax:
    content: public static void Write (float value);
    parameters:
    - id: value
      type: System.Single
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.String)
  id: Write(System.String)
  parent: System.Console
  langs:
  - csharp
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott karakterlánc értéket ír a szabványos kimeneti adatfolyam."
  remarks: "Ha az érték `null`, semmi nem ír a szabványos kimeneti adatfolyam."
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_5_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_5_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_5_1.cpp)]"
  syntax:
    content: public static void Write (string value);
    parameters:
    - id: value
      type: System.String
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 32 bites előjel nélküli egész érték a szöveges ábrázolást ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.UInt32.ToString%2A?displayProperty=fullName>metódus.</xref:System.UInt32.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_7_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_7_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_7_1.cpp)]"
  syntax:
    content: public static void Write (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 64 bites előjel nélküli egész érték a szöveges ábrázolást ír a szabványos kimeneti adatfolyam."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.UInt64.ToString%2A?displayProperty=fullName>metódus.</xref:System.UInt64.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_4_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_4_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_4_1.cpp)]"
  syntax:
    content: public static void Write (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "Az érték írni."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object)
  id: Write(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum szöveges ábrázolását ír a standard kimeneti adatfolyamba, a megadott formátumban információk alapján."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_2_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_2_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_1.vb)]  \n  \n The following example illustrates the use of the Write method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_2_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_2_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Egy objektum használatával írni `format`."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object[])
  id: Write(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektumokból álló tömb szöveges ábrázolását ír a standard kimeneti adatfolyamba, a megadott formátumban információk alapján."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md).       A `arg` paramétere a paramétertömböt. Argumentumok átadhatók a metódus egy tömb, vagy legalább öt elemek listáját. A példák mutatják be, hogy mindkét formában metódus hívása."
  example:
  - "The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  \n  \n [!code-cs[System.Console.Write#1](~/add/codesnippet/csharp/m-system.console.write-s_13_1.cs)]\n [!code-vb[System.Console.Write#1](~/add/codesnippet/visualbasic/m-system.console.write-s_13_1.vb)]  \n  \n Note that the example calls the Write method rather than the [WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  \n  \n The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.  \n  \n [!code-vb[System.Console.Write#2](~/add/codesnippet/visualbasic/m-system.console.write-s_13_2.vb)]\n [!code-cs[System.Console.Write#2](~/add/codesnippet/csharp/m-system.console.write-s_13_2.cs)]"
  syntax:
    content: public static void Write (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg
      type: System.Object[]
      description: "Használja az objektumok tömbje `format`."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott subarray a Unicode-karaktereket ír a szabványos kimeneti adatfolyam."
  remarks: "Ez a metódus írási műveletek `count` karakterek, pozíciótól kezdődően `index` a `buffer` a standard kimeneti adatfolyamba."
  syntax:
    content: public static void Write (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode-karaktereket tömbjét."
    - id: index
      type: System.Int32
      description: "A kezdő helyzete `buffer`."
    - id: count
      type: System.Int32
      description: "Írható karakterek száma."
  overload: System.Console.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>vagy <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>plusz <code>count</code> , amely nem szerepel a következőben pozíciót <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum szöveges ábrázolást ír a standard kimeneti adatfolyamba, a megadott formátumban információk alapján."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_14_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_14_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_14_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_14_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Az első objektum használatával írni `format`."
    - id: arg1
      type: System.Object
      description: "A második objektum használatával írni `format`."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum szöveges ábrázolást ír a standard kimeneti adatfolyamba, a megadott formátumban információk alapján."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_11_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_11_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Az első objektum használatával írni `format`."
    - id: arg1
      type: System.Object
      description: "A második objektum használatával írni `format`."
    - id: arg2
      type: System.Object
      description: "A harmadik objektum használatával írni `format`."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektumot és a változó hosszúságú paraméter lista szöveges ábrázolását ír a standard kimeneti adatfolyamba, a megadott formátumban információk alapján."
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.Write#3](~/add/codesnippet/cpp/04cf3884-a7cc-4915-bdb2-_1.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Az első objektum használatával írni `format`."
    - id: arg1
      type: System.Object
      description: "A második objektum használatával írni `format`."
    - id: arg2
      type: System.Object
      description: "A harmadik objektum használatával írni `format`."
    - id: arg3
      type: System.Object
      description: "A negyedik objektum használatával írni `format`."
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.WriteLine
  id: WriteLine
  parent: System.Console
  langs:
  - csharp
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A standard kimeneti adatfolyamba ír, az aktuális sor lezárójele."
  remarks: "Az alapértelmezett sor lezárójele egy olyan karakterlánc, amelynek értéke egy soremelés követ kocsivissza (&quot;\\r&quot; C# vagy `vbCrLf` a Visual Basic nyelvben). A sor lezárójele módosíthatja úgy, hogy a <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>tulajdonsága a <xref:System.Console.Out%2A>tulajdonság egy másik karakterláncra.</xref:System.Console.Out%2A> </xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> A példa illusztrálja."
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the WriteLine and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeline_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeline_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeline_1.vb)]"
  syntax:
    content: public static void WriteLine ();
    parameters: []
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Boolean)
  id: WriteLine(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A szöveg megjelenítése a megadott logikai értéket, majd az aktuális sor lezárójele, a standard kimeneti adatfolyamba ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Boolean.ToString%2A?displayProperty=fullName>metódus.</xref:System.Boolean.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  \n  \n [!code-cpp[System.Console.WriteLine#4](~/add/codesnippet/cpp/m-system.console.writeli_5_1.cpp)]\n [!code-cs[System.Console.WriteLine#4](~/add/codesnippet/csharp/m-system.console.writeli_5_1.cs)]\n [!code-vb[System.Console.WriteLine#4](~/add/codesnippet/visualbasic/m-system.console.writeli_5_1.vb)]"
  syntax:
    content: public static void WriteLine (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char)
  id: WriteLine(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott Unicode karakter után az aktuális sor lezárójele, érték a standard kimeneti adatfolyamba ír."
  remarks: "A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_13_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_13_1.vb)]"
  syntax:
    content: public static void WriteLine (char value);
    parameters:
    - id: value
      type: System.Char
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[])
  id: WriteLine(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott tömb a Unicode-karaktereket, majd az aktuális sor lezárójele, a standard kimeneti adatfolyamba ír."
  remarks: "A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode-karakter tömb."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Decimal)
  id: WriteLine(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott szöveges ábrázolását ír <xref:System.Decimal>értéket, majd az aktuális sor lezárójele, a standard kimeneti adatfolyamba.</xref:System.Decimal>"
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Decimal.ToString%2A?displayProperty=fullName>metódus.</xref:System.Decimal.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_3_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_3_1.vb)]"
  syntax:
    content: public static void WriteLine (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Double)
  id: WriteLine(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott kétszeres pontosságú lebegőpontos értéket, az aktuális sor lezárójele, a standard kimeneti adatfolyamba követ szöveges ábrázolását ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Double.ToString%2A?displayProperty=fullName>metódus.</xref:System.Double.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_2_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_2_1.vb)]"
  syntax:
    content: public static void WriteLine (double value);
    parameters:
    - id: value
      type: System.Double
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int32)
  id: WriteLine(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 32 bites előjeles egész szám, az aktuális sor lezárójele, a standard kimeneti adatfolyamba követ szöveges ábrázolását ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Int32.ToString%2A?displayProperty=fullName>metódus.</xref:System.Int32.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_1_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_1_1.vb)]"
  syntax:
    content: public static void WriteLine (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int64)
  id: WriteLine(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 64 bites előjeles egész szám, az aktuális sor lezárójele, a standard kimeneti adatfolyamba követ szöveges ábrázolását ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Int64.ToString%2A?displayProperty=fullName>metódus.</xref:System.Int64.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_10_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_10_1.vb)]"
  syntax:
    content: public static void WriteLine (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A szöveges ábrázolást a megadott objektum, majd az aktuális sor lezárójele, a standard kimeneti adatfolyamba ír."
  remarks: "Ha `value` van `null`, csak a sor lezárójele írása. Ellenkező esetben a `ToString` metódusában `value` eredményezett a karakterlánc-ábrázolása, neve és az eredményül kapott karakterláncot a szabványos kimeneti adatfolyam.       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the WriteLine method to display each value in an object array to the console.  \n  \n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cs[System.Console.WriteLine#3](~/add/codesnippet/csharp/m-system.console.writeli_6_1.cs)]\n [!code-vb[System.Console.WriteLine#3](~/add/codesnippet/visualbasic/m-system.console.writeli_6_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Single)
  id: WriteLine(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott egyszeres pontosságú lebegőpontos értéket, az aktuális sor lezárójele, a standard kimeneti adatfolyamba követ szöveges ábrázolását ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.Single.ToString%2A?displayProperty=fullName>metódus.</xref:System.Single.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_4_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_4_1.vb)]"
  syntax:
    content: public static void WriteLine (float value);
    parameters:
    - id: value
      type: System.Single
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott karakterlánc értéket, majd az aktuális sor lezárójele, a standard kimeneti adatfolyamba ír."
  remarks: "Ha az érték `null`, csak a sor lezárójele íródik a szabványos kimeneti adatfolyam.       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine>metódus.</xref:System.Console.WriteLine>"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the <xref:System.Console.WriteLine> and WriteLine methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeli_0_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeli_0_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeli_0_1.vb)]"
  syntax:
    content: public static void WriteLine (string value);
    parameters:
    - id: value
      type: System.String
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt32)
  id: WriteLine(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 32 bites előjel nélküli egész szám, az aktuális sor lezárójele, a standard kimeneti adatfolyamba követ szöveges ábrázolását ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.UInt32.ToString%2A?displayProperty=fullName>metódus.</xref:System.UInt32.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_8_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_8_1.vb)]"
  syntax:
    content: public static void WriteLine (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt64)
  id: WriteLine(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott 64 bites előjel nélküli egész szám, az aktuális sor lezárójele, a standard kimeneti adatfolyamba követ szöveges ábrázolását ír."
  remarks: "A szöveges alakot `value` hívja elő a <xref:System.UInt64.ToString%2A?displayProperty=fullName>metódus.</xref:System.UInt64.ToString%2A?displayProperty=fullName>       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_12_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_12_1.vb)]"
  syntax:
    content: public static void WriteLine (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "Az érték írni."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object)
  id: WriteLine(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum, az aktuális sor lezárójele, a standard kimeneti adatfolyamba, a megadott formátumban adatokkal kiegészítve szöveges ábrázolását ír."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md).       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example calls the WriteLine method to display five randomly generated <xref:System.Boolean> values.  \n  \n [!code-vb[System.Console.WriteLine#6](~/add/codesnippet/visualbasic/m-system.console.writeli_9_1.vb)]\n [!code-cs[System.Console.WriteLine#6](~/add/codesnippet/csharp/m-system.console.writeli_9_1.cs)]  \n  \n The following example calls the WriteLine method to display the current date.   Note that the format item in the `format` argument uses the \"D\" [standard date and time format string](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) to display the date in the long date format of the current culture.  \n  \n [!code-vb[System.Console.WriteLine#7](~/add/codesnippet/visualbasic/m-system.console.writeli_9_2.vb)]\n [!code-cs[System.Console.WriteLine#7](~/add/codesnippet/csharp/m-system.console.writeli_9_2.cs)]"
  syntax:
    content: public static void WriteLine (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Egy objektum használatával írni `format`."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott tömb objektum – az aktuális sor lezárójele, a standard kimeneti adatfolyamba, a megadott formátumban adatokkal kiegészítve szöveges ábrázolását ír."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md).       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_11_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg
      type: System.Object[]
      description: "Használja az objektumok tömbje `format`."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  id: WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott subarray a Unicode-karaktereket, majd az aktuális sor lezárójele, a standard kimeneti adatfolyamba ír."
  remarks: "Ez a metódus írási műveletek `count` karakterek, pozíciótól kezdődően `index` a `buffer` a standard kimeneti adatfolyamba.       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode-karaktereket tömbjét."
    - id: index
      type: System.Int32
      description: "A kezdő helyzete `buffer`."
    - id: count
      type: System.Int32
      description: "Írható karakterek száma."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>vagy <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>plusz <code>count</code> , amely nem szerepel a következőben pozíciót <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum – az aktuális sor lezárójele, a standard kimeneti adatfolyamba, a megadott formátumban adatokkal kiegészítve szöveges ábrázolást ír."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md).       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_7_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_7_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_7_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Az első objektum használatával írni `format`."
    - id: arg1
      type: System.Object
      description: "A második objektum használatával írni `format`."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum – az aktuális sor lezárójele, a standard kimeneti adatfolyamba, a megadott formátumban adatokkal kiegészítve szöveges ábrázolást ír."
  remarks: "Ez a módszer a [összetett formázási szolgáltatás](~/add/includes/ajax-current-ext-md.md) a .NET-keretrendszer átalakítani egy objektum a értéket a szöveges ábrázolást és, hogy ábrázolását beágyazása karakterlánc. A kimeneti adatfolyamba való írása az eredményül kapott karakterláncot.       A `format` paraméter áll nulla vagy több frissítési kísérletei során szöveg összekeverve a nulla vagy több indexelt helyőrzők elemek formátum, amelyek megfelelnek a paraméterlistában szemlélteti ezt a módszert olyan objektumra. A formázási folyamata lecseréli a megfelelő objektum értékének szöveges ábrázolását minden elem formázása.       Egy elem formázása szintaxisa `{` *index*[`,`*igazítás*] [`:`*formatString*]`}`, amely kötelező index, a választható hossza és a formátumú szöveg igazítását adja meg, és egy opcionális formátummegadó karakterek, amelyek szabályozzák, hogyan értékének a megfelelő objektum karakterlánc formátuma.       A .NET-keretrendszer kiterjedt formázási, részletesebben az alábbi formázási témakörökben ismertetett támogatást nyújt.      -A további információk a támogatott metódusok, mint összetett formázási szolgáltatásról <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, és az egyes túlterhelések <xref:System.Console.WriteLine%2A>, lásd: [összetett formázás](../Topic/Composite%20Formatting.md).</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -Számformátumot kulcsszavak kapcsolatos további információkért lásd: [szabványos numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni numerikus formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Hamarosan dátum és idő formázása kulcsszavak további információkért lásd: [szabványos dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md) és [egyéni dátum és idő formátumú karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Számbavételi formátum kulcsszavak kapcsolatos további információkért lásd: [számbavételi formázási karakterláncok](~/add/includes/ajax-current-ext-md.md).      -Formázás kapcsolatos további információkért lásd: [formázás típusok](~/add/includes/ajax-current-ext-md.md).       A sor lezárójele kapcsolatos további információkért lásd: a megjegyzések szakasza a <xref:System.Console.WriteLine%2A>módszer, amely nem fogad el paramétereket.</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/ecdde448-c375-4488-93b7-_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Az első objektum használatával írni `format`."
    - id: arg1
      type: System.Object
      description: "A második objektum használatával írni `format`."
    - id: arg2
      type: System.Object
      description: "A harmadik objektum használatával írni `format`."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "A megadott objektum és a változó hosszúságú paraméter listáját, az aktuális sor lezárójele, a standard kimeneti adatfolyamba, a megadott formátumban adatokkal kiegészítve szöveges ábrázolását ír."
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."
  example:
  - "The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.WriteLine#5](~/add/codesnippet/cpp/b0d255a7-f5e0-4135-8d9b-_1.cpp)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "Összetett formázó karakterlánc (lásd: ()."
    - id: arg0
      type: System.Object
      description: "Az első objektum használatával írni `format`."
    - id: arg1
      type: System.Object
      description: "A második objektum használatával írni `format`."
    - id: arg2
      type: System.Object
      description: "A harmadik objektum használatával írni `format`."
    - id: arg3
      type: System.Object
      description: "A negyedik objektum használatával írni `format`."
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "A formátummegadás <code> format </code> érvénytelen."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Security.HostProtectionException
  parent: System.Security
  isExternal: false
  name: HostProtectionException
  nameWithType: HostProtectionException
  fullName: System.Security.HostProtectionException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Console.BackgroundColor
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
- uid: System.ConsoleColor
  parent: System
  isExternal: false
  name: ConsoleColor
  nameWithType: ConsoleColor
  fullName: System.ConsoleColor
- uid: System.Console.Beep
  parent: System.Console
  isExternal: false
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
- uid: System.Console.Beep(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Console.BufferHeight
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
- uid: System.Console.BufferWidth
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
- uid: System.Console.CancelKeyPress
  parent: System.Console
  isExternal: false
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
- uid: System.ConsoleCancelEventHandler
  parent: System
  isExternal: false
  name: ConsoleCancelEventHandler
  nameWithType: ConsoleCancelEventHandler
  fullName: System.ConsoleCancelEventHandler
- uid: System.Console.CapsLock
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Console.Clear
  parent: System.Console
  isExternal: false
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
- uid: System.Console.CursorLeft
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
- uid: System.Console.CursorSize
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
- uid: System.Console.CursorTop
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
- uid: System.Console.CursorVisible
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
- uid: System.Console.Error
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Console.ForegroundColor
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
- uid: System.Console.In
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Console.InputEncoding
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Console.IsErrorRedirected
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
- uid: System.Console.KeyAvailable
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
- uid: System.Console.LargestWindowHeight
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Console.NumberLock
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
- uid: System.Console.OpenStandardError
  parent: System.Console
  isExternal: false
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Console.OpenStandardError(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
- uid: System.Console.OpenStandardInput
  parent: System.Console
  isExternal: false
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
- uid: System.Console.OpenStandardInput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
- uid: System.Console.OpenStandardOutput
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
- uid: System.Console.OpenStandardOutput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
- uid: System.Console.Out
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
- uid: System.Console.OutputEncoding
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
- uid: System.Console.Read
  parent: System.Console
  isExternal: false
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
- uid: System.Console.ReadKey
  parent: System.Console
  isExternal: false
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
- uid: System.ConsoleKeyInfo
  parent: System
  isExternal: false
  name: ConsoleKeyInfo
  nameWithType: ConsoleKeyInfo
  fullName: System.ConsoleKeyInfo
- uid: System.Console.ReadKey(System.Boolean)
  parent: System.Console
  isExternal: false
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
- uid: System.Console.ReadLine
  parent: System.Console
  isExternal: false
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Console.ResetColor
  parent: System.Console
  isExternal: false
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
- uid: System.Console.SetError(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
- uid: System.Console.SetIn(System.IO.TextReader)
  parent: System.Console
  isExternal: false
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
- uid: System.Console.SetOut(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
- uid: System.Console.Title
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
- uid: System.Console.TreatControlCAsInput
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
- uid: System.Console.WindowHeight
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
- uid: System.Console.WindowLeft
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
- uid: System.Console.WindowTop
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
- uid: System.Console.WindowWidth
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
- uid: System.Console.Write(System.Boolean)
  parent: System.Console
  isExternal: false
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
- uid: System.Console.Write(System.Char)
  parent: System.Console
  isExternal: false
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
- uid: System.Console.Write(System.Char[])
  parent: System.Console
  isExternal: false
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Decimal)
  parent: System.Console
  isExternal: false
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Console.Write(System.Double)
  parent: System.Console
  isExternal: false
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Console.Write(System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
- uid: System.Console.Write(System.Int64)
  parent: System.Console
  isExternal: false
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Console.Write(System.Object)
  parent: System.Console
  isExternal: false
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
- uid: System.Console.Write(System.Single)
  parent: System.Console
  isExternal: false
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Console.Write(System.String)
  parent: System.Console
  isExternal: false
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
- uid: System.Console.Write(System.UInt32)
  parent: System.Console
  isExternal: false
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Console.Write(System.UInt64)
  parent: System.Console
  isExternal: false
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Console.Write(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
- uid: System.Console.Write(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
- uid: System.Console.Write(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
- uid: System.Console.WriteLine
  parent: System.Console
  isExternal: false
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
- uid: System.Console.WriteLine(System.Boolean)
  parent: System.Console
  isExternal: false
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
- uid: System.Console.WriteLine(System.Char)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
- uid: System.Console.WriteLine(System.Char[])
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
- uid: System.Console.WriteLine(System.Decimal)
  parent: System.Console
  isExternal: false
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
- uid: System.Console.WriteLine(System.Double)
  parent: System.Console
  isExternal: false
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
- uid: System.Console.WriteLine(System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
- uid: System.Console.WriteLine(System.Int64)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
- uid: System.Console.WriteLine(System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
- uid: System.Console.WriteLine(System.Single)
  parent: System.Console
  isExternal: false
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
- uid: System.Console.WriteLine(System.String)
  parent: System.Console
  isExternal: false
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
- uid: System.Console.WriteLine(System.UInt32)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
- uid: System.Console.WriteLine(System.UInt64)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
- uid: System.Console.WriteLine(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
- uid: System.Console.WriteLine(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
- uid: System.Console.BackgroundColor*
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
- uid: System.Console.Beep*
  parent: System.Console
  isExternal: false
  name: Beep
  nameWithType: Console.Beep
- uid: System.Console.BufferHeight*
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
- uid: System.Console.BufferWidth*
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
- uid: System.Console.CapsLock*
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
- uid: System.Console.Clear*
  parent: System.Console
  isExternal: false
  name: Clear
  nameWithType: Console.Clear
- uid: System.Console.CursorLeft*
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
- uid: System.Console.CursorSize*
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
- uid: System.Console.CursorTop*
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
- uid: System.Console.CursorVisible*
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
- uid: System.Console.Error*
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
- uid: System.Console.ForegroundColor*
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
- uid: System.Console.In*
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
- uid: System.Console.InputEncoding*
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
- uid: System.Console.IsErrorRedirected*
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected*
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected*
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
- uid: System.Console.KeyAvailable*
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
- uid: System.Console.LargestWindowHeight*
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth*
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea*
  parent: System.Console
  isExternal: false
  name: MoveBufferArea
  nameWithType: Console.MoveBufferArea
- uid: System.Console.NumberLock*
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
- uid: System.Console.OpenStandardError*
  parent: System.Console
  isExternal: false
  name: OpenStandardError
  nameWithType: Console.OpenStandardError
- uid: System.Console.OpenStandardInput*
  parent: System.Console
  isExternal: false
  name: OpenStandardInput
  nameWithType: Console.OpenStandardInput
- uid: System.Console.OpenStandardOutput*
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput
  nameWithType: Console.OpenStandardOutput
- uid: System.Console.Out*
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
- uid: System.Console.OutputEncoding*
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
- uid: System.Console.Read*
  parent: System.Console
  isExternal: false
  name: Read
  nameWithType: Console.Read
- uid: System.Console.ReadKey*
  parent: System.Console
  isExternal: false
  name: ReadKey
  nameWithType: Console.ReadKey
- uid: System.Console.ReadLine*
  parent: System.Console
  isExternal: false
  name: ReadLine
  nameWithType: Console.ReadLine
- uid: System.Console.ResetColor*
  parent: System.Console
  isExternal: false
  name: ResetColor
  nameWithType: Console.ResetColor
- uid: System.Console.SetBufferSize*
  parent: System.Console
  isExternal: false
  name: SetBufferSize
  nameWithType: Console.SetBufferSize
- uid: System.Console.SetCursorPosition*
  parent: System.Console
  isExternal: false
  name: SetCursorPosition
  nameWithType: Console.SetCursorPosition
- uid: System.Console.SetError*
  parent: System.Console
  isExternal: false
  name: SetError
  nameWithType: Console.SetError
- uid: System.Console.SetIn*
  parent: System.Console
  isExternal: false
  name: SetIn
  nameWithType: Console.SetIn
- uid: System.Console.SetOut*
  parent: System.Console
  isExternal: false
  name: SetOut
  nameWithType: Console.SetOut
- uid: System.Console.SetWindowPosition*
  parent: System.Console
  isExternal: false
  name: SetWindowPosition
  nameWithType: Console.SetWindowPosition
- uid: System.Console.SetWindowSize*
  parent: System.Console
  isExternal: false
  name: SetWindowSize
  nameWithType: Console.SetWindowSize
- uid: System.Console.Title*
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
- uid: System.Console.TreatControlCAsInput*
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
- uid: System.Console.WindowHeight*
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
- uid: System.Console.WindowLeft*
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
- uid: System.Console.WindowTop*
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
- uid: System.Console.WindowWidth*
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
- uid: System.Console.Write*
  parent: System.Console
  isExternal: false
  name: Write
  nameWithType: Console.Write
- uid: System.Console.WriteLine*
  parent: System.Console
  isExternal: false
  name: WriteLine
  nameWithType: Console.WriteLine
