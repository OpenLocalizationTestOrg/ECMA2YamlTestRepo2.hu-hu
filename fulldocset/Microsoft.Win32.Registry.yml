### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.Registry
  id: Registry
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.DynData
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  name: Registry
  nameWithType: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  summary: "Itt <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> objektumok, amelyek megfelelnek a legfelső szintű kulcs a Windows beállításjegyzékében és <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref> módszerek kulcs/érték párok eléréséhez."
  remarks: "Ez az osztály tartalmaz a Windows rendszerű gépekre a beállításjegyzékben található szabványos legfelső szintű kulccsal. A beállításjegyzék alapértelmezett rendszer beállításait, és az alkalmazások, a felhasználók számára a tárolási létesítmény. Például alkalmazások is használni a beállításjegyzékben, amely az alkalmazás bezárása után megőrzendő információk tárolására és érhető el, hogy ugyanazokat az információkat, amikor az alkalmazás van töltve. Tárolhatja például a szín beállítása, a képernyő helyeket vagy a az ablak mérete. Ezeket az adatokat az egyes felhasználók azt is szabályozhatja, hogy egy másik helyen található a beállításjegyzékben a információk tárolására.       Az alap, vagy a főtanúsítvány <xref:Microsoft.Win32.RegistryKey>példányok által a `Registry` osztály ábrázolni a alapvető tárolási mechanizmus alkulcsok és beállításjegyzék-értékeket.</xref:Microsoft.Win32.RegistryKey> Minden kulcs írásvédettek, mert a beállításjegyzék meglétének függ. A kulcsok által elérhetővé tett `Registry` vannak: <xref:Microsoft.Win32.Registry.CurrentUser>felhasználói beállítások kapcsolatos információkat tárolja.</xref:Microsoft.Win32.Registry.CurrentUser>       <xref:Microsoft.Win32.Registry.LocalMachine>A helyi gép konfigurációs adatait tárolja.</xref:Microsoft.Win32.Registry.LocalMachine>       <xref:Microsoft.Win32.Registry.ClassesRoot>Információ típusa (és osztályok) és azok tulajdonságaival tárolja.</xref:Microsoft.Win32.Registry.ClassesRoot>       <xref:Microsoft.Win32.Registry.Users>Az alapértelmezett felhasználói konfiguráció kapcsolatos információkat tárolja.</xref:Microsoft.Win32.Registry.Users>       <xref:Microsoft.Win32.Registry.PerformanceData>Szoftver-összetevő teljesítményének adatait tárolja.</xref:Microsoft.Win32.Registry.PerformanceData>       <xref:Microsoft.Win32.Registry.CurrentConfig>A hardver nem felhasználó-specifikus adatait tárolja.</xref:Microsoft.Win32.Registry.CurrentConfig>       <xref:Microsoft.Win32.Registry.DynData>Dinamikus adatokat tárolja.</xref:Microsoft.Win32.Registry.DynData>       Ha a legfelső szintű kulcsot, amely tároló/beolvasása a beállításjegyzékből információt kíván azonosított, használhatja a <xref:Microsoft.Win32.RegistryKey>hozzáadásához vagy eltávolításához alkulcsok osztály, és kezelheti a megadott kulcs értékeit.</xref:Microsoft.Win32.RegistryKey>       Hardvereszközök elhelyezheti adatokat automatikusan a Plug and Play felületén a beállításjegyzékben. Eszközillesztők telepítése a szoftverrel szabványos API-k írásával információk elhelyezheti a beállításjegyzékben.      ## Statikus metódusok bevezetés és beállítás értékek a a .NET-keretrendszer 2.0-s verzióját, a beállításjegyzék osztály is tartalmaz `static` <xref:Microsoft.Win32.Registry.GetValue%2A>és <xref:Microsoft.Win32.Registry.SetValue%2A>módszerek és értékek beolvasása a beállításkulcsokat.</xref:Microsoft.Win32.Registry.SetValue%2A> </xref:Microsoft.Win32.Registry.GetValue%2A> Nyissa meg a fenti módszerek és Bezárás beállításjegyzék kulcsok minden alkalommal szolgálnak, így azok nem működnek, valamint a hasonló módszerek a <xref:Microsoft.Win32.RegistryKey>osztály, amikor sok értékek fér hozzá.</xref:Microsoft.Win32.RegistryKey>       A <xref:Microsoft.Win32.RegistryKey>osztály is biztosít a módszereket, amelyek lehetővé teszik a Windows hozzáférés-vezérléssel érték adattípusa tesztelése előtt azt lekérése, és törölje a beállításkulcsokat.</xref:Microsoft.Win32.RegistryKey>"
  example:
  - "This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \n  \n Example 1  \n  \n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_1.vb)]  \n  \n Example 2  \n  \n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_2.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_2.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Registry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A típusok (vagy osztályok) dokumentumokat és e típusok társított tulajdonságok adhatók meg. Ez a mező a Windows alap beállításkulcs HKEY_CLASSES_ROOT olvassa be."
  remarks: "A hagyományos OLE alkalmazásokat és használata a kulcs alatt tárolt adatokat. Ezt a kulcsot is biztosít a Windows 3.1 adatbázist való kompatibilitás DDE és OLE támogatási adatait tárolja. Fájlmegjelenítők és a felhasználói felület bővítmények tárolja a OLE osztály azonosítókról ezt a kulcsot, és feldolgozás-kiszolgáló regisztrálva van ebben a kulcsban."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-vb[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_4_1.vb)]\n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_4_1.cpp)]\n [!code-cs[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_4_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A hardver nem áll a felhasználó adott konfigurációs információkat tartalmazza. Ez a mező a Windows alap beállításkulcs HKEY_CURRENT_CONFIG olvassa be."
  remarks: "Ez a tag <xref:Microsoft.Win32.Registry.LocalMachine>.</xref:Microsoft.Win32.Registry.LocalMachine> alkulcs van leképezve.       Ehhez a taghoz használatának példája az olyan alkalmazás, amely tárolja a saját adataikhoz attól függően, hogy a rendszer egy hálózati csatolva van egy másik kiszolgálónevet."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_1_1.cpp)]\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_1_1.vb)]\n [!code-cs[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_1_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A jelenlegi felhasználói beállítások adatait tartalmazza. Ez a mező olvassa be a Windows alap beállításkulcs HKEY_CURRENT_USER"
  remarks: "Ezt a kulcsot a tárolt információk környezeti változókat és a program csoportok, a színek, a nyomtatók, a hálózati kapcsolatokon és a beállítások adatainak beállításait tartalmazza. Ez a kulcs megkönnyíti a jelenlegi felhasználói beállításokat. Ebben a kulcsban szoftvergyártók tárolja az aktuális felhasználó-specifikus beállításokat az alkalmazásokon belül használható. A Microsoft, például a HKEY_CURRENT_USER\\Software\\Microsoft kulcsot, az alkalmazások használata a Microsoft-kulcs alatt a saját kulcs létrehozása minden alkalmazáshoz hoz létre."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentUser Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_6_1.cpp)]\n [!code-cs[Classic Registry.CurrentUser Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_6_1.cs)]\n [!code-vb[Classic Registry.CurrentUser Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_6_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.DynData
  id: DynData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Dinamikus beállításjegyzék-adatokat tartalmaz. Ez a mező a Windows alap beállításkulcs HKEY_DYN_DATA olvassa be."
  remarks: "A Windows 98/Windows Me beállításjegyzék statikus (tárolt adatok a lemezen a beállításjegyzékben) és a dinamikus adatok (amely változik gyakran, például teljesítménystatisztikáit) is támogatja. A dinamikus adatterület-hoz a mechanizmust, amely lehetővé teszi a virtuális eszköz-illesztőprogramok (vxd) valós idejű adatok távolról, valamint a helyileg futtathat Win32 alkalmazásokat. Lehetővé teszi a figyelő teljesítménystatisztikáit biztosításához a távoli Windows 98/Windows Me rendszereken.       VXD a teljesítményadatok nem korlátozódnak. Adhatók át Ring 0 Ring 3 hatékonyan a CPU legaktívabbak nélkül szeretne adatokat is biztosítanak. A beállításjegyzék támogatja a dinamikus adatokat egy olyan függvényt ad vissza értéket (vagy sok értéket) mutató elhelyezésével. Ha egy hívás lekérdezések beállításazonosítókat egy dinamikus kulcshoz tartozó, hogy a függvény hívása esetén a kívánt értéket, vagy az értékeket.      > [!NOTE] > Dinamikus kulcsok jelentek meg a Microsoft Windows 95 dinamikus beállításjegyzék-adatok kezeléséhez. Csak a Windows 98/Windows Me támogattak"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \n  \n [!code-vb[Classic Registry.DynData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_3_1.vb)]\n [!code-cs[Classic Registry.DynData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_3_1.cs)]\n [!code-cpp[Classic Registry.DynData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_3_1.cpp)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey DynData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Az operációs rendszer nem támogatja a dinamikus adatokat; Ez azt jelenti, hogy nincs Windows 98, a Windows 98 második kiadás vagy a Windows Me (Windows Me)."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A megadott név, a megadott beállításkulcsban társított értékét kérdezi le. Ha a név nem található a megadott kulcs, adja vissza az alapértelmezett értéket ad meg, vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha a megadott kulcs nem létezik."
  remarks: "The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The GetValue and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_14_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_14_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_14_1.cpp)]"
  syntax:
    content: public static object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: "A kulcs, egy érvényes beállításazonosító gyökér, például a &quot;HKEY_CURRENT_USER&quot; kezdetű teljes beállításjegyzékbeli elérési útja"
    - id: valueName
      type: System.String
      description: "A név-érték pár neve."
    - id: defaultValue
      type: System.Object
      description: "A visszatérési érték, ha `valueName` nem létezik."
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>Ha a kulcs által megadott <code> keyName </code> nem létezik; egyéb esetben a érték társított <code> valueName </code>, vagy <code> defaultValue </code> Ha <code> valueName </code> nem található."
  overload: Microsoft.Win32.Registry.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználó nem rendelkezik a beállításkulcs olvasásához szükséges engedélyekkel."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> , amely tartalmazza a megadott érték van jelölve törlésre."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>kezdete nem egy érvényes legfelső szintű."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A helyi gép konfigurációs adatait tartalmazza. Ez a mező a Windows alap beállításkulcs HKEY_LOCAL_MACHINE olvassa be."
  remarks: "`LocalMachine`öt kulcsok tartalmazza: hardver azt ismerteti, a számítógép fizikai hardver, módon eszközillesztőt használja, hogy hardver, és a leképezések és a kapcsolódó adatokat, amelyek a felhasználói módú kóddal kernel módú illesztőprogramjaival. Ezt a kulcsot az összes adat jön létre újra a rendszer minden egyes indításakor. A leírás az alkulcs a tényleges számítógép hardvere ismerteti. A DeviceMap alkulcs formátumokban illesztőprogramok adott osztályok vonatkozó különböző adatokat tartalmaz. A ResourceMap alkulcs írja le, mely eszközillesztőket jogcím mely hardver-erőforrások. A Windows NT diagnosztikát program (Winmsdp.exe) jelenthetik-e a tartalma egy könnyen olvasható formátumban.       SAM a directory services-adatbázis biztonsági adatait a felhasználói és csoportfiókokat, és a tartományok Windows 2000 Server (SAM a biztonsági fiókkezelő, a directory services adatbázis néven ismert).       Biztonsági tartalmazza a helyi biztonsági házirendet, például az adott felhasználói jogosultságokkal. Ezt a kulcsot csak a Windows 2000 biztonsági alrendszer használják.       A számítógépes szoftverek adatbázis szoftver. Ezt a kulcsot a helyi számítógépen, és az egyéb konfigurációs adatok különböző elemek telepített szoftverekkel kapcsolatos adatokat tartalmaz.       Vezérlők rendszer rendszerindítás, eszköz illesztőprogram betöltése, a Windows 2000 szolgáltatások és operációs rendszer viselkedését.       Konvenció, ha van hasonló adatok <xref:Microsoft.Win32.Registry.CurrentUser>a LocalMachine, az adatok <xref:Microsoft.Win32.Registry.CurrentUser>lép érvénybe.</xref:Microsoft.Win32.Registry.CurrentUser> </xref:Microsoft.Win32.Registry.CurrentUser> Azonban ez a kulcs értékeit is is kiterjesztése (helyett cserélje le) Registry.LocalMachine adatokat. Bizonyos elemek (például az eszközillesztő bejegyzések betöltése) is értelmetlen, ha azok Registry.LocalMachine kívül történik."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.LocalMachine Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_0_1.cs)]\n [!code-cpp[Classic Registry.LocalMachine Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_0_1.cpp)]\n [!code-vb[Classic Registry.LocalMachine Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_0_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Szoftver-összetevő teljesítményének információkat tartalmaz. Ez a mező a Windows alap beállításkulcs HKEY_PERFORMANCE_DATA olvassa be."
  remarks: "Minden egyes szoftverfrissítési összetevő az objektumokhoz, telepítésekor, és írja a teljesítményszámláló-adatokat, amikor azt számlálók kulcsokat hoz létre. Végezheti el az adatokat, akkor éri el egyéb beállításjegyzék adatokat, használja a <xref:Microsoft.Win32.RegistryKey>Funkciók.</xref:Microsoft.Win32.RegistryKey>       Noha a beállításjegyzék-teljesítményadatok összegyűjtése, a rendszerleíró adatbázis nem tárolja az adatokat. Ehelyett a beállításjegyzék elérése ezt a kulcsot az azt eredményezi, a rendszer az adatokat gyűjteni a megfelelő objektumot a rendszergazdának.       A helyi rendszer teljesítményadatokat beszerzéséhez használja a <xref:Microsoft.Win32.RegistryKey.GetValue%2A>metódus Registry.PerformanceData kulccsal.</xref:Microsoft.Win32.RegistryKey.GetValue%2A> Az első hívás megnyitja a kulcsot (nem kell explicit módon megnyitásához először a kulcsot). Azonban ügyeljen arra, hogy használja a <xref:Microsoft.Win32.RegistryKey.Close%2A>metódus a kulcs leírójának bezárásához, amikor elkészült, teljesítményadatokat megszerezni.</xref:Microsoft.Win32.RegistryKey.Close%2A> A felhasználó nem telepíthet, és távolítsa el a szoftverfrissítési összetevő, miközben használatban van a teljesítményadatokat.       Egy távoli rendszerből teljesítményadatokat beszerzéséhez használja a <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A>metódust használ, a számítógép nevét a távoli rendszer és a Registry.PerformanceData kulcs.</xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> Ez a hívás lekéri a teljesítményadatokat a távoli rendszer képviselő kulcs. Az adatok lekéréséhez hívás <xref:Microsoft.Win32.RegistryKey.GetValue%2A>ezt a kulcsot, nem pedig a Registry.PerformanceData kulcs használatával.</xref:Microsoft.Win32.RegistryKey.GetValue%2A>      > [!NOTE] > A Windows Server 2003, a felhasználó legalább csoportba kell tartoznia a Teljesítményfigyelő felhasználók ennek a kulcsnak base alkulcsok eléréséhez."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \n  \n [!code-cs[Classic Registry.PerformanceData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_2_1.cs)]\n [!code-cpp[Classic Registry.PerformanceData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_2_1.cpp)]\n [!code-vb[Classic Registry.PerformanceData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_2_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A megadott név-érték pár beállítása a megadott beállításkulcsot. Ha a megadott kulcs nem létezik, akkor jön létre."
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_8_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_8_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_8_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: "A kulcs, egy érvényes beállításazonosító gyökér, például a &quot;HKEY_CURRENT_USER&quot; kezdetű teljes beállításjegyzékbeli elérési útja"
    - id: valueName
      type: System.String
      description: "A név-érték pár neve."
    - id: value
      type: System.Object
      description: "Az érték történő tárolását."
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>kezdete nem egy érvényes legfelső szintű.       – vagy – <code>keyName</code> hosszabb, mint az engedélyezett maximális hosszt (255 karakter)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> csak olvasható, és így nem lehet írni a, például a gyökér szintű csomópont."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználó nem rendelkezik a beállításkulcsok módosításához szükséges engedéllyel."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "A név-érték pár beállítása a megadott beállításkulcsban, a megadott beállításjegyzék adattípust. Ha a megadott kulcs nem létezik, akkor jön létre."
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/7747259a-b475-4eec-8a66-_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/7747259a-b475-4eec-8a66-_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/7747259a-b475-4eec-8a66-_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: "A kulcs, egy érvényes beállításazonosító gyökér, például a &quot;HKEY_CURRENT_USER&quot; kezdetű teljes beállításjegyzékbeli elérési útja"
    - id: valueName
      type: System.String
      description: "A név-érték pár neve."
    - id: value
      type: System.Object
      description: "Az érték történő tárolását."
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "A beállításjegyzék-adatok írja be az adatok tárolására."
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>kezdete nem egy érvényes legfelső szintű.       – vagy – <code>keyName</code> hosszabb, mint az engedélyezett maximális hosszt (255 karakter).       – vagy – a típusú <code>value</code> nem egyezik a beállításjegyzék által megadott adattípus <code>valueKind</code>, ezért az adatok nem konvertálható megfelelően."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> csak olvasható, és így nem lehet írni a, például a gyökér szintű csomópont, vagy a kulcs nem írási hozzáféréssel lett megnyitva."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A felhasználó nem rendelkezik a beállításkulcsok módosításához szükséges engedéllyel."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Az alapértelmezett felhasználói konfigurációs információkat tartalmaz. Ez a mező a Windows alap beállításkulcs HKEY_USERS olvassa be."
  remarks: "Ezt a kulcsot tartalmaz egy ágat a számítógép minden felhasználója számára. Az alapértelmezett konfiguráció van megadva az új felhasználók a helyi számítógépen és az alapértelmezett aktuális felhasználó számára, ha a felhasználó nem változott meg a beállításokat. Mivel a Windows 98 / ME Registry.Users is támogatja, az alkalmazások férhetnek hozzá a felhasználó-specifikus adatait a Windows 2000 tehetik ugyanúgy. Minden felhasználói információ külön fájlt, amely helyileg vagy a kiszolgálók tárolható tárolódik. Windows 98 / ME is másolja ezt a fájlt az aktuális számítógépet, hogy beállítások áthelyezheti az egyik számítógépről a másikra a felhasználóval."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_5_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_5_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_5_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey Users;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: Microsoft.Win32.Registry.ClassesRoot
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.Win32.Registry.CurrentConfig
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
- uid: Microsoft.Win32.Registry.DynData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Win32.Registry.LocalMachine
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.Registry.Users
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
- uid: Microsoft.Win32.Registry.GetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue
  nameWithType: Registry.GetValue
- uid: Microsoft.Win32.Registry.SetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue
  nameWithType: Registry.SetValue
