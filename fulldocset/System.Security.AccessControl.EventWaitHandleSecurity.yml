### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  id: EventWaitHandleSecurity
  children:
  - System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  langs:
  - csharp
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
  type: Class
  summary: "A Windows hozzáférés-vezérléssel egy elnevezett rendszer várakozási leíró alkalmazott jelöli. Ez az osztály nem örökölhető."
  remarks: "EventWaitHandleSecurity objektum adja meg egy nevesített rendszer várakozási leíró hozzáférési jogait, és a hozzáférések naplóz módját is megadja. Hozzáférési jogosultsága ahhoz, hogy a várakozási leíró egész szabályokat, minden hozzáférési szabály által képviselt egy <xref:System.Security.AccessControl.EventWaitHandleAccessRule>objektum.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> Minden egyes naplózási szabály által képviselt egy <xref:System.Security.AccessControl.EventWaitHandleAuditRule>objektum.</xref:System.Security.AccessControl.EventWaitHandleAuditRule>       Ez tükrözi, a Windows biztonsági rendszer, amelyben minden biztonságos objektumot rendelkezik legfeljebb egy tulajdonosi hozzáférés szabályozási listához (DACL), hogy szabályozza a hozzáférést a védett objektum, és legfeljebb egy rendszer hozzáférés-vezérlési lista (Rendszerszintű) határozza meg, melyik hozzáférések naplóz. A hozzáférés-vezérlési lista és a Rendszerszintű hozzáférés-vezérlő bejegyzések (ACE) által megadott hozzáférési és naplózási felhasználók és csoportok listájának vannak rendezve. Egy <xref:System.Security.AccessControl.EventWaitHandleAccessRule>vagy <xref:System.Security.AccessControl.EventWaitHandleAuditRule>objektum egynél több hozzáférés-vezérlő bejegyzések jelenthet.</xref:System.Security.AccessControl.EventWaitHandleAuditRule> </xref:System.Security.AccessControl.EventWaitHandleAccessRule>      > [!NOTE] > Egy <xref:System.Threading.EventWaitHandle>objektum jelenthet egy helyi várakozási leíró, vagy egy nevesített rendszer várakozási leíró.</xref:System.Threading.EventWaitHandle> A Windows hozzáférés-vezérléssel értéke csak a megnevezett várakozási kezeli értelmezhető.       A EventWaitHandleSecurity <xref:System.Security.AccessControl.EventWaitHandleAccessRule>, és <xref:System.Security.AccessControl.EventWaitHandleAuditRule>osztályok megvalósítása részletes ACL-EK és ACE-k elrejtése.</xref:System.Security.AccessControl.EventWaitHandleAuditRule> </xref:System.Security.AccessControl.EventWaitHandleAccessRule> Ezek lehetővé teszik, hogy hagyja figyelmen kívül a tizenhét különböző hozzáférés-vezérlő bejegyzések és öröklési és terjesztése a hozzáférési jogok megfelelően fenntartásának összetettségét. Ezek az objektumok is készültek, a következő gyakori ellenőrzési hibák megelőzése érdekében:-hoz létre biztonsági leíró null hozzáférés-vezérlési lista. Egy null hivatkozás egy hozzáférés-vezérlési lista lehetővé teszi, hogy a felhasználók hozzáférési szabályok felvétele objektumra, a-szolgáltatásmegtagadásos támadás potenciálisan létrehozása. Új EventWaitHandleSecurity objektum mindig egy üres hozzáférés-vezérlési lista, amely megtagadja az összes felhasználó hozzáférésének kezdődik.      -A szabályt sértő ACE kanonikus sorrendje. Ha a hozzáférés-vezérlő bejegyzések listáján, a hozzáférés-vezérlési lista nem kanonikus sorrendje maradjanak, felhasználók előfordulhat, hogy véletlenül hozzáférést kell biztosítani a biztonságos objektum. Például letiltott hozzáférési jogok mindig előtt kell szerepelnie engedélyezett hozzáférési jogosultsága. EventWaitHandleSecurity objektumok belsőleg karbantartása a megfelelő sorrendben.      -Kezelésére szolgáló biztonsági leíró jelzőket, amelyek csak a resource manager ellenőrzése alatt kell lennie.      -Létrehozása a hozzáférés-vezérlő bejegyzések jelzők kombinációja érvénytelen.      -Az örökölt hozzáférés kezelésére. Öröklési és terjesztése az erőforrás-kezelő, hozzáférési és naplózási szabályok módosításai válaszként kezeli.      -A hozzáférés-vezérlési listák értelmetlen ACE-k beszúrása.       A nem támogatja a .NET biztonsági objektumok csak lehetőségek érhetők el kell kerülni az alkalmazásfejlesztők, például a következő többségével veszélyes tevékenységek:-általában az erőforrás-kezelő által elvégzett alacsony szintű feladatokat.      -Hozzáadása vagy eltávolítása a hozzáférés-vezérlő bejegyzéseket, amelyek nem tartanak kanonikus sorrendje módon.       A Windows hozzáférés-vezérléssel egy elnevezett várakozási leíró módosításához használja a <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metódus használatával kérje le a EventWaitHandleSecurity objektum.</xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> Módosítsa a biztonsági objektum hozzáadása és eltávolítása a szabályok, és használja a <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metódus újracsatolni azt.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > EventWaitHandleSecurity objektum módosításai nem befolyásolják a hozzáférési szintek az elnevezett várakozási leíró csak akkor hívható meg a <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>a módosított biztonsági objektum hozzárendelése a nevesített várakozási leíró metódus.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>       Hozzáférés-vezérléssel másolása egy várakozási leíró a másikra, használja a <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metódust az EventWaitHandleSecurity objektum képviselő az első várakozási leíró hozzáférési és naplózási szabályait, és használja a <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metódus, vagy kezelni EventWaitHandleSecurity objektum, ezeket a szabályokat rendelhet hozzá a második várakozási elfogadó konstruktorral.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       A biztonsági leíró definition language (SDDL) befektetést rendelkező felhasználók használhatják a <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>metódus egy elnevezett várakozási leíró vonatkozó hozzáférési szabályok beállítása és a <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>SDDL-formátumban a hozzáférési szabályok jelölő karakterlánccá beszerzéséhez.</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> Ez nem ajánlott új fejlesztésekhez."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an EventWaitHandleSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_14_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_14_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> osztály az alapértelmezett értékekkel."
  remarks: "Egy új <xref:System.Security.AccessControl.EventWaitHandleSecurity>objektum mindig egy üres tulajdonosi hozzáférés listához (DACL), amely megtagadja az összes felhasználó hozzáférésének kezdődik.</xref:System.Security.AccessControl.EventWaitHandleSecurity>"
  syntax:
    content: public EventWaitHandleSecurity ();
    parameters: []
  overload: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Ez az osztály nem támogatott Windows 98 vagy Windows Me."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "A számbavételi típus, amely lekérdezi a <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> használ hozzáférési jogok képviselő osztályt."
  remarks: "Osztályok, amelyek a a <xref:System.Security.AccessControl.ObjectSecurity>felülbírálás osztály a <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>tulajdonság és visszaállítja a hozzáférési jogok képviselő használata típusát.</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Tömbök vagy több biztonsági objektumtípusokat tartalmazó gyűjtemények használata, ez a tulajdonság segítségével határozza meg a megfelelő enumerálástípusra használata minden egyes biztonsági objektum."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>objektumot képviselő a <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> számbavételi.</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hoz létre egy új szabályhoz a megadott felhasználó a megadott hozzáférési jogosultságokat, a hozzáférés-vezérlés és a jelzők."
  remarks: "Hozzáférés-vezérlési szabályok létrehozása az ajánlott módszer használatához az <xref:System.Security.AccessControl.EventWaitHandleAccessRule>osztály</xref:System.Security.AccessControl.EventWaitHandleAccessRule> a konstruktorok      > [!NOTE] > Öröklési és propagálás jelző elnevezett események értelmetlenné válnak, bár továbbra is lehetőség adja meg azokat. Ez nem ajánlott, mert azt feleslegesen bonyolítja szabályok, a karbantartási például által zavarja a szabályok, amelyek egyébként kompatibilis kombinációja."
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Egy <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> , amely azonosítja a felhasználót vagy csoportot a szabály vonatkozik."
    - id: accessMask
      type: System.Int32
      description: "Tagértékeinek <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> értékek megadása vagy elutasításáról, hozzáférési jogosultságokat az egész számra konvertálni."
    - id: isInherited
      type: System.Boolean
      description: "Értelmetlen elnevezett Várjon, amíg a kezeli, mert az nincs hierarchia."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Értelmetlen elnevezett Várjon, amíg a kezeli, mert az nincs hierarchia."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Értelmetlen elnevezett Várjon, amíg a kezeli, mert az nincs hierarchia."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Egy a <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> megadása, hogy a jogok engedélyezett vagy megtagadott értékeket."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "Egy <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> a megadott felhasználó a megadott jogok képviselő objektum."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, vagy <code>type</code> érvénytelen értéket."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       – vagy – <code>accessMask</code> nulla."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>az egyik típus sem <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, és nem olyan típusú, mint <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> be, amely átalakítható <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "A típus, amely lekérdezi a <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> képviselő hozzáférési szabályok által használt osztály."
  remarks: "Osztályok, amelyek a a <xref:System.Security.AccessControl.ObjectSecurity>felülbírálás osztály a <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>tulajdonság és visszaállítja a hozzáférési szabályok ábrázolására használják típusát.</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Tömb, vagy több biztonsági objektumtípusokat tartalmazó gyűjtemények használata, a tulajdonság segítségével határozza meg a megfelelő hozzáférési szabály típust kíván használni a minden egyes biztonsági objektum."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>objektumot képviselő a <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> osztály</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "A megfelelő hozzáférés-vezérlési szabály, amelyhez az új szabály egyesíthető keres. Ha egyik sem található, az új szabály hozzáadása."
  remarks: "A AddAccessRule módszer megkeresi az ugyanazon felhasználó vagy csoport, és ugyanez rendelkező szabályok <xref:System.Security.AccessControl.AccessControlType>, `rule`.</xref:System.Security.AccessControl.AccessControlType> Ha nincs találhatók, `rule` jelenik meg. Ha egy megfelelő szabályt található, a jogok `rule` egyesítve lesznek az a meglévő szabályt."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/729692a8-5e98-486a-9864-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/729692a8-5e98-486a-9864-_1.vb)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "A hozzáférési szabályhoz hozzáadásához."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Egy naplózási szabály, amelyhez az új szabály egyesíthető keres. Ha egyik sem található, az új szabály hozzáadása."
  remarks: "A AddAuditRule módszer megkeresi az ugyanazon felhasználó vagy csoport rendelkező szabályok `rule`. Ha nincs találhatók, `rule` jelenik meg. Ha egy megfelelő szabályt található, a jelzők a `rule` egyesülnek a meglévő szabályt."
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "A naplózási szabály hozzáadásához. Ez a szabály a megadott felhasználó meghatározza, hogy a keresés."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Létrehoz egy új naplózási szabály, a felhasználó a szabály vonatkozik, a hozzáférési jogok naplózása és az eredménye, amely elindítja a naplózási szabály megadása."
  remarks: "Naplózási szabályok létrehozása az ajánlott módszer használatához az <xref:System.Security.AccessControl.EventWaitHandleAuditRule>osztály</xref:System.Security.AccessControl.EventWaitHandleAuditRule> a konstruktorok      > [!NOTE] > Öröklési és propagálás jelző elnevezett események értelmetlenné válnak, bár továbbra is lehetőség adja meg azokat. Ez nem ajánlott, mert azt feleslegesen bonyolítja szabályok, a karbantartási például által zavarja a szabályok, amelyek egyébként kompatibilis kombinációja."
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Egy <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> , amely azonosítja a felhasználót vagy csoportot a szabály vonatkozik."
    - id: accessMask
      type: System.Int32
      description: "Tagértékeinek <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> értékek megadását rendszervizsgálati, hozzáférési jogosultságokat az egész számra konvertálni."
    - id: isInherited
      type: System.Boolean
      description: "Értelmetlen elnevezett Várjon, amíg a kezeli, mert az nincs hierarchia."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Értelmetlen elnevezett Várjon, amíg a kezeli, mert az nincs hierarchia."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Értelmetlen elnevezett Várjon, amíg a kezeli, mert az nincs hierarchia."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "Tagértékeinek <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> értékek megadása kell-e hozzáférési sikeres, sikertelen vagy mindkettő naplózni."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "Egy <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> a megadott felhasználó a megadott naplózási szabály képviselő objektum. A metódus visszatérési típusa az alaposztály <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>, de az eredményül kapott értéket is konvertálható biztonságosan a származtatott osztály."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, vagy <code>flags</code> érvénytelen értéket."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       – vagy – <code>accessMask</code> nulla."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>az egyik típus sem <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, és nem olyan típusú, mint <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> be, amely átalakítható <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "A típus, amely lekérdezi a <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> képviselő naplózási szabályok által használt osztály."
  remarks: "Osztályok, amelyek a a <xref:System.Security.AccessControl.ObjectSecurity>felülbírálás osztály a <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>tulajdonság és visszaállítja a naplózási jogosultságok képviselő használata típusa.</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Tömb, vagy több biztonsági objektumtípusokat tartalmazó gyűjtemények használata, a tulajdonság segítségével határozza meg a megfelelő naplózási szabály típust kíván használni a minden egyes biztonsági objektum."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>objektumot képviselő a <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> osztály</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Keres egy hozzáférés-vezérlési szabály ugyanazt a felhasználói és <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (engedélyezése vagy megtagadása) a megadott hozzáférési szabály, és kompatibilis öröklési és propagálás jelzők; Ha egy ilyen szabályt, a jogosultságok, a megadott hozzáférési szabály törlődnek azt."
  remarks: "Az aktuális <xref:System.Security.AccessControl.EventWaitHandleSecurity>kell keresni egy szabályt, amely ugyanahhoz a felhasználóhoz, és ugyanez <xref:System.Security.AccessControl.AccessControlType>érték szerint `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.EventWaitHandleSecurity> Ha nincs ilyen szabály található, nem szükséges művelet, és a metódus visszaadja `false`. Ha a megfeleltetési szabályoknak talál, az öröklési és kompatibilitási jelző kompatibilitás érdekében szerepel a jelzők ellenőrzi `rule`. Ha nem kompatibilis a szabály található, nem szükséges művelet, és a metódus visszaadja `false`. Ha egy szabály a kompatibilis jelzőkkel található, a jogok megadott `rule` kompatibilis a szabály el lesznek távolítva, és a metódus visszaadja `true`. Ha `rule` megadja a jogok kompatibilis a szabály nem található, nem szükséges művelet tekintetében ezeket a jogokat. Minden jog el lesznek távolítva a kompatibilis szabály, ha a teljes szabály törlődik az aktuális <xref:System.Security.AccessControl.EventWaitHandleSecurity>objektum.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Bár létrehozásával, az öröklési és propagálás jelző esemény hozzáférési szabályait, megadhatja a <xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A>metódus, ez nem ajánlott.</xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A> Öröklési és propagálás nem jelentéssel rendelkezhetnek elnevezett eseményeket, és általuk végrehajtott hozzáférési szabályok karbantartására bonyolultabb."
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.EventWaitHandleRights>, <xref:System.Security.AccessControl.EventWaitHandleRights>, and <xref:System.Security.AccessControl.EventWaitHandleRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.EventWaitHandleRights> and <xref:System.Security.AccessControl.EventWaitHandleRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.EventWaitHandleRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The <xref:System.Security.AccessControl.EventWaitHandleRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/22dce09a-3e98-48e6-a61f-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/22dce09a-3e98-48e6-a61f-_1.vb)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Egy <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> , amely meghatározza, hogy a felhasználói és <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> keresse meg és öröklési és propagálás jelzőket, amelyek egy megfelelő szabályt, ha található, kompatibilisnek kell lennie. Megadja a kompatibilis szabály eltávolítása, ha a jogok található."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha egy kompatibilis szabály található; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Megkeresi az összes hozzáférést vezérlő szabályaival ugyanahhoz a felhasználóhoz és <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (engedélyezése vagy megtagadása) a megadott szabály és, ha található, távolítja el azokat."
  remarks: "Az aktuális <xref:System.Security.AccessControl.EventWaitHandleSecurity>kell keresni a szabályok, amelyek ugyanahhoz a felhasználóhoz, és ugyanez <xref:System.Security.AccessControl.AccessControlType>érték szerint `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.EventWaitHandleSecurity> Által megadott jogok `rule` a keresés végrehajtása során figyelmen kívül lesznek hagyva. Minden ilyen szabályt a rendszer törli. Ha nincsenek egyező szabályok találhatók, semmilyen művelet nem lesz végrehajtva."
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/a6ff73cc-4227-4079-abe7-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/a6ff73cc-4227-4079-abe7-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Egy <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> , amely meghatározza, hogy a felhasználói és <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> kereséséhez. Ez a szabály által megadott jogok figyelmen kívül lesznek hagyva."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Keres egy hozzáférés-vezérlési szabály, amely pontosan megegyezik a megadott szabály és, ha található, eltávolítja azt."
  remarks: "A szabály csak akkor, ha pontosan megegyezik eltávolítják `rule` összes részleteit, beleértve a jelzők. Adott felhasználó más szabályaival és <xref:System.Security.AccessControl.AccessControlType>, nem érintettek.</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > Szabály egy vagy több alapul szolgáló hozzáférés-vezérlő bejegyzések (ACE) jelöli, és ezek a bejegyzések felosztásához vagy kombinált szükség szerint, amikor egy felhasználó a hozzáférési szabályok módosítása. Emiatt a szabály már nem létező előfordulhat, hogy az adott űrlap, amikor vették fel kellett, és ebben az esetben a RemoveAccessRuleSpecific metódus nem távolítható el."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/4b0413fe-85b1-4175-8dfd-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/4b0413fe-85b1-4175-8dfd-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> eltávolítása."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Egy naplózási szabály ugyanaz a felhasználó a megadott szabály, és kompatibilis öröklési és propagálás jelzők; keres egy kompatibilis szabály található, a jogosultságok, a megadott szabály eltávolítja belőle."
  remarks: "Az aktuális <xref:System.Security.AccessControl.EventWaitHandleSecurity>egy naplózási szabály, amely rendelkezik a felhasználónak kell keresni `rule`.</xref:System.Security.AccessControl.EventWaitHandleSecurity> Ha nincs ilyen szabály található, nem szükséges művelet, és a metódus visszaadja `false`. Ha a megfeleltetési szabályoknak talál, az öröklési és kompatibilitási jelző kompatibilitás érdekében szerepel a jelzők ellenőrzi `rule`. Ha nem kompatibilis a szabály található, nem szükséges művelet, és a metódus visszaadja `false`. Ha egy szabály a kompatibilis jelzőkkel található, a jogok megadott `rule` kompatibilis a szabály el lesznek távolítva, és a metódus visszaadja `true`. Ha `rule` megadja a jogok kompatibilis a szabály nem található, nem szükséges művelet tekintetében ezeket a jogokat. Minden jog el lesznek távolítva a kompatibilis szabály, ha a teljes szabály törlődik az aktuális <xref:System.Security.AccessControl.EventWaitHandleSecurity>objektum.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Bár létrehozásával, az öröklési és propagálás jelző esemény ellenőrzési szabályok, megadhatja a <xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A>metódus, ez nem ajánlott.</xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A> Öröklési és propagálás nem jelentéssel rendelkezhetnek elnevezett eseményeket, és általuk végrehajtott ellenőrzési szabályok karbantartására bonyolultabb."
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Egy <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> , amely megadja a felhasználót, hogy keresse meg és öröklési és propagálás jelzőket, amelyek egy megfelelő szabályt, ha található, kompatibilisnek kell lennie. Megadja a kompatibilis szabály eltávolítása, ha a jogok található."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha egy kompatibilis szabály található; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Összes naplózási ugyanaz a felhasználó a megadott szabály szabályokat, és ha találhatók, eltávolítja azokat."
  remarks: "Az aktuális <xref:System.Security.AccessControl.EventWaitHandleSecurity>ellenőrzési szabályok, amelyek a felhasználónak kell keresni `rule`.</xref:System.Security.AccessControl.EventWaitHandleSecurity> Által megadott jogok `rule` a keresés végrehajtása során figyelmen kívül lesznek hagyva. Minden ilyen szabályt a rendszer törli. Ha nincsenek egyező szabályok találhatók, semmilyen művelet nem lesz végrehajtva."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Egy <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> , amely megadja, hogy a felhasználó kereséséhez. Ez a szabály által megadott jogok figyelmen kívül lesznek hagyva."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Egy naplózási szabály, amely pontosan megegyezik a megadott keres szabály és, ha található, eltávolítja azt."
  remarks: "A szabály csak akkor, ha pontosan megegyezik eltávolítják `rule` összes részleteit, beleértve a jelzők. A felhasználónak más naplózási szabály nem lesz hatással.      > [!IMPORTANT] > Szabály egy vagy több alapul szolgáló hozzáférés-vezérlő bejegyzések (ACE) jelöli, és ezek a bejegyzések vágási vagy kombinált szükség szerint, amikor módosítja egy felhasználó naplózási biztonsági szabályait. Emiatt a szabály már nem létező előfordulhat, hogy az adott űrlap, amikor vették fel kellett, és ebben az esetben a RemoveAuditRuleSpecific metódus nem távolítható el."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> eltávolítása."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Eltávolítja a hozzáférés-vezérlési szabályokkal rendelkező ugyanaz a felhasználó a megadott szabály, függetlenül attól, <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>, és hozzáadja a megadott szabály."
  remarks: "Ha nincsenek hozzáférési szabályok, amelynek felhasználói megegyezik a megadott szabály `rule` jelenik meg."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/831b1f62-72fc-4f57-bcc7-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/831b1f62-72fc-4f57-bcc7-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. Ez a szabály a megadott felhasználó meghatározza, hogy ez a szabály hozzáadása előtt eltávolítja a szabályokat."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Eltávolítja a hozzáférés-vezérlési szabályok azonos felhasználói és <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (engedélyezése vagy megtagadása) a megadott szabály, és hozzáadja a megadott szabály."
  remarks: "Ha a megadott szabály <xref:System.Security.AccessControl.AccessControlType>, annak hatását, hogy ez a módszer az, hogy távolítsa el az összes <xref:System.Security.AccessControl.AccessControlType>szabályok a megadott felhasználó, a megadott szabály lecserélése.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> Ha a megadott szabály <xref:System.Security.AccessControl.AccessControlType>, minden <xref:System.Security.AccessControl.AccessControlType>szabályok a megadott felhasználó a megadott szabály cserélése.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       Ha nincsenek szabályok felhasználót és <xref:System.Security.AccessControl.AccessControlType>felel meg a megadott szabály `rule` kerül.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing <xref:System.Security.AccessControl.AccessControlType> rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/2e843fc0-0bf3-426e-ae6b-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/csharp/2e843fc0-0bf3-426e-ae6b-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. A felhasználói és <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> Ez a szabály a meghatározását, hogy ez a szabály hozzáadása előtt eltávolítja a szabályokat."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Összes naplózási szabályokat ugyanaz a felhasználó a megadott szabály, függetlenül attól, hogy eltávolítja a <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> értékét, és hozzáadja a megadott szabály."
  remarks: "Ha nincs naplózási szabály, amelynek felhasználói megegyezik a megadott szabály `rule` jelenik meg."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;></xref> to add. Ez a szabály a megadott felhasználó meghatározza, hogy ez a szabály hozzáadása előtt eltávolítja a szabályokat."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAuditRule
  nameWithType: EventWaitHandleAuditRule
  fullName: System.Security.AccessControl.EventWaitHandleAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: EventWaitHandleSecurity.AddAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: EventWaitHandleSecurity.AddAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: EventWaitHandleSecurity.ResetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: EventWaitHandleSecurity.SetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: EventWaitHandleSecurity.SetAuditRule
