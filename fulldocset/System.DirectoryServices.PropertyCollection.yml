### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.PropertyCollection
  id: PropertyCollection
  children:
  - System.DirectoryServices.PropertyCollection.Contains(System.String)
  - System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  - System.DirectoryServices.PropertyCollection.Count
  - System.DirectoryServices.PropertyCollection.GetEnumerator
  - System.DirectoryServices.PropertyCollection.Item(System.String)
  - System.DirectoryServices.PropertyCollection.PropertyNames
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  - System.DirectoryServices.PropertyCollection.Values
  langs:
  - csharp
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
  type: Class
  summary: "A PropertyCollection osztály tulajdonságait tartalmazza egy <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  syntax:
    content: 'public class PropertyCollection : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Meghatározza, hogy a megadott tulajdonság ebben a gyűjteményben."
  syntax:
    content: public bool Contains (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "A tulajdonság található neve."
    return:
      type: System.Boolean
      description: "A visszatérési érték <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> , ha a megadott tulajdonság tartozik ehhez a gyűjteményhez; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.PropertyCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  id: CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Másolja át az összes objektumot át tömbbé, a cél tömb a megadott indextől kezdődő ebben a gyűjteményben."
  syntax:
    content: public void CopyTo (System.DirectoryServices.PropertyValueCollection[] array, int index);
    parameters:
    - id: array
      type: System.DirectoryServices.PropertyValueCollection[]
      description: "A tömb <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;> </xref> , amely megkapja a gyűjtemény elemeinek objektumok."
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét `array` Ha ez a módszer indítja el, másolja az ehhez a gyűjteményhez."
  overload: System.DirectoryServices.PropertyCollection.CopyTo*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Hiba történt az alapul szolgáló felület hívása során."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Count
  id: Count
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi a tulajdonságok száma ebben a gyűjteményben."
  remarks: "Az Internet Information Services (IIS), és a Windows NT-szolgáltatók jelenleg nem támogatja a száma, így egyes kivételhibát <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "A gyűjtemény tulajdonságok száma."
  overload: System.DirectoryServices.PropertyCollection.Count*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Hiba történt az alapul szolgáló felület hívása során."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A könyvtár nem tud jelenteni a tulajdonságok száma."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A gyűjtemény iterációt használó számbavevő adja vissza."
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Egy <xref:System.Collections.IDictionaryEnumerator>, amelyek segítségével a gyűjtemény iterációt.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.DirectoryServices.PropertyCollection.GetEnumerator*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Hiba történt az alapul szolgáló felület hívása során."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  id: Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi a megadott tulajdonságot."
  remarks: "A C# Ez a tulajdonság akkor az <xref:System.DirectoryServices.PropertyCollection>osztály</xref:System.DirectoryServices.PropertyCollection> az indexelő       A JScript a típus által definiált indexelt alapértelmezett tulajdonságok használhatók, de meg explicit módon sajátokat nem határozhat meg. Azonban az expando attribútumot az osztály automatikusan tartalmaz egy alapértelmezett megadó indexelt egy objektum típusa és az index <xref:System.String>.</xref:System.String> tulajdonság"
  syntax:
    content: public System.DirectoryServices.PropertyValueCollection this[string propertyName] { get; }
    parameters:
    - id: propertyName
      type: System.String
      description: "A lekérdezni a tulajdonság nevét."
    return:
      type: System.DirectoryServices.PropertyValueCollection
      description: "A megadott tulajdonság értéke."
  overload: System.DirectoryServices.PropertyCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  id: PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi a tulajdonságok nevét ebben a gyűjteményben."
  remarks: "Tagok PropertyNames tulajdonság elérésekor a <xref:System.Runtime.InteropServices.COMException>az alapul szolgáló felület használata közben hiba miatt előfordulhat, hogy jelezni.</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection PropertyNames { get; }
    return:
      type: System.Collections.ICollection
      description: "Egy <xref:System.Collections.ICollection>objektum, amely tartalmazza az ebben a gyűjteményben tulajdonságainak nevével.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.PropertyNames*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Másolja át a elemei a <xref:System.Collections.ICollection>való egy <xref:System.Array>, egy adott induló <xref:System.Array>index.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>Ez a cél <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> átmásolva elem</xref:System.Array> egydimenziós A <xref:System.Array>kell rendelkeznie a nulla alapú indexelést.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét `array` mely másolása megkezdődik."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>többdimenziós.       – vagy – a forrás elemeinek száma <xref:System.Collections.ICollection> nagyobb, mint a rendelkezésre álló terület <code>index</code> a cél végére <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref:System.Collections.ICollection>nem konvertálható automatikusan a cél típusa <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Egy érték, amely jelzi, hogy hozzáférést lekérdezi a <xref:System.Collections.ICollection>van (a többszálú futtatásra) szinkronizált.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Visszaadja egy objektum, amely segítségével a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> való hozzáférés szinkronizálása</xref:System.Collections.ICollection.SyncRoot%2A>       A legtöbb gyűjtemény osztályoknak a <xref:System.Collections?displayProperty=fullName>névteret is megvalósíthatja egy Synchronized metódus, amely biztosítja az alapul szolgáló gyűjtemény szinkronizált csomagolásának.</xref:System.Collections?displayProperty=fullName>       Egy gyűjtemény számbavétele nincs belsőleg egy szál biztonságos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Garantálja a szál biztonsági számbavétel során, a gyűjteményt, a teljes felsorolásakor zárolása, vagy más szálak által végrehajtott módosítások a kivételeket.       [A Visual Basic, a C#]       A következő példa bemutatja, hogyan a gyűjteményhez történő zárolja a <xref:System.Collections.ICollection.SyncRoot%2A>a teljes enumerálása során: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a hozzáférést a <xref:System.Collections.ICollection>van (a többszálú futtatásra) szinkronizált; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi egy objektumot, amely segítségével a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> való hozzáférés szinkronizálása"
  remarks: "Gyűjtemények, amelynek a mögöttes tároló nincs nyilvánosan elérhető a várt végrehajtására, hogy az aktuális példány visszaadása. Vegye figyelembe, hogy az aktuális példány a mutató előfordulhat, hogy nem elegendő a gyűjteményeket, amelyek más gyűjtemények; burkolása azok az alapul szolgáló gyűjtemény SyncRoot tulajdonság kell visszaadnia.       A legtöbb gyűjtemény osztályoknak a <xref:System.Collections?displayProperty=fullName>névteret is megvalósíthatja egy Synchronized metódus, amely biztosítja az alapul szolgáló gyűjtemény szinkronizált csomagolásának.</xref:System.Collections?displayProperty=fullName> Hogy a származtatott osztályok azonban adja meg a gyűjtemény használja saját szinkronizált verzióját a <xref:System.Collections.ICollection.SyncRoot%2A>tulajdonság.</xref:System.Collections.ICollection.SyncRoot%2A> A szinkronizálási kódot kell műveleteket végezhet a <xref:System.Collections.ICollection.SyncRoot%2A>a gyűjtemény, nem közvetlenül a gyűjteményben.</xref:System.Collections.ICollection.SyncRoot%2A> Ez biztosítja, hogy a gyűjtemények más objektumok származó megfelelő működését. Pontosabban más szállal, amely előfordulhat, hogy egyidejűleg módosítja a gyűjteménypéldány megfelelő szinkronizálási tart fenn.       Egy gyűjtemény, a várható használat Synchronized metódusa hiányában <xref:System.Collections.ICollection.SyncRoot%2A>dolgozunk: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` keresztül egy gyűjtemény enumerálását hajtja alapvetően nem egy szál biztonságos folyamat során a rendszer.      </xref:System.Collections.ICollection.SyncRoot%2A> Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket.       [A Visual Basic, a C#]       Az alábbi példakód bemutatja, hogyan a gyűjteményhez történő zárolja a <xref:System.Collections.ICollection.SyncRoot%2A>a teljes enumerálása során: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Olyan objektum, amely segítségével a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> való hozzáférés szinkronizálása"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A megadott kulcs és az érték egy elem hozzáadása a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary>"
  remarks: "Használhatja a <xref:System.Collections.IDictionary.Item%2A>úgy, hogy a kulcs értékét, amely új elemek hozzáadásához tulajdonság nem létezik a szótárban (például `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.IDictionary.Item%2A> Azonban ha a megadott kulcs már létezik a szótárban, beállítása a <xref:System.Collections.IDictionary.Item%2A>tulajdonság felülírja a régi értéket.</xref:System.Collections.IDictionary.Item%2A> Ezzel szemben a <xref:System.Collections.IDictionary.Add%2A>metódus nem módosítja a meglévő elemeket.</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#9](~/add/codesnippet/cpp/1a38ef09-e972-4d5a-adef-_1.cpp)]\n [!code-cs[Dictionary#9](~/add/codesnippet/csharp/1a38ef09-e972-4d5a-adef-_1.cs)]\n [!code-vb[Dictionary#9](~/add/codesnippet/visualbasic/1a38ef09-e972-4d5a-adef-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "A <xref:System.Object>másik az elem kulcsaként használatára</xref:System.Object>"
    - id: value
      type: System.Object
      description: "A <xref:System.Object>hozzáadandó elem értéke legyen</xref:System.Object>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Már létezik ilyen kulccsal rendelkező elemet a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref:System.Collections.IDictionary>csak olvasható.</xref:System.Collections.IDictionary>       – vagy – a <xref:System.Collections.IDictionary>mérete4 rögzített.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  id: System#Collections#IDictionary#Clear
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Eltávolítja az összes elem a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#8](~/add/codesnippet/cpp/473cc76e-c5f1-4b76-bd2d-_1.cpp)]\n [!code-cs[Dictionary#8](~/add/codesnippet/csharp/473cc76e-c5f1-4b76-bd2d-_1.cs)]\n [!code-vb[Dictionary#8](~/add/codesnippet/visualbasic/473cc76e-c5f1-4b76-bd2d-_1.vb)]"
  syntax:
    content: void IDictionary.Clear ();
    parameters: []
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref:System.Collections.IDictionary>objektum csak olvasható.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Meghatározza, hogy a <xref:System.Collections.IDictionary>objektum a megadott kulccsal rendelkező elemet tartalmaz.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#5](~/add/codesnippet/cpp/37011492-a9b1-4bd3-bee4-_1.cpp)]\n [!code-cs[Dictionary#5](~/add/codesnippet/csharp/37011492-a9b1-4bd3-bee4-_1.cs)]\n [!code-vb[Dictionary#5](~/add/codesnippet/visualbasic/37011492-a9b1-4bd3-bee4-_1.vb)]"
  syntax:
    content: bool IDictionary.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A kulcsot, keresse meg a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Collections.IDictionary>elemet tartalmaz, a kulccsal; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref:System.Collections.IDictionary>objektumnak egy rögzített méretű.</xref:System.Collections.IDictionary>"
  remarks: "Rögzített méretű gyűjtemény nem teszi lehetővé hozzáadását és eltávolítását, az elem után a gyűjtemény létrejött, de lehetővé teszi, hogy a meglévő elemeket módosítása.       A gyűjtemény rögzített méretű egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a hozzáadása és eltávolítása elemek; Ezért ha módosítás történik az alapul szolgáló gyűjtemény, hozzáadását és eltávolítását, az elem, beleértve a rögzített méretű gyűjtemény tükrözi ezeket a módosításokat."
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#6](~/add/codesnippet/cpp/9254691a-4dee-480c-bf03-_1.cpp)]\n [!code-cs[Dictionary#6](~/add/codesnippet/csharp/9254691a-4dee-480c-bf03-_1.cs)]\n [!code-vb[Dictionary#6](~/add/codesnippet/visualbasic/9254691a-4dee-480c-bf03-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Collections.IDictionary>objektum rendelkezik egy rögzített méretű; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref:System.Collections.IDictionary>objektum csak olvasható.</xref:System.Collections.IDictionary>"
  remarks: "A csak olvasható gyűjtemény nem teszi lehetővé a hozzáadása, eltávolítása vagy módosítása az elem a gyűjtemény létrehozása után."
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#4](~/add/codesnippet/cpp/758e339d-f700-4387-ac5f-_1.cpp)]\n [!code-cs[Dictionary#4](~/add/codesnippet/csharp/758e339d-f700-4387-ac5f-_1.cs)]\n [!code-vb[Dictionary#4](~/add/codesnippet/visualbasic/758e339d-f700-4387-ac5f-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Collections.IDictionary>objektum csak olvasható; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi vagy beállítja az elem a megadott kulccsal."
  remarks: "Ez a tulajdonság lehetővé teszi a hozzáférést egy adott elem a gyűjteményben a következő szintaxissal: `myCollection[key]`.       Használhatja a <xref:System.Collections.IDictionary.Item%2A>úgy, hogy a kulcs értékét, amely új elemek hozzáadásához tulajdonság nem létezik a szótárban (például `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.IDictionary.Item%2A> Azonban ha a megadott kulcs már létezik a szótárban, beállítása a <xref:System.Collections.IDictionary.Item%2A>tulajdonság felülírja a régi értéket.</xref:System.Collections.IDictionary.Item%2A> Ezzel szemben a <xref:System.Collections.IDictionary.Add%2A>metódus nem módosítja a meglévő elemeket.</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#13](~/add/codesnippet/cpp/f4830ad8-862c-4ae4-a8e0-_1.cpp)]\n [!code-cs[Dictionary#13](~/add/codesnippet/csharp/f4830ad8-862c-4ae4-a8e0-_1.cs)]\n [!code-vb[Dictionary#13](~/add/codesnippet/visualbasic/f4830ad8-862c-4ae4-a8e0-_1.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "A kulcs lekérése vagy beállítása az elemhez."
    return:
      type: System.Object
      description: "Az elem a megadott kulccsal."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A tulajdonság értéke és az <xref:System.Collections.IDictionary>objektum csak olvasható.</xref:System.Collections.IDictionary>       – vagy – a tulajdonság értéke, <code> key </code> nem létezik a gyűjteményben, és a <xref:System.Collections.IDictionary>mérete4 rögzített.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi egy <xref:System.Collections.ICollection>objektumra, amely a kulcsait a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  remarks: "A visszaadott a kulcsok sorrendje <xref:System.Collections.ICollection>objektum nincs megadva, de a megfelelő értékeiként ugyanabban a sorrendben garantáltan a <xref:System.Collections.ICollection>által visszaadott a <xref:System.Collections.IDictionary.Values%2A>tulajdonság.</xref:System.Collections.IDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#10](~/add/codesnippet/cpp/66b18c51-f730-4ac9-89c7-_1.cpp)]\n [!code-cs[Dictionary#10](~/add/codesnippet/csharp/66b18c51-f730-4ac9-89c7-_1.cs)]\n [!code-vb[Dictionary#10](~/add/codesnippet/visualbasic/66b18c51-f730-4ac9-89c7-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Egy <xref:System.Collections.ICollection>objektumra, amely a kulcsait a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Az elem eltávolítása a megadott kulccsal a <xref:System.Collections.IDictionary>objektum.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#7](~/add/codesnippet/cpp/0e5c3e14-6952-45d5-9f38-_1.cpp)]\n [!code-cs[Dictionary#7](~/add/codesnippet/csharp/0e5c3e14-6952-45d5-9f38-_1.cs)]\n [!code-vb[Dictionary#7](~/add/codesnippet/visualbasic/0e5c3e14-6952-45d5-9f38-_1.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Az eltávolítandó elem kulcsa."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref:System.Collections.IDictionary>objektum csak olvasható.</xref:System.Collections.IDictionary>       – vagy – a <xref:System.Collections.IDictionary>mérete4 rögzített.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Értéket ad vissza egy <xref:System.Collections.IEnumerable>objektum.</xref:System.Collections.IEnumerable>"
  remarks: "[A Visual Basic, a C#]       A `foreach` utasítás a C# nyelv (`for each` a Visual Basic nyelvben) elrejti a enumerálók összetettsége.  Ezért használatával `foreach` helyett az adatbázis közvetlen módosítása az enumerátor ajánlott.       Enumerálók beolvasni az adatokat a gyűjtemény használható, de nem használható az alapul szolgáló gyűjtemény módosításához.       Kezdetben a számbavevő a gyűjtemény első eleme elé. <xref:System.Collections.IEnumerator.Reset%2A>is jelent a számbavevő vissza az ebben a helyzetben.</xref:System.Collections.IEnumerator.Reset%2A>  Ezen a helyen a <xref:System.Collections.IEnumerator.Current%2A>tulajdonság nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> Ezért meg kell hívnia <xref:System.Collections.IEnumerator.MoveNext%2A>ahhoz, hogy a számbavevő a <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> értékének olvasása előtt a gyűjtemény első eleme</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>az azonos objektumot ad vissza, amíg újra nem indítják <xref:System.Collections.IEnumerator.MoveNext%2A>vagy <xref:System.Collections.IEnumerator.Reset%2A>nevezik.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Beállítja a <xref:System.Collections.IEnumerator.Current%2A>átállítása.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Ha <xref:System.Collections.IEnumerator.MoveNext%2A>gyűjteményének, a számbavevő a gyűjtemény utolsó eleme mögé van elhelyezve fázisok és <xref:System.Collections.IEnumerator.MoveNext%2A>adja vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> A számbavevő ezen a helyen, az ezt követő hívások esetén <xref:System.Collections.IEnumerator.MoveNext%2A>is vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Ha az utolsó irányuló hívás <xref:System.Collections.IEnumerator.MoveNext%2A>visszaadott `false`, <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>Ebben az esetben a gyűjtemény első eleme a hívása <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> követ</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> beállítása       Enumerátor érvényes marad mindaddig, amíg a gyűjtemény változatlan marad. Ha módosítják a gyűjteményhez, hozzáadása, módosítása vagy törlése elemek, például a számbavevő visszavonhatatlanul érvénytelenített és annak viselkedését nincs definiálva.       A számbavevő nem rendelkezik kizárólagos hozzáférése a gyűjteményhez; egy gyűjtemény számbavétele ezért alapvetően nem szálbiztos eljárást.  Szál biztonsági felsorolásakor biztosításához zárolhatja a teljes számbavételi művelet során a gyűjteményben.  A gyűjteményt, amelyben több szál olvasására vagy írására érhető el, hogy meg kell valósítani a saját szinkronizálási."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Egy <xref:System.Collections.IEnumerable>.object.</xref:System.Collections.IEnumerable>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Values
  id: Values
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi a tulajdonságok értékei ebben a gyűjteményben."
  remarks: "A Values tulajdonság tagjai elérésekor a <xref:System.Runtime.InteropServices.COMException>kivétel előfordulhat, hogy fel hiba történt az alapul szolgáló felület használata közben.</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Egy <xref:System.Collections.ICollection>, amely tartalmazza a tulajdonságok a gyűjtemény értékei.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
- uid: System.DirectoryServices.PropertyValueCollection[]
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection[]
  spec.csharp:
  - uid: System.DirectoryServices.PropertyValueCollection
    name: PropertyValueCollection
    nameWithType: PropertyValueCollection
    fullName: PropertyValueCollection[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.PropertyCollection.Count
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
- uid: System.DirectoryServices.PropertyValueCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
- uid: System.DirectoryServices.PropertyCollection.Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains
  nameWithType: PropertyCollection.Contains
- uid: System.DirectoryServices.PropertyCollection.CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo
  nameWithType: PropertyCollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.Count*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: PropertyCollection.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item
  nameWithType: PropertyCollection.Item
- uid: System.DirectoryServices.PropertyCollection.PropertyNames*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
