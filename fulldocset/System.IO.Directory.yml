### YamlMime:ManagedReference
items:
- uid: System.IO.Directory
  id: Directory
  children:
  - System.IO.Directory.CreateDirectory(System.String)
  - System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.Delete(System.String)
  - System.IO.Directory.Delete(System.String,System.Boolean)
  - System.IO.Directory.EnumerateDirectories(System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFiles(System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.Exists(System.String)
  - System.IO.Directory.GetAccessControl(System.String)
  - System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  - System.IO.Directory.GetCreationTime(System.String)
  - System.IO.Directory.GetCreationTimeUtc(System.String)
  - System.IO.Directory.GetCurrentDirectory
  - System.IO.Directory.GetDirectories(System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetDirectoryRoot(System.String)
  - System.IO.Directory.GetFiles(System.String)
  - System.IO.Directory.GetFiles(System.String,System.String)
  - System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetFileSystemEntries(System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetLastAccessTime(System.String)
  - System.IO.Directory.GetLastAccessTimeUtc(System.String)
  - System.IO.Directory.GetLastWriteTime(System.String)
  - System.IO.Directory.GetLastWriteTimeUtc(System.String)
  - System.IO.Directory.GetLogicalDrives
  - System.IO.Directory.GetParent(System.String)
  - System.IO.Directory.Move(System.String,System.String)
  - System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  - System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetCurrentDirectory(System.String)
  - System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  langs:
  - csharp
  name: Directory
  nameWithType: Directory
  fullName: System.IO.Directory
  type: Class
  summary: "Létrehozására, áthelyezés és könyvtárak és alkönyvtárak számbavétele statikus metódusok közzététele. Ez az osztály nem örökölhető.       Keresse meg a .NET-keretrendszer forráskód ehhez a típushoz, tekintse meg a [hivatkozás forrás](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the Directory class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n-   To create a directory, use one of the <xref:System.IO.Directory.CreateDirectory%2A> methods.  \n  \n-   To delete a directory, use one of the <xref:System.IO.Directory.Delete%2A> methods.  \n  \n-   To get or set the current directory for an app, use the <xref:System.IO.Directory.GetCurrentDirectory%2A> or <xref:System.IO.Directory.SetCurrentDirectory%2A> method.  \n  \n-   To manipulate <xref:System.DateTime> information related to the creation, access, and writing of a directory, use methods such as <xref:System.IO.Directory.SetLastAccessTime%2A> and <xref:System.IO.Directory.SetCreationTime%2A>.  \n  \n The static methods of the Directory class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.DirectoryInfo> instead, because the security check will not always be necessary.  \n  \n If you are performing only one directory-related action, it might be more efficient to use a static Directory method rather than a corresponding <xref:System.IO.DirectoryInfo> instance method. Most Directory methods require the path to the directory that you are manipulating.  \n  \n> [!NOTE]\n>  In members that accept a string `path` parameter, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space (\" c:\\temp\"), the path string isn't trimmed, so the path is considered malformed and an exception is raised. In addition, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception. Ensure that your paths are well-formed when using methods that accept a path string. For more information see <xref:System.IO.Path>.  \n  \n In members that accept a path, the path can refer to a file or a directory. You can use a full path, a relative path, or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users. However, the app must have the correct security to access existing directories.  \n  \n To demand permissions for a directory and all its subdirectories, end the path string with the directory separator character. (For example, \"C:\\Temp\\\\\" grants access to C:\\Temp\\ and all its subdirectories.) To demand permissions only for a specific directory, end the path string with a period. (For example, \"C:\\Temp\\\\.\" grants access only to C:\\Temp\\\\, not to its subdirectories.)  \n  \n In members that accept a `searchPattern` parameter, the search string can be any combination of literal characters and two wildcard characters; * and ?. This parameter does not recognize regular expressions. For more information, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> method or any other method that uses the `searchPattern` parameter.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).  \n  \n Directory and <xref:System.IO.DirectoryInfo> are not supported for use in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps. For information about how to access files and folders in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps, see [Accessing data and files (Windows Store apps)](http://msdn.microsoft.com/library/windows/apps/hh758319.aspx)."
  example:
  - "The following example shows how to retrieve all the text files from a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/t-system.io.directory_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/t-system.io.directory_1.vb)]  \n  \n The following example demonstrates how to use the <xref:System.IO.Directory.EnumerateFiles%2A> method to retrieve a collection of text files from a directory, and then use that collection in a query to find all the lines that contain \"Example\".  \n  \n [!code-cs[System.IO.Directory#11](~/add/codesnippet/csharp/t-system.io.directory_2.cs)]\n [!code-vb[System.IO.Directory#11](~/add/codesnippet/visualbasic/t-system.io.directory_2.vb)]  \n  \n The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/t-system.io.directory_3.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/t-system.io.directory_3.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Directory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String)
  id: CreateDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Hoz létre minden könyvtárak és alkönyvtárak a megadott elérési út kivéve, ha már léteznek."
  remarks: "Any and all directories specified in `path` are created, unless they already exist or unless some part of `path` is invalid. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n The `path` parameter specifies a directory path, not a file path.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported, and will cause a `NotSupportedException` to be thrown."
  example:
  - "The following example creates and deletes the specified directory.  \n  \n [!code-cs[Dir_CreateDir#1](~/add/codesnippet/csharp/m-system.io.directory.cr_1.cs)]\n [!code-vb[Dir_CreateDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.cr_1.vb)]\n [!code-cpp[Dir_CreateDir#1](~/add/codesnippet/cpp/m-system.io.directory.cr_1.cpp)]  \n  \n To create the directory C:\\Users\\User1\\Public\\Html when the current directory is C:\\Users\\User1, use any of the following calls to ensure that the backslash is interpreted properly.  \n  \n In Visual Basic:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\Html\")   \n    Directory.CreateDirectory(\"\\Users\\User1\\Public\\Html\")   \n    Directory.CreateDirectory(\"c:\\Users\\User1\\Public\\Html\")  \n```  \n  \n In C#:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\\\Html\");  \n    Directory.CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory.CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```  \n  \n In C++:  \n  \n```  \nDirectory::CreateDirectory(\"Public\\\\Html\");  \n    Directory::CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory::CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár létrehozása."
    return:
      type: System.IO.DirectoryInfo
      description: "A könyvtár a megadott elérési úton képviselő objektum. Ezt az objektumot ad vissza, függetlenül attól, hogy a megadott elérési úton könyvtár már létezik."
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A megadott könyvtár <code> path </code> fájl.       – vagy – a hálózat neve nem ismert."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust.       – vagy – <code>path</code> előtagként van, vagy csak egy kettőspont (:) tartalmazza."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>a kettőspont (:), amely nem része a meghajtócímke tartalmaz (&quot;C:\\&quot;)."
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Hozza létre a könyvtárak a megadott elérési út, kivéve, ha az létezik, a megadott Windows biztonsági alkalmazása."
  remarks: "Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \n  \n Any and all directories specified in the `path` parameter are created, unless they already exist or unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported and causes a `NotSupportedException` to be thrown."
  example:
  - "The following example creates a new directory with access rules for two user accounts.  \n  \n [!code-cs[System.IO.Directory#15](~/add/codesnippet/csharp/52b6d5ea-0f1d-4395-a346-_1.cs)]\n [!code-vb[System.IO.Directory#15](~/add/codesnippet/visualbasic/52b6d5ea-0f1d-4395-a346-_1.vb)]"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár létrehozása."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "A hozzáférés-vezérlés alkalmazása a könyvtárban."
    return:
      type: System.IO.DirectoryInfo
      description: "A könyvtár a megadott elérési úton képviselő objektum. Ezt az objektumot ad vissza, függetlenül attól, hogy a megadott elérési úton könyvtár már létezik."
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A megadott könyvtár <code> path </code> fájl.       – vagy – a hálózat neve nem ismert."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust.       – vagy – <code>path</code> előtagként van, vagy csak egy kettőspont (:) tartalmazza."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>a kettőspont (:), amely nem része a meghajtócímke tartalmaz (&quot;C:\\&quot;)."
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Üres könyvtár törlése a megadott elérési úton."
  remarks: "Ez a módszer viselkedik-e az azonos <xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>rendelkező `false` a második paraméterhez megadott.</xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>       A `path` paraméter lehet, hogy adja meg a relatív vagy abszolút elérési út. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Végén szóközök törlődnek a `path` paraméter a címtár törlése előtt.       Ez a módszer jelez egy <xref:System.IO.IOException>Ha szerepel a könyvtár a `path` a paraméter tartalmazza a fájlok és alkönyvtárak.</xref:System.IO.IOException>       A `path` paraméter nincs a kis-és nagybetűket.       Bizonyos esetekben ha a megadott könyvtár a Fájlkezelőben, nyissa meg a Delete metódus nem lehet tudja törölni."
  example:
  - "The following example shows how to create a new directory and subdirectory, and then delete only the subdirectory.  \n  \n [!code-vb[System.IO.Directory.Delete#1](~/add/codesnippet/visualbasic/m-system.io.directory.de_0_1.vb)]\n [!code-cs[System.IO.Directory.Delete#1](~/add/codesnippet/csharp/m-system.io.directory.de_0_1.cs)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "Távolítsa el a üres könyvtár neve. Ebben a könyvtárban kell lennie, írható és az üres."
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A fájl neve és a megadott helyen <code> path </code> létezik-e.       – vagy – a könyvtár az alkalmazás aktuális munkakönyvtár nem.       – vagy – a megadott könyvtár <code> path </code> nem üres.       – vagy – a könyvtár csak olvasható, vagy egy csak olvasható fájl tartalmazza.       – vagy – a könyvtár egy másik folyamat használja."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>nem létezik vagy nem található.       – vagy – a megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  id: Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott könyvtár törlése és, ha azt mutatták ki, minden olyan alkönyvtárak és a könyvtárban."
  remarks: "A `path` paraméter lehet, hogy adja meg a relatív vagy abszolút elérési út. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Végén szóközök törlődnek a `path` paraméter a címtár törlése előtt.       A `path` paraméter nincs a kis-és nagybetűket.       Ha a `recursive` paraméter `true`, a felhasználó az aktuális könyvtárhoz, valamint minden alkönyvtár mint írási engedéllyel kell rendelkeznie.       Ez a módszer viselkedését a módja kissé eltér újraelemzési pontot, például a szimbolikus hivatkozást, vagy egy csatlakoztatási pontot tartalmazó könyvtár törlésekor. Ha az újraelemzési pont egy könyvtárat, például a csatlakoztatási pont fürtköteteiről, és a csatlakoztatási pont törlődik. Ez a módszer nem recurse keresztül az újraelemzési pont. Ha az újraelemzési pont fájlba szimbolikus hivatkozást, az újraelemzési pont törlődik, és nem célja a szimbolikus hivatkozást.       Bizonyos esetekben ha a megadott könyvtár a Fájlkezelőben, nyissa meg a Delete metódus nem lehet tudja törölni."
  example:
  - "The following example shows how to create a new directory, subdirectory, and file in the subdirectory, and then recursively delete all the new items.  \n  \n [!code-cs[System.IO.Directory.Delete#2](~/add/codesnippet/csharp/m-system.io.directory.de_1_1.cs)]\n [!code-vb[System.IO.Directory.Delete#2](~/add/codesnippet/visualbasic/m-system.io.directory.de_1_1.vb)]"
  syntax:
    content: public static void Delete (string path, bool recursive);
    parameters:
    - id: path
      type: System.String
      description: "Távolítsa el a könyvtár neve."
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>eltávolítja a könyvtárak, alkönyvtárak és a fájlok `path`; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A fájl neve és a megadott helyen <code> path </code> létezik-e.       – vagy – a megadott könyvtár <code> path </code> csak olvasható, vagy <code> recursive </code> van <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> és <code> path </code> értéke nem üres könyvtár.       – vagy – a könyvtár az alkalmazás aktuális munkakönyvtár nem.       – vagy – a könyvtár csak olvasható fájlt tartalmaz.       – vagy – a könyvtár egy másik folyamat használja."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>nem létezik vagy nem található.       – vagy – a megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott elérési úton adja vissza egy címtárnevek enumerálható gyűjteménye."
  remarks: "A relatív vagy abszolút elérési utat információkat adhatja meg a `path` paraméter. Az aktuális munkakönyvtár, amelyek segítségével meghatározhatja viszonyítva értelmezi relatív elérési út a <xref:System.IO.Directory.GetCurrentDirectory%2A>metódus.</xref:System.IO.Directory.GetCurrentDirectory%2A> A visszaadott címtárnevek fűzve előtagként a megadott érték a `path` paraméter. Például, ha a relatív elérési utat ad meg a `path` paraméter, a visszaadott címtárnevek relatív elérési út fogja tartalmazni.       A <xref:System.IO.Directory.EnumerateDirectories%2A>és <xref:System.IO.Directory.GetDirectories%2A>módszerek az alábbiak szerint eltérőek: használatakor <xref:System.IO.Directory.EnumerateDirectories%2A>, megkezdheti a neveket gyűjtése enumerálása, mielőtt az egész gyűjteményre adja vissza; használatakor <xref:System.IO.Directory.GetDirectories%2A>, meg kell várnia a nevek a tömb elérése előtt vissza kell adni a teljes tömböt.</xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> </xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> Ezért, amikor dolgozunk sok fájlok és könyvtárak, <xref:System.IO.Directory.EnumerateDirectories%2A>hatékonyabb.</xref:System.IO.Directory.EnumerateDirectories%2A>       A visszaadott gyűjtemény nem gyorsítótárazott; minden egyes a <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>meg a gyűjteményt egy új számbavételi kezdési.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>"
  example:
  - "The following example enumerates the top-level directories in a specified path.  \n  \n [!code-vb[System.IO.EnumDirs1#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_2_1.vb)]\n [!code-cs[System.IO.EnumDirs1#1](~/add/codesnippet/csharp/m-system.io.directory.en_2_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A teljes nevét (is beleértve) által megadott könyvtárban könyvtárak egy enumerálható gyűjteménye <code> path </code>."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  id: EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Egy enumerálható gyűjteménye, amelyek megfelelnek a megadott elérési úton a keresési minta címtárnevek adja vissza."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates the top-level directories in a specified path that match a specified search pattern.  \n  \n [!code-cs[System.IO.EnumDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.en_0_1.cs)]\n [!code-vb[System.IO.EnumDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_0_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez a fájlneveket a `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A teljes nevét (is beleértve) által megadott könyvtárban könyvtárak egy enumerálható gyűjteménye <code> path </code> és, amelyek megfelelnek a megadott keresési mintát."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Egy enumerálható gyűjteménye, amelyek megfelelnek a megadott elérési úton a keresési minta címtárnevek adja vissza, és opcionálisan a alkönyvtárak keresése."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Exactly one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates directories in a specified path that match a specified search pattern. It uses the `searchOption` parameter to specify that all subdirectories should be included in the search.  \n  \n [!code-cs[System.IO.EnumDirs3#1](~/add/codesnippet/csharp/d54eb053-19f8-45e5-b70d-_1.cs)]\n [!code-vb[System.IO.EnumDirs3#1](~/add/codesnippet/visualbasic/d54eb053-19f8-45e5-b70d-_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez a fájlneveket a `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Az egyik a számbavételi érték, amely megadja, hogy a keresési művelet tartalmaznia kell az aktuális könyvtárhoz, vagy minden alkönyvtár kell tartalmaznia.       Az alapértelmezett érték <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A teljes nevét (is beleértve) által megadott könyvtárban könyvtárak egy enumerálható gyűjteménye <code> path </code> és, amelyek megfelelnek a megadott keresési mintát és beállítást."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Érvénytelen <xref href=&quot;System.IO.SearchOption&quot;> </xref> érték."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott elérési úton adja vissza egy fájlnevek enumerálható gyűjteménye."
  remarks: "A relatív elérési út információkat adhatja meg a `path` paraméter. Az aktuális munkakönyvtár, amelyek segítségével meghatározhatja viszonyítva értelmezi relatív elérési út a <xref:System.IO.Directory.GetCurrentDirectory%2A>metódus.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A <xref:System.IO.Directory.EnumerateFiles%2A>és <xref:System.IO.Directory.GetFiles%2A>módszerek az alábbiak szerint eltérőek: használatakor <xref:System.IO.Directory.EnumerateFiles%2A>, megkezdheti a neveket gyűjtése enumerálása, mielőtt az egész gyűjteményre adja vissza; használatakor <xref:System.IO.Directory.GetFiles%2A>, meg kell várnia a nevek a tömb elérése előtt vissza kell adni a teljes tömböt.</xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> </xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> Ezért, amikor dolgozunk sok fájlok és könyvtárak, <xref:System.IO.Directory.EnumerateFiles%2A>hatékonyabb.</xref:System.IO.Directory.EnumerateFiles%2A>       A visszaadott gyűjtemény nem gyorsítótárazott; minden egyes a <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>meg a gyűjteményt egy új számbavételi kezdési.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>"
  example:
  - "The following example shows how to retrieve all the files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#12](~/add/codesnippet/csharp/m-system.io.directory.en_3_1.cs)]\n [!code-vb[System.IO.Directory#12](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_1.vb)]  \n  \n The following example enumerates the files in the specified directory, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directory.en_3_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Egy enumerálható gyűjtemény által megadott könyvtárban lévő fájlok teljes neveinek (is beleértve) <code> path </code>."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  id: EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Egy enumerálható gyűjteménye, amelyek megfelelnek a megadott elérési úton a keresési minta fájlnevek adja vissza."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/m-system.io.directory.en_1_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_1.vb)]  \n  \n The following example enumerates the files in the specified directory that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.en_1_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez fájlok nevét `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Egy enumerálható gyűjtemény által megadott könyvtárban lévő fájlok teljes neveinek (is beleértve) <code> path </code> és, amelyek megfelelnek a megadott keresési mintát."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Egy enumerálható gyűjteménye, amelyek megfelelnek a megadott elérési úton a keresési minta fájlnevek adja vissza, és opcionálisan a alkönyvtárak keresése."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and its subdirectories, and move them to a new directory. After the files are moved, they no longer exist in the original directories.  \n  \n [!code-cs[System.IO.Directory#13](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_1.cs)]\n [!code-vb[System.IO.Directory#13](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_1.vb)]  \n  \n The following example recursively enumerates all files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".  \n  \n [!code-cs[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_2.cs)]\n [!code-vb[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez fájlok nevét `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Az egyik a számbavételi érték, amely megadja, hogy a keresési művelet tartalmaznia kell az aktuális könyvtárhoz, vagy minden alkönyvtár kell tartalmaznia.       Az alapértelmezett érték <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Egy enumerálható gyűjtemény által megadott könyvtárban lévő fájlok teljes neveinek (is beleértve) <code> path </code> és, amelyek megfelelnek a megadott keresési mintát és beállítást."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Érvénytelen <xref href=&quot;System.IO.SearchOption&quot;> </xref> érték."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  id: EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott elérési úton enumerálható gyűjteménye fájl és könyvtár nevét adja vissza."
  remarks: "A relatív elérési út információkat adhatja meg a `path` paraméter. Az aktuális munkakönyvtár, amelyek segítségével meghatározhatja viszonyítva értelmezi relatív elérési út a <xref:System.IO.Directory.GetCurrentDirectory%2A>metódus.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>és <xref:System.IO.Directory.GetFileSystemEntries%2A>módszerek az alábbiak szerint eltérőek: használatakor <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, megkezdheti a számbavétele bejegyzések gyűjteményét, mielőtt az egész gyűjteményre adja vissza; használatakor <xref:System.IO.Directory.GetFileSystemEntries%2A>, meg kell várnia a bejegyzések a tömb elérése előtt vissza kell adni a teljes tömböt.</xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> </xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> Ezért, amikor dolgozunk sok fájlok és könyvtárak, <xref:System.IO.Directory.EnumerateFiles%2A>hatékonyabb.</xref:System.IO.Directory.EnumerateFiles%2A>       A visszaadott gyűjtemény nem gyorsítótárazott; minden egyes a <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>meg a gyűjteményt egy új számbavételi kezdési.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A fájlrendszer bejegyzéseket a címtárban, amelyet egy enumerálható gyűjteményhez <code> path </code>."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  id: EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A fájl és könyvtár nevét, amelyek megfelelnek a megadott elérési úton a keresési minta egy enumerálható gyűjteményhez adja vissza."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`..  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez fájlrendszer bejegyzéseit nevét `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A fájlrendszer bejegyzéseket a címtárban, amelyet egy enumerálható gyűjteményhez <code> path </code> és, amelyek megfelelnek a megadott keresési mintát."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Egy fájl és könyvtár nevét, amelyek megfelelnek a megadott elérési úton a keresési minta enumerálható gyűjteményét adja vissza, és opcionálisan keresése a alkönyvtáraiban találhatóak."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez fájlrendszer bejegyzések `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Az egyik a számbavételi érték, amely megadja, hogy a keresési művelet tartalmaznia kell az aktuális könyvtárhoz, vagy minden alkönyvtár kell tartalmaznia.       Az alapértelmezett érték <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A fájlrendszer bejegyzéseket a címtárban, amelyet egy enumerálható gyűjteményhez <code> path </code> és, amelyek megfelelnek a megadott keresési mintát és beállítást."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Érvénytelen <xref href=&quot;System.IO.SearchOption&quot;> </xref> érték."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Meghatározza, hogy a megadott elérési út egy meglévő könyvtár lemezen hivatkozik."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi.       Végén szóközök törlődnek a `path` paraméter ellenőrzése, hogy létezik-e a directory előtt.       A `path` paraméter nincs a kis-és nagybetűket.       Ha nincs minimális olvasási engedélye a könyvtárba, a Exists metódus visszaadható `false`.       Az Exists metódus visszaadja `false` meghatározni, hogy létezik-e a megadott fájl során bármilyen hiba esetén. Ez akkor fordulhat elő, például egy fájl neve érvénytelen karaktereket vagy túl sok karakterből áll, hibás vagy hiányzó lemez átadásakor kivételek előléptetése helyzetekben, vagy ha a hívónak nincs engedélye a fájl olvasásához."
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#2](~/add/codesnippet/cpp/m-system.io.directory.ex_1.cpp)]\n [!code-cs[Recursive file finder#2](~/add/codesnippet/csharp/m-system.io.directory.ex_1.cs)]\n [!code-vb[Recursive file finder#2](~/add/codesnippet/visualbasic/m-system.io.directory.ex_1.vb)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "Az elérési út teszteléséhez."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <code> path </code> hivatkozik egy létező könyvtár; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Ha a könyvtár nem létezik, vagy a hiba akkor fordul elő, amikor meghatározni, hogy létezik-e a megadott könyvtár."
  overload: System.IO.Directory.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String)
  id: GetAccessControl(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekérdezi a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> a hozzáférés-vezérlési lista (ACL) egy adott könyvtár bejegyzésekkel beágyazó objektum."
  remarks: "A hozzáférés-vezérlési lista (ACL) könyvtár bejegyzésekkel a GetAccessControl metódus használatával.       Hozzáférés-vezérlési Listában írja le, személyek és/vagy csoportot, akik rendelkeznek, vagy nincs jogosultsága, egy adott művelethez a megadott fájl vagy könyvtár. További információkért lásd: [hogyan: hozzáadása vagy eltávolítása a hozzáférés-vezérlési lista bejegyzések](~/add/includes/ajax-current-ext-md.md).       NTFS-környezetekben <xref:System.Security.AccessControl.FileSystemRights>és <xref:System.Security.AccessControl.FileSystemRights>Ha a felhasználó rendelkezik-e a felhasználó számára biztosított <xref:System.Security.AccessControl.FileSystemRights>jogok a szülőmappától.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> Megtagadni <xref:System.Security.AccessControl.FileSystemRights>és <xref:System.Security.AccessControl.FileSystemRights>, megtagadása <xref:System.Security.AccessControl.FileSystemRights>a a szülőkönyvtárat.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights>"
  example:
  - "The following example uses the GetAccessControl and the <xref:System.IO.Directory.SetAccessControl%2A> methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directory.ge_7_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directory.ge_7_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_7_1.vb)]"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);
    parameters:
    - id: path
      type: System.String
      description: "A tartalmazó könyvtár elérési útja egy <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objektum, amely a fájl hozzáférés-vezérlési lista (ACL) adatokat ismerteti."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A fájl által leírt szabályok olyan objektum, amely magában foglalja a hozzáférés-vezérlés a <code> path </code> paraméter."
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba történt a könyvtár megnyitása közben."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows 2000 vagy újabb."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Egy rendszerszintű hiba történt, mint például a könyvtár nem található. Lehet, hogy az adott kivétel alosztályát <xref href=&quot;System.SystemException&quot;> </xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A <code> path </code> paraméter megadott könyvtár nem csak olvasható.       – vagy – ez a művelet nem támogatott a jelenlegi platformon.       – vagy – a hívó nem rendelkezik a szükséges engedéllyel."
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekérdezi a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> hozzáférés-vezérlési lista (ACL) bejegyzés egy adott könyvtár a megadott típusú beágyazó objektum."
  remarks: "A hozzáférés-vezérlési lista (ACL) könyvtár bejegyzésekkel a GetAccessControl metódus használatával.       Hozzáférés-vezérlési Listában írja le, személyek és/vagy csoportot, akik rendelkeznek, vagy nincs jogosultsága, egy adott művelethez a megadott fájl vagy könyvtár. További információkért lásd: [hogyan: hozzáadása vagy eltávolítása a hozzáférés-vezérlési lista bejegyzések](~/add/includes/ajax-current-ext-md.md).       NTFS-környezetekben <xref:System.Security.AccessControl.FileSystemRights>és <xref:System.Security.AccessControl.FileSystemRights>Ha a felhasználó rendelkezik-e a felhasználó számára biztosított <xref:System.Security.AccessControl.FileSystemRights>jogok a szülőmappától.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> Megtagadni <xref:System.Security.AccessControl.FileSystemRights>és <xref:System.Security.AccessControl.FileSystemRights>, megtagadása <xref:System.Security.AccessControl.FileSystemRights>a a szülőkönyvtárat.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights>"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: path
      type: System.String
      description: "A tartalmazó könyvtár elérési útja egy <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objektum, amely a fájl hozzáférés-vezérlési lista (ACL) adatokat ismerteti."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Egy a <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> értékek, amelyek határozza meg a hozzáférés szabályozásához lista (ACL) adatokat fogadhat."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A fájl által leírt szabályok olyan objektum, amely magában foglalja a hozzáférés-vezérlés a <code> path </code> paraméter."
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba történt a könyvtár megnyitása közben."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows 2000 vagy újabb."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Egy rendszerszintű hiba történt, mint például a könyvtár nem található. Lehet, hogy az adott kivétel alosztályát <xref href=&quot;System.SystemException&quot;> </xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A <code> path </code> paraméter megadott könyvtár nem csak olvasható.       – vagy – ez a művelet nem támogatott a jelenlegi platformon.       – vagy – a hívó nem rendelkezik a szükséges engedéllyel."
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekérdezi a létrehozásának dátuma és ideje a könyvtárat."
  remarks: "> [!NOTE]> Ezt a módszert lehet, hogy egy pontatlan értéket visszaadnia, mert használ, amelynek értéke nem lehet folyamatosan frissíteni az operációs rendszer natív függvények.       Ez a módszer megegyezik a <xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>.</xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>       Ha a könyvtár ismertetett a `path` paraméter nem létezik, ez a módszer ad vissza, 12:00 éjféltől. január 1, i.. 1601. (SZ) Helyi idejéhez igazítva egyezményes világidő (UTC) szerint.       A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example gets the creation time of the specified directory.  \n  \n [!code-cpp[Dir_GetCreation#1](~/add/codesnippet/cpp/m-system.io.directory.ge_1_1.cpp)]\n [!code-cs[Dir_GetCreation#1](~/add/codesnippet/csharp/m-system.io.directory.ge_1_1.cs)]\n [!code-vb[Dir_GetCreation#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_1_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár elérési útját."
    return:
      type: System.DateTime
      description: "Ez a struktúra létrehozásának dátumát és idejét, a megadott könyvtár értéke. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.GetCreationTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekérdezi a létrehozásának dátuma és időpontja, könyvtár egyezményes világidő (UTC) formátumban."
  remarks: "> [!NOTE]> Ezt a módszert lehet, hogy egy pontatlan értéket visszaadnia, mert használ, amelynek értéke nem lehet folyamatosan frissíteni az operációs rendszer natív függvények.       Ha a könyvtár ismertetett a `path` paraméter nem létezik, ez a módszer ad vissza, 12:00 éjféltől. január 1, i.. 1601. (SZ) Egyezményes világidő (UTC).       Ezt a módszert a létrehozásának idejét, az egyezményes világidő (UTC) alapú könyvtár eléréséhez."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_11_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_11_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_11_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár elérési útját."
    return:
      type: System.DateTime
      description: "Ez a struktúra létrehozásának dátumát és idejét, a megadott könyvtár értéke. Ez az érték UTC idő szerint van megadva."
  overload: System.IO.Directory.GetCreationTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  platform:
  - net462
- uid: System.IO.Directory.GetCurrentDirectory
  id: GetCurrentDirectory
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekérdezi az aktuális munkakönyvtárban az alkalmazás."
  remarks: "Az aktuális könyvtárat nem egyezik az eredeti könyvtár, amely a kiszolgáló, az a folyamat elindításának.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the `GetCurrentDirectory` method.  \n  \n [!code-cs[Dir_GetCurDir#1](~/add/codesnippet/csharp/m-system.io.directory.ge_16_1.cs)]\n [!code-vb[Dir_GetCurDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_16_1.vb)]\n [!code-cpp[Dir_GetCurDir#1](~/add/codesnippet/cpp/m-system.io.directory.ge_16_1.cpp)]"
  syntax:
    content: public static string GetCurrentDirectory ();
    parameters: []
    return:
      type: System.String
      description: "Karakterlánc, amely tartalmazza az aktuális munkakönyvtárban elérési útját, és nem végződhet perjellel (\\\\)."
  overload: System.IO.Directory.GetCurrentDirectory*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Az operációs rendszer Windows CE, amelyek nem rendelkeznek aktuális directory funkcióit.       Ez a metódus a .NET kompakt keretrendszer érhető el, de jelenleg nem támogatott."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott könyvtár alkönyvtár (beleértve az elérési utak) nevét adja vissza."
  remarks: "Ez a módszer megegyezik <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>a csillag (*) határoz meg a keresési minta, ezért adja vissza minden alkönyvtár. Ha keresést szeretne, használja a <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29>metódus, amely lehetővé teszi az alkönyvtárak a keresés megadását a `searchOption` paraméter.</xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> </xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>       A <xref:System.IO.Directory.EnumerateDirectories%2A>és <xref:System.IO.Directory.GetDirectories%2A>módszerek az alábbiak szerint eltérőek: használatakor <xref:System.IO.Directory.EnumerateDirectories%2A>, megkezdheti a neveket gyűjtése enumerálása, mielőtt az egész gyűjteményre adja vissza; használatakor <xref:System.IO.Directory.GetDirectories%2A>, meg kell várnia a nevek a tömb elérése előtt vissza kell adni a teljes tömböt.</xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> </xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> Ezért, amikor dolgozunk sok fájlok és könyvtárak, <xref:System.IO.Directory.EnumerateDirectories%2A>hatékonyabb.</xref:System.IO.Directory.EnumerateDirectories%2A>       A `path` paraméter relatív vagy abszolút elérési utat információkat adhatja meg. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Ez a metódus által visszaadott nevét fűzve előtagként a megadott címtáradatok `path`.       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_13_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_13_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_13_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    return:
      type: System.String[]
      description: "A megadott elérési út vagy egy üres tömb, ha egy címtár találhatók alkönyvtárak teljes nevét (is beleértve) tömbjét."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  id: GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Alkönyvtár (beleértve az az elérési utak), amely megfelel a megadott keresési mintának a megadott könyvtár nevét adja vissza."
  remarks: "This method returns all subdirectories directly under the specified directory that match the specified search pattern. If the specified directory has no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array. Only the top directory is searched. If you want to search the subdirectories as well, use the <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> method and specify <xref:System.IO.SearchOption> in the `searchOption` parameter.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The `path` parameter can specify relative or absolute path information, and is not case-sensitive.  Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories in a path that begin with the specified letter.  \n  \n [!code-cpp[Dir_GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_12_1.cpp)]\n [!code-cs[Dir_GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_12_1.cs)]\n [!code-vb[Dir_GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_12_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez az alkönyvtárak nevei `path`. Ez a paraméter (lásd a megjegyzések) érvényes szövegkonstans, és a helyettesítő karakterek kombinációjából tartalmazhat, de nem támogatja reguláris kifejezéseket."
    return:
      type: System.String[]
      description: "Az alkönyvtárak, amelyek megfelelnek a megadott könyvtár a keresési minta teljes nevét (is beleértve) álló tömb, vagy ha egy címtár találhatók üres tömb."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők <xref:System.IO.Path.GetInvalidPathChars*>.       – vagy – <code>searchPattern</code> nem tartalmaz érvényes mintát."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A alkönyvtárai (beleértve az elérési utak), amely megfelel a megadott könyvtár a megadott keresési mintának nevét adja vissza, és opcionálisan a alkönyvtárak keresése."
  remarks: "The `path` parameter can specify relative or absolute path information, and is not case-sensitive. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories that begin with the specified letter in a path. Only the top-level directory is searched.  \n  \n [!code-vb[Dir_GetDirs2#2](~/add/codesnippet/visualbasic/15c0f479-3a12-4c2f-95ac-_1.vb)]\n [!code-cs[Dir_GetDirs2#2](~/add/codesnippet/csharp/15c0f479-3a12-4c2f-95ac-_1.cs)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez az alkönyvtárak nevei `path`. Ez a paraméter (lásd a megjegyzések) érvényes szövegkonstans, és a helyettesítő karakterek kombinációjából tartalmazhat, de nem támogatja reguláris kifejezéseket."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Az egyik a számbavételi érték, amely meghatározza, hogy a keresési művelet tartalmaznia kell minden alkönyvtár vagy csak az aktuális könyvtár."
    return:
      type: System.String[]
      description: "A teljes nevét (is beleértve) a megadott feltételeknek megfelelő alkönyvtára tömbje, vagy ha egy címtár találhatók üres tömb."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust.       – vagy – <code>searchPattern</code> nem tartalmaz érvényes mintát."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Érvénytelen <xref href=&quot;System.IO.SearchOption&quot;> </xref> érték."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  id: GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Kötetadatait, a legfelső szintű információkat, vagy mindkét a megadott elérési út adja vissza."
  remarks: "Ezzel a módszerrel szerzi be a teljesen minősített elérési útjának `path`, amelyet <xref:System.IO.Path.GetFullPath%2A>, és értéket ad vissza a címtáradatok.</xref:System.IO.Path.GetFullPath%2A> A megadott elérési út nem létezik szükséges.       A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.ge_10_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.ge_10_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_10_1.vb)]"
  syntax:
    content: public static string GetDirectoryRoot (string path);
    parameters:
    - id: path
      type: System.String
      description: "Egy fájl vagy könyvtár elérési útja"
    return:
      type: System.String
      description: "A mennyiségi információk, legfelső szintű információk tartozhatnak a megadott elérési tartalmazó karakterlánc."
  overload: System.IO.Directory.GetDirectoryRoot*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti <xref:System.IO.Path.GetInvalidPathChars*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott könyvtár fájljai (ideértve az elérési utak) nevét adja vissza."
  remarks: "A <xref:System.IO.Directory.EnumerateFiles%2A>és <xref:System.IO.Directory.GetFiles%2A>módszerek az alábbiak szerint eltérőek: használatakor <xref:System.IO.Directory.EnumerateFiles%2A>, megkezdheti a neveket gyűjtése enumerálása, mielőtt az egész gyűjteményre adja vissza; használatakor <xref:System.IO.Directory.GetFiles%2A>, meg kell várnia a nevek a tömb elérése előtt vissza kell adni a teljes tömböt.</xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> </xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> Ezért, amikor dolgozunk sok fájlok és könyvtárak, <xref:System.IO.Directory.EnumerateFiles%2A>hatékonyabb.</xref:System.IO.Directory.EnumerateFiles%2A>       A visszaadott fájlok neve az a megadott `path` paraméter.       Ez a módszer megegyezik <xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>a csillag (*) határoz meg a keresési minta.</xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>       A `path` paraméter relatív vagy abszolút elérési utat információkat adhatja meg. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A visszaadott fájlnevek sorrendje nem garantált; használja a <xref:System.Array.Sort%2A>módszert, ha a megadott rendezési sorrend szükség.</xref:System.Array.Sort%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetFiles method to return file names from a user-specified location. The example is configured to catch all errors common to this method.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_0_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_0_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_0_1.vb)]"
  syntax:
    content: public static string[] GetFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    return:
      type: System.String[]
      description: "Egy tömb a megadott könyvtárban található fájlok teljes neveinek (is beleértve), vagy ha nincsenek fájlok találhatók üres tömb."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét.       – vagy – A hálózati hiba történt."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út nem található vagy érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  id: GetFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Fájlok (beleértve az elérési utak), amely megfelel a megadott keresési mintának a megadott könyvtár nevét adja vissza."
  remarks: "The returned file names are appended to the supplied `path` parameter and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of files that begin with the specified letter.  \n  \n [!code-vb[Dir_GetFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_15_1.vb)]\n [!code-cs[Dir_GetFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_15_1.cs)]\n [!code-cpp[Dir_GetFiles2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_15_1.cpp)]"
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez fájlok nevét `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    return:
      type: System.String[]
      description: "Tömb a megadott könyvtárban található fájlok teljes neveinek (is beleértve), amely egyezik a megadott keresési mintát, vagy egy üres tömb Ha nincsenek fájlok találhatók."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét.       – vagy – A hálózati hiba történt."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterek használatával kérdezhetők <xref:System.IO.Path.GetInvalidPathChars*>.       – vagy – <code>searchPattern</code> nem tartalmaz érvényes mintát."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út nem található vagy érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Fájlok (beleértve az elérési utak), amely megfelel a megadott könyvtár, egy érték használatával határozza meg, hogy a keresést a megadott keresési mintának nevét adja vissza."
  remarks: "The returned file names are appended to the supplied  parameter `path` and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The file names include the full path.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez fájlok nevét `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Az egyik a számbavételi érték, amely meghatározza, hogy a keresési művelet tartalmaznia kell minden alkönyvtár vagy csak az aktuális könyvtár."
    return:
      type: System.String[]
      description: "A teljes nevét (is beleértve) a megadott könyvtár a fájlokat, amelyek megfelelnek a megadott keresési mintát és beállítás tömbje, vagy egy üres tömb, ha nincsenek fájlok találhatók."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust.       – vagy – <code>searchPattern</code> nem tartalmaz érvényes mintát."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchpattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Érvénytelen <xref href=&quot;System.IO.SearchOption&quot;> </xref> érték."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út nem található vagy érvénytelen (például van egy le nem képezett meghajtón)."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét.       – vagy – A hálózati hiba történt."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  id: GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott elérési úton található összes fájlt és alkönyvtárt nevét adja vissza."
  remarks: "A visszaadott fájl és a könyvtárak nem garantált; használja a <xref:System.Array.Sort%2A>módszert, ha a megadott rendezési sorrend szükség.</xref:System.Array.Sort%2A>       A <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>és <xref:System.IO.Directory.GetFileSystemEntries%2A>módszerek az alábbiak szerint eltérőek: használatakor <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, megkezdheti a számbavétele bejegyzések gyűjteményét, mielőtt az egész gyűjteményre adja vissza; használatakor <xref:System.IO.Directory.GetFileSystemEntries%2A>, meg kell várnia a bejegyzések a tömb elérése előtt vissza kell adni a teljes tömböt.</xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> </xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> Ezért, amikor dolgozunk sok fájlok és könyvtárak, <xref:System.IO.Directory.EnumerateFiles%2A>hatékonyabb.</xref:System.IO.Directory.EnumerateFiles%2A>       Ez a módszer megegyezik <xref:System.IO.Directory.GetFileSystemEntries%2A>a csillag (*) határoz meg a keresési minta.</xref:System.IO.Directory.GetFileSystemEntries%2A>       A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files and subdirectories in a user-specified location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#1](~/add/codesnippet/csharp/m-system.io.directory.ge_4_1.cs)]\n [!code-vb[System.IO.Directory#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_4_1.vb)]\n [!code-cpp[System.IO.Directory#1](~/add/codesnippet/cpp/m-system.io.directory.ge_4_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    return:
      type: System.String[]
      description: "A fájlok és alkönyvtárak a megadott könyvtár nevét tömbje, vagy ha nincs fájlok és alkönyvtárak találhatók üres tömb."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti <xref:System.IO.Path.GetInvalidPathChars*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  id: GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Fájlok és, hogy a keresési feltételeknek megfelelő mintát directory nevének tömbjét adja vissza a megadott elérési úton."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files matching a user-specified filter in a specific location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#2](~/add/codesnippet/csharp/m-system.io.directory.ge_8_1.cs)]\n [!code-vb[System.IO.Directory#2](~/add/codesnippet/visualbasic/m-system.io.directory.ge_8_1.vb)]\n [!code-cpp[System.IO.Directory#2](~/add/codesnippet/cpp/m-system.io.directory.ge_8_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez található fájlok és könyvtárak nevei `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    return:
      type: System.String[]
      description: "Fájlok és a megadott keresési feltételeknek eleget tevő directory nevének tömbjét, vagy ha a fájlok vagy könyvtárak nem talál egy üres tömb."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust.       – vagy – <code>searchPattern</code> nem tartalmaz érvényes mintát."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Az összes fájl nevét és címtárnevek, amelyek megfelelnek a megadott elérési úton a keresési minta tömbjét adja vissza, és opcionálisan az alkönyvtárak keresése."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method."
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtárat, amelyben relatív vagy abszolút elérési útja Ez a karakterlánc nincs kis-és nagybetűket."
    - id: searchPattern
      type: System.String
      description: "A keresési karakterláncot az egyeztetéshez a fájlok és könyvtárak nevét `path`.  Ezt a paramétert tartalmazhatnak érvényes literál elérési utat és a helyettesítő karakter (* és?) (lásd a megjegyzések) karaktereket, de nem támogatja reguláris kifejezéseket."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Az egyik a számbavételi érték, amely megadja, hogy a keresési művelet tartalmaznia kell az aktuális könyvtárhoz, vagy minden alkönyvtár kell tartalmaznia.       Az alapértelmezett érték <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.String[]
      description: "A fájlok és könyvtár nevének, amelyek megfelelnek a megadott keresési feltételeknek, vagy egy üres tömb, ha a fájlok vagy könyvtárak nem található a fájl tömbjét."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Érvénytelen <xref href=&quot;System.IO.SearchOption&quot;> </xref> érték."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>Érvénytelen, például egy le nem képezett meghajtó hivatkozik."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>a rendszer a fájl nevét."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út, fájl, vagy egy kombinált meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A dátumot és időt adja vissza a megadott fájl vagy könyvtár történt legutóbbi hozzáférés."
  remarks: "> [!NOTE]> Ezt a módszert lehet, hogy egy pontatlan értéket visszaadnia, mert használ, amelynek értéke nem lehet folyamatosan frissíteni az operációs rendszer natív függvények.       Ez a módszer megegyezik a <xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>.</xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>       Ha a könyvtár ismertetett a `path` paraméter nem létezik, ez a módszer ad vissza, 12:00 éjféltől. január 1, i.. 1601. (SZ) Helyi idejéhez igazítva egyezményes világidő (UTC) szerint.       A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `GetLastAccessTime`.  \n  \n [!code-cpp[Dir_GetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.ge_6_1.cpp)]\n [!code-vb[Dir_GetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_6_1.vb)]\n [!code-cs[Dir_GetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.ge_6_1.cs)]"
  syntax:
    content: public static DateTime GetLastAccessTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelynek hozzáférés dátuma és időpontja tájékoztatást kaphat."
    return:
      type: System.DateTime
      description: "A dátumot és időpontot, a megadott fájl vagy könyvtár szerkezetet történt legutóbbi hozzáférés. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.GetLastAccessTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <code> path </code> paraméter formátuma érvénytelen."
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Adja vissza dátum és idő egyezményes világidő (UTC) formátumban, hogy a megadott fájl vagy könyvtár történt legutóbbi hozzáférés."
  remarks: "> [!NOTE]> Ezt a módszert lehet, hogy egy pontatlan értéket visszaadnia, mert használ, amelynek értéke nem lehet folyamatosan frissíteni az operációs rendszer natív függvények.       Ha a könyvtár ismertetett a `path` paraméter nem létezik, ez a módszer ad vissza, 12:00 éjféltől. január 1, i.. 1601. (SZ) Egyezményes világidő (UTC).       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_9_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_9_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_9_1.vb)]"
  syntax:
    content: public static DateTime GetLastAccessTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelynek hozzáférés dátuma és időpontja tájékoztatást kaphat."
    return:
      type: System.DateTime
      description: "A dátumot és időpontot, a megadott fájl vagy könyvtár szerkezetet történt legutóbbi hozzáférés. Ez az érték UTC idő szerint van megadva."
  overload: System.IO.Directory.GetLastAccessTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <code> path </code> paraméter formátuma érvénytelen."
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A dátumot és időt adja vissza a megadott fájl vagy könyvtár utolsó írása volt."
  remarks: "> [!NOTE]> Ezt a módszert lehet, hogy egy pontatlan értéket visszaadnia, mert használ, amelynek értéke nem lehet folyamatosan frissíteni az operációs rendszer natív függvények.       Ha a könyvtár ismertetett a `path` paraméter nem létezik, ez a módszer ad vissza, 12:00 éjféltől. január 1, i.. 1601. (SZ) Helyi idejéhez igazítva egyezményes világidő (UTC) szerint.       A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `GetLastWriteTime`.  \n  \n [!code-cs[Dir_GetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.ge_14_1.cs)]\n [!code-cpp[Dir_GetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.ge_14_1.cpp)]\n [!code-vb[Dir_GetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_14_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelyre a módosítás dátuma és időpontja információkhoz."
    return:
      type: System.DateTime
      description: "Olyan struktúrában, amelynek a dátumot és időpontot, a megadott fájl vagy könyvtár utolsó lett írva. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.GetLastWriteTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Adja vissza dátum és idő, egyezményes világidő (UTC) formátumban, amely a megadott fájl vagy könyvtár utolsó írása volt."
  remarks: "> [!NOTE]> Ezt a módszert lehet, hogy egy pontatlan értéket visszaadnia, mert használ, amelynek értéke nem lehet folyamatosan frissíteni az operációs rendszer natív függvények.       Ha a könyvtár ismertetett a `path` paraméter nem létezik, ez a módszer ad vissza, 12:00 éjféltől. január 1, i.. 1601. (SZ) Egyezményes világidő (UTC).       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_2_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_2_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_2_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelyre a módosítás dátuma és időpontja információkhoz."
    return:
      type: System.DateTime
      description: "Olyan struktúrában, amelynek a dátumot és időpontot, a megadott fájl vagy könyvtár utolsó lett írva. Ez az érték UTC idő szerint van megadva."
  overload: System.IO.Directory.GetLastWriteTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  platform:
  - net462
- uid: System.IO.Directory.GetLogicalDrives
  id: GetLogicalDrives
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekéri a nevét, a logikai meghajtó a számítógépen, a képernyőn &quot;&lt;meghajtóbetűjelet&gt;:\\&quot;."
  remarks: "GetLogicalDrives adja vissza az összes elérhető meghajtójára adott gépen, beleértve a hajlékonylemez-meghajtó és valamelyik optikai meghajtó.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetLogicalDrives method to assign the name of each drive on the calling computer to an array of strings. Each member of this string array is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#3](~/add/codesnippet/csharp/m-system.io.directory.ge_3_1.cs)]\n [!code-vb[System.IO.Directory#3](~/add/codesnippet/visualbasic/m-system.io.directory.ge_3_1.vb)]\n [!code-cpp[System.IO.Directory#3](~/add/codesnippet/cpp/m-system.io.directory.ge_3_1.cpp)]"
  syntax:
    content: public static string[] GetLogicalDrives ();
    parameters: []
    return:
      type: System.String[]
      description: "A logikai meghajtó a számítógépen."
  overload: System.IO.Directory.GetLogicalDrives*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel (például lemezhiba)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  platform:
  - net462
- uid: System.IO.Directory.GetParent(System.String)
  id: GetParent(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Lekérdezi a megadott elérési út, beleértve a abszolút és a relatív elérési utat a szülőkönyvtárat."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the `path` parameter before getting the directory.  \n  \n The string returned by this method consists of all characters in the path up to, but not including, the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" to GetParent returns \"C:\\Directory\\SubDirectory\". Passing \"C:\\Directory\\SubDirectory\" returns \"C:\\Directory\". However, passing \"C:\\Directory\\SubDirectory\\\\\" returns \"C:\\Directory\\SubDirectory\", because the ending directory separator is after \"SubDirectory\".  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetParent method to retrieve the parent directory of a user-specified location, \"path\". The value returned by the GetParent method is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#4](~/add/codesnippet/csharp/m-system.io.directory.ge_5_1.cs)]\n [!code-vb[System.IO.Directory#4](~/add/codesnippet/visualbasic/m-system.io.directory.ge_5_1.vb)]\n [!code-cpp[System.IO.Directory#4](~/add/codesnippet/cpp/m-system.io.directory.ge_5_1.cpp)]"
  syntax:
    content: public static System.IO.DirectoryInfo GetParent (string path);
    parameters:
    - id: path
      type: System.String
      description: "Az elérési útját olvassa be a szülőkönyvtárat."
    return:
      type: System.IO.DirectoryInfo
      description: "A szülőkönyvtárat vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha <code> path </code> a gyökérkönyvtár, beleértve az UNC-kiszolgáló vagy a megosztási név gyökérmappájában."
  overload: System.IO.Directory.GetParent*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A megadott könyvtár <code> path </code> csak olvasható."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út nem található."
  platform:
  - net462
- uid: System.IO.Directory.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Egy fájl vagy könyvtár és annak tartalmát áthelyezi egy új helyre."
  remarks: "This method creates a new directory with the name specified by `destDirName` and moves the contents of `sourceDirName` to the newly created destination directory. If you try to move a directory to a directory that already exists, an <xref:System.IO.IOException> will occur. For example, an exception will occur if you try to move c:\\mydir to c:\\public, and c:\\public already exists. Alternatively, you could specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, provided that \"mydir\" does not exist under \"c:\\\\\\public\", or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n The `sourceDirName` and `destDirName` arguments are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the path parameters before moving the directory.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/m-system.io.directory.mo_1.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/m-system.io.directory.mo_1.cs)]"
  syntax:
    content: public static void Move (string sourceDirName, string destDirName);
    parameters:
    - id: sourceDirName
      type: System.String
      description: "A fájl vagy könyvtár áthelyezése elérési útja"
    - id: destDirName
      type: System.String
      description: "Az új hely elérési útja `sourceDirName`. Ha `sourceDirName` majd egy olyan fájl, `destDirName` is be egy fájlnevet."
  overload: System.IO.Directory.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Kísérlet történt egy könyvtárat áthelyezése egy másik kötetre.       – vagy – <code> destDirName </code> már létezik.       – vagy – a <code> sourceDirName </code> és <code> destDirName </code> paraméterek tekintse meg ugyanaz a fájl vagy könyvtár.       – vagy – a könyvtár vagy egy fájlt egy másik folyamat használatban van."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirName</code>vagy <code>destDirName</code> egy nulla hosszúságú karakterlánc, csak szóközt tartalmaz, vagy egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirName</code>or <code>destDirName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út <code> sourceDirName </code> érvénytelen (például van egy le nem képezett meghajtón)."
  platform:
  - net462
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Hozzáférés-vezérlési lista (ACL) bejegyzés szerint alkalmazza a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objektum a megadott könyvtárba."
  remarks: "A SetAccessControl módszer vonatkozik a noninherited ACL listát jelölő fájl hozzáférés-vezérlési lista (ACL) bejegyzés.      > [!CAUTION] > A hozzáférés-vezérlési lista megadása a `directorySecurity` paraméter lecseréli a meglévő ACL-könyvtár. Engedélyek egy új felhasználó hozzáadásához használja a <xref:System.IO.Directory.GetAccessControl%2A>módszer a meglévő ACL beszerzéséhez, és módosítsa azt.</xref:System.IO.Directory.GetAccessControl%2A>       Hozzáférés-vezérlési Listában írja le, személyek és/vagy csoportot, akik rendelkeznek, vagy nincs jogosultsága, egy adott művelethez a megadott fájl vagy könyvtár. További információkért lásd: [hogyan: hozzáadása vagy eltávolítása a hozzáférés-vezérlési lista bejegyzések](~/add/includes/ajax-current-ext-md.md).       A SetAccessControl metódus csak továbbra is fennáll <xref:System.Security.AccessControl.DirectorySecurity>objektum létrehozása után módosított objektumok.</xref:System.Security.AccessControl.DirectorySecurity>  Ha egy <xref:System.Security.AccessControl.DirectorySecurity>objektum nem lett módosítva, azt nem maradnak meg a fájlhoz.</xref:System.Security.AccessControl.DirectorySecurity>  Ezért, nincs lehetőség a beolvasni egy <xref:System.Security.AccessControl.DirectorySecurity>objektumra egy fájlból, és alkalmazza újra ugyanazt az objektumot egy másik fájlba.</xref:System.Security.AccessControl.DirectorySecurity>       A hozzáférés-vezérlési lista adatokat másolhat egy fájlt egy másikra: 1.  Használja a <xref:System.IO.Directory.GetAccessControl%2A>metódusának segítéségével lekérheti a <xref:System.Security.AccessControl.DirectorySecurity>objektum a forrásfájlból.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.IO.Directory.GetAccessControl%2A>      2.  Hozzon létre egy új <xref:System.Security.AccessControl.DirectorySecurity>objektum a célfájl.</xref:System.Security.AccessControl.DirectorySecurity>      3.  Használja a <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>vagy <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>módszer a forrás <xref:System.Security.AccessControl.DirectorySecurity>objektumhoz a hozzáférés-vezérlési lista adatokat beolvasni.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>      4.  Használja a <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>vagy <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>metódus az információ másolásához beolvasni a 3. lépésben a cél- <xref:System.Security.AccessControl.DirectorySecurity>objektum.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>      5.  A célkiszolgálón állítsa <xref:System.Security.AccessControl.DirectorySecurity>objektum a SetAccessControl metódussal a fájlhoz.</xref:System.Security.AccessControl.DirectorySecurity>       NTFS-környezetekben <xref:System.Security.AccessControl.FileSystemRights>és <xref:System.Security.AccessControl.FileSystemRights>Ha a felhasználó rendelkezik-e a felhasználó számára biztosított <xref:System.Security.AccessControl.FileSystemRights>jogok a szülőmappától.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> Megtagadni <xref:System.Security.AccessControl.FileSystemRights>és <xref:System.Security.AccessControl.FileSystemRights>, megtagadása <xref:System.Security.AccessControl.FileSystemRights>a a szülőkönyvtárat.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights>"
  example:
  - "The following example uses the <xref:System.IO.Directory.GetAccessControl%2A> and the SetAccessControl methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/57b88d80-60eb-4344-b644-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/57b88d80-60eb-4344-b644-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/57b88d80-60eb-4344-b644-_1.vb)]"
  syntax:
    content: public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár hozzáadása vagy eltávolítása a hozzáférés-vezérlési lista (ACL) bejegyzés a."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objektum, amely leírja a directory által ismertetett alkalmazandó hozzáférés-vezérlési lista bejegyzése a `path` paraméter."
  overload: System.IO.Directory.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A könyvtár nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> path </code> érvénytelen volt."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A jelenlegi folyamat nem rendelkezik hozzáféréssel a megadott könyvtár <code> path </code>.       – vagy – az aktuális folyamat nem rendelkezik megfelelő jogosultsággal az ACL-bejegyzéssel beállításához."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows 2000 vagy újabb."
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Beállítja a létrehozásának dátuma és ideje a megadott fájl vagy könyvtár."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_4_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_4_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_4_1.vb)]"
  syntax:
    content: public static void SetCreationTime (string path, DateTime creationTime);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelynek a létrehozási dátumot és időpontot adatainak beállításához."
    - id: creationTime
      type: System.DateTime
      description: "A dátum és idő a fájl vagy könyvtár utolsó írni. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.SetCreationTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>Adja meg a dátumok és időpontok ehhez a művelethez engedélyezett tartományán kívül eső érték."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows NT vagy újabb."
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Beállítja a létrehozásának dátuma és időpontja, egyezményes világidő (UTC) formátumban, a megadott fájl vagy könyvtár."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelynek a létrehozási dátumot és időpontot adatainak beállításához."
    - id: creationTimeUtc
      type: System.DateTime
      description: "A dátum és idő a könyvtár vagy fájl jött létre. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.SetCreationTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>Adja meg a dátumok és időpontok ehhez a művelethez engedélyezett tartományán kívül eső érték."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows NT vagy újabb."
  platform:
  - net462
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  id: SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "A megadott könyvtár az alkalmazás aktuális munkakönyvtárban állítja be."
  remarks: "Ha az alkalmazás leállása munkakönyvtára visszakerül az eredeti helyükre (a könyvtárat, amelyben a folyamat elindításának).       A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Végén szóközök törlődnek a `path` paraméter a könyvtár beállítása előtt.       A `path` paraméter nincs a kis-és nagybetűket.       Ha például, hogy (&quot;válasz:&quot; a hajlékonylemez-meghajtó) vagy &quot;E&quot;, a CD-ROM-meghajtóval rendelkező cserélhető adathordozó meghajtó állít a könyvtárat, meghatározhatja, hogy a meghajtó használatával készen áll a <xref:System.IO.DriveInfo.IsReady%2A>tulajdonság.</xref:System.IO.DriveInfo.IsReady%2A>"
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.se_2_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.se_2_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_2_1.vb)]"
  syntax:
    content: public static void SetCurrentDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "Az elérési útja, amelyhez az aktuális munkakönyvtárban van beállítva."
  overload: System.IO.Directory.SetCurrentDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba lépett fel."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó nem rendelkezik a nem felügyelt kód eléréséhez szükséges engedélyekkel."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott könyvtár nem található."
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Beállítja a dátum és idő az adott fájl vagy könyvtár történt legutóbbi hozzáférés."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `SetLastAccessTime`.  \n  \n [!code-cs[Dir_SetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.se_1_1.cs)]\n [!code-cpp[Dir_SetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.se_1_1.cpp)]\n [!code-vb[Dir_SetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_1_1.vb)]"
  syntax:
    content: public static void SetLastAccessTime (string path, DateTime lastAccessTime);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelynek a hozzáférés dátuma és időpontja adatainak beállításához."
    - id: lastAccessTime
      type: System.DateTime
      description: "A hozzáférés dátuma és időpontja beállítani az értéket tartalmazó objektum `path`. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.SetLastAccessTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows NT vagy újabb."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTime</code>Adja meg a dátumok és időpontok ehhez a művelethez engedélyezett tartományán kívül eső érték."
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Beállítja a dátumát és idejét, az egyezményes világidő (UTC) formátumban, hogy a megadott fájl vagy könyvtár történt legutóbbi hozzáférés."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_0_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_0_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_0_1.vb)]"
  syntax:
    content: public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "A fájl vagy könyvtár, amelynek a hozzáférés dátuma és időpontja adatainak beállításához."
    - id: lastAccessTimeUtc
      type: System.DateTime
      description: "A hozzáférés dátuma és időpontja beállítani az értéket tartalmazó objektum `path`. Ez az érték UTC idő szerint van megadva."
  overload: System.IO.Directory.SetLastAccessTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows NT vagy újabb."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTimeUtc</code>Adja meg a dátumok és időpontok ehhez a művelethez engedélyezett tartományán kívül eső érték."
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Beállítja a dátum és idő könyvtár utolsó írni."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `SetLastWriteTime`.  \n  \n [!code-cpp[Dir_SetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.se_3_1.cpp)]\n [!code-cs[Dir_SetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.se_3_1.cs)]\n [!code-vb[Dir_SetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_3_1.vb)]"
  syntax:
    content: public static void SetLastWriteTime (string path, DateTime lastWriteTime);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár elérési útját."
    - id: lastWriteTime
      type: System.DateTime
      description: "A dátum és idő, a címtár utolsó írni. Ezt az értéket a helyi idő van kifejezve."
  overload: System.IO.Directory.SetLastWriteTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows NT vagy újabb."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTime</code>Adja meg a dátumok és időpontok ehhez a művelethez engedélyezett tartományán kívül eső érték."
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Beállítja a dátum és idő, egyezményes világidő (UTC) formátumban, egy könyvtárat utolsó írni."
  remarks: "A `path` paraméter megengedett relatív vagy abszolút elérési út megadásához. Relatív elérési út az aktuális munkakönyvtárban viszonyítva értelmezi. Az aktuális munkakönyvtár, lásd: <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       A `path` paraméter nincs a kis-és nagybetűket.       A gyakori i/o-műveletek listájáért lásd: [gyakori i/o-műveletek](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_5_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_5_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_5_1.vb)]"
  syntax:
    content: public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "A könyvtár elérési útját."
    - id: lastWriteTimeUtc
      type: System.DateTime
      description: "A dátum és idő, a címtár utolsó írni. Ez az érték UTC idő szerint van megadva."
  overload: System.IO.Directory.SetLastWriteTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott elérési út nem található."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>egy nulla hosszúságú karakterlánc, vagy csak szóközt tartalmaz egy vagy több érvénytelen karaktereket tartalmaz. Érvénytelen karakterből állhat, és lekérdezheti a <xref:System.IO.Path.GetInvalidPathChars*> metódust."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. A Windows-alapú platformokon, például elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A hívó nem rendelkezik a szükséges engedélyekkel."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Windows NT vagy újabb."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTimeUtc</code>Adja meg a dátumok és időpontok ehhez a művelethez engedélyezett tartományán kívül eső érték."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.Directory.CreateDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.Directory.Delete(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.Directory.EnumerateFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.Exists(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
- uid: System.IO.Directory.GetAccessControl(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.Directory.GetCreationTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
- uid: System.IO.Directory.GetCurrentDirectory
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
- uid: System.IO.Directory.GetDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
- uid: System.IO.Directory.GetFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
- uid: System.IO.Directory.GetLogicalDrives
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
- uid: System.IO.Directory.GetParent(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
- uid: System.IO.Directory.Move(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
- uid: System.IO.Directory.CreateDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory
  nameWithType: Directory.CreateDirectory
- uid: System.IO.Directory.Delete*
  parent: System.IO.Directory
  isExternal: false
  name: Delete
  nameWithType: Directory.Delete
- uid: System.IO.Directory.EnumerateDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories
  nameWithType: Directory.EnumerateDirectories
- uid: System.IO.Directory.EnumerateFiles*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles
  nameWithType: Directory.EnumerateFiles
- uid: System.IO.Directory.EnumerateFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries
  nameWithType: Directory.EnumerateFileSystemEntries
- uid: System.IO.Directory.Exists*
  parent: System.IO.Directory
  isExternal: false
  name: Exists
  nameWithType: Directory.Exists
- uid: System.IO.Directory.GetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl
  nameWithType: Directory.GetAccessControl
- uid: System.IO.Directory.GetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime
  nameWithType: Directory.GetCreationTime
- uid: System.IO.Directory.GetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc
  nameWithType: Directory.GetCreationTimeUtc
- uid: System.IO.Directory.GetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory
  nameWithType: Directory.GetCurrentDirectory
- uid: System.IO.Directory.GetDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories
  nameWithType: Directory.GetDirectories
- uid: System.IO.Directory.GetDirectoryRoot*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot
  nameWithType: Directory.GetDirectoryRoot
- uid: System.IO.Directory.GetFiles*
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles
  nameWithType: Directory.GetFiles
- uid: System.IO.Directory.GetFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries
  nameWithType: Directory.GetFileSystemEntries
- uid: System.IO.Directory.GetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime
  nameWithType: Directory.GetLastAccessTime
- uid: System.IO.Directory.GetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc
  nameWithType: Directory.GetLastAccessTimeUtc
- uid: System.IO.Directory.GetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime
  nameWithType: Directory.GetLastWriteTime
- uid: System.IO.Directory.GetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc
  nameWithType: Directory.GetLastWriteTimeUtc
- uid: System.IO.Directory.GetLogicalDrives*
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives
  nameWithType: Directory.GetLogicalDrives
- uid: System.IO.Directory.GetParent*
  parent: System.IO.Directory
  isExternal: false
  name: GetParent
  nameWithType: Directory.GetParent
- uid: System.IO.Directory.Move*
  parent: System.IO.Directory
  isExternal: false
  name: Move
  nameWithType: Directory.Move
- uid: System.IO.Directory.SetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl
  nameWithType: Directory.SetAccessControl
- uid: System.IO.Directory.SetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime
  nameWithType: Directory.SetCreationTime
- uid: System.IO.Directory.SetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc
  nameWithType: Directory.SetCreationTimeUtc
- uid: System.IO.Directory.SetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory
  nameWithType: Directory.SetCurrentDirectory
- uid: System.IO.Directory.SetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime
  nameWithType: Directory.SetLastAccessTime
- uid: System.IO.Directory.SetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc
  nameWithType: Directory.SetLastAccessTimeUtc
- uid: System.IO.Directory.SetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime
  nameWithType: Directory.SetLastWriteTime
- uid: System.IO.Directory.SetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc
  nameWithType: Directory.SetLastWriteTimeUtc
