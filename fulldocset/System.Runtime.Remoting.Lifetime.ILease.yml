### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Lifetime.ILease
  id: ILease
  children:
  - System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.CurrentState
  - System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  - System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  - System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  langs:
  - csharp
  name: ILease
  nameWithType: ILease
  fullName: System.Runtime.Remoting.Lifetime.ILease
  type: Interface
  summary: "Definiál egy élettartama bérleti objektumot, amely a távoli eljáráshívás élettartama szolgáltatás által használt."
  remarks: "Elosztott szemétgyűjtési gyűjtemény vezérlők kiszolgálóalkalmazások törlésekor. Hagyományosan elosztott szemétgyűjtés hivatkozás számát, valamint a pingelés vezérlő használja. Ez jól működik, ha néhány ügyfél objektumonként, de nem működik jól, ha ügyfelek az egyes objektumok száma ezer van. Az élettartam szolgáltatás egy hagyományos elosztott szemétgyűjtő, és méretezik funkciót feltételezheti, megfelelő, ha az ügyfelek számát növeli.       Az élettartam szolgáltatás társítja a címbérlet minden távolról aktivált objektum. Amikor bérlete lejár, a rendszer eltávolítja az objektumhoz. A címbérlet adhatja meg, hogy az objektum rendelkezik-e végtelen élettartammal.       Minden egyes <xref:System.AppDomain>tartalmaz, amely felügyeli a tartomány a bérletek bérleti vezető.</xref:System.AppDomain> A bérleti manager rendszeres időközönként megvizsgálja a bérletek a lejárati idő. Ha lejárt a címbérlet, azt is kell megszakította a címbérlet mutató hivatkozás eltávolítását vagy megújítani az legalább egy, a címbérlet szponzorok meghívása.       A címbérlet tartalmaz, a házirendek meghatározó tulajdonságok és metódusok újítsa meg a bérleti idő. A bérlet elérhetővé teszi a ILease adaptert.       A ILease felülettel bemutató példa: [élettartama](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ILease
  implements: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  id: CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Lekérdezi a címbérlet hátralévő időt."
  syntax:
    content: public TimeSpan CurrentLeaseTime { get; }
    return:
      type: System.TimeSpan
      description: "A bérlet hátralévő idő mennyiségét."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  id: CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Lekérdezi az aktuális <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> a címbérlet."
  syntax:
    content: public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }
    return:
      type: System.Runtime.Remoting.Lifetime.LeaseState
      description: "Az aktuális <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> a címbérlet."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  id: InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Lekérdezi vagy beállítja a bérlet kezdeti időpontját."
  remarks: "Ha az InitialLeaseTime tulajdonság értéke <xref:System.TimeSpan?displayProperty=fullName>, majd a címbérlet sosem fog túllépi az időkorlátot, és a hozzá társított objektumot kell határozatlan.</xref:System.TimeSpan?displayProperty=fullName>"
  syntax:
    content: public TimeSpan InitialLeaseTime { get; set; }
    return:
      type: System.TimeSpan
      description: "A bérlet kezdeti időpontját."
  overload: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "A megbízó a címbérlet regisztrálja a címbérlet megújítása nélkül."
  remarks: "A megbízó regisztrálva van az aktuális metódust, ha nem hosszabbítja meg bérleti idejét."
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "A megbízó visszahívási objektum."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "A megbízó a címbérlet regisztrálja, és azt a megadott <xref:System.TimeSpan>.</xref:System.TimeSpan> megújítja"
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "A megbízó visszahívási objektum."
    - id: renewalTime
      type: System.TimeSpan
      description: "Mennyi ideig által a címbérlet megújítása."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  id: Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "A címbérlet megújítása a megadott időpontban."
  remarks: "A bérleti idő a maximális értéke a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>vagy a jelenlegi időpontnál a megújítási idejének.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan Renew (TimeSpan renewalTime);
    parameters:
    - id: renewalTime
      type: System.TimeSpan
      description: "Mennyi ideig által a címbérlet megújítása."
    return:
      type: System.TimeSpan
      description: "Az új lejárati időt a címbérlet."
  overload: System.Runtime.Remoting.Lifetime.ILease.Renew*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  id: RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Lekérdezi vagy beállítja azt az időt, amely szerint a távoli objektum hívása megújítja a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  remarks: "Ha a távoli objektumok hívása, az élettartam szolgáltatás hozzáadja a RenewOnCallTime a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>csak akkor, ha a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>a RenewOnCallTime alá esett.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> </xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Egymást követő hívások ezért ne növelje a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>kötött nélkül.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Ehelyett közvetlenül semmilyen hívásban, után a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>garantált, hogy a RenewOnCallTime vagy hosszabb.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan RenewOnCallTime { get; set; }
    return:
      type: System.TimeSpan
      description: "Ennyi idő alatt, amely szerint a távoli objektum hívása megújítja a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  overload: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  id: SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Lekérdezi vagy beállítja a megbízó vissza a bérlet megújítási idejének a várakozási idő."
  remarks: "Ha a SponsorshipTimeout <xref:System.TimeSpan?displayProperty=fullName>, akkor a címbérlet nem lépnek szponzorok.</xref:System.TimeSpan?displayProperty=fullName>       Ha a megbízó nem válaszol az időkorláton belül a címbérlet megújítása hívás, inaktív adottnak, és törlődik az aktuális címbérlet szponzorok listája."
  syntax:
    content: public TimeSpan SponsorshipTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "A várakozási idő a megbízó és a bérlet megújítási idejének vissza a mennyisége."
  overload: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "A megbízó távolít el egy megbízó."
  syntax:
    content: public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "A bérleti megbízó regisztrációjának törlése."
  overload: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A közvetlen hívónak hivatkozni kell a felületen keresztül a hívást, és nincs engedélye infrastruktúra."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.LeaseState
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: LeaseState
  nameWithType: LeaseState
  fullName: System.Runtime.Remoting.Lifetime.LeaseState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ISponsor
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: ISponsor
  nameWithType: ISponsor
  fullName: System.Runtime.Remoting.Lifetime.ISponsor
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register
  nameWithType: ILease.Register
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew
  nameWithType: ILease.Renew
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister
  nameWithType: ILease.Unregister
