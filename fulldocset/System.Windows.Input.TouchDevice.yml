### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.TouchDevice
  id: TouchDevice
  children:
  - System.Windows.Input.TouchDevice.#ctor(System.Int32)
  - System.Windows.Input.TouchDevice.Activate
  - System.Windows.Input.TouchDevice.Activated
  - System.Windows.Input.TouchDevice.ActiveSource
  - System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  - System.Windows.Input.TouchDevice.Captured
  - System.Windows.Input.TouchDevice.CaptureMode
  - System.Windows.Input.TouchDevice.Deactivate
  - System.Windows.Input.TouchDevice.Deactivated
  - System.Windows.Input.TouchDevice.DirectlyOver
  - System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.Id
  - System.Windows.Input.TouchDevice.IsActive
  - System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  - System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)
  - System.Windows.Input.TouchDevice.OnManipulationStarted
  - System.Windows.Input.TouchDevice.ReportDown
  - System.Windows.Input.TouchDevice.ReportMove
  - System.Windows.Input.TouchDevice.ReportUp
  - System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)
  - System.Windows.Input.TouchDevice.Synchronize
  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id
  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  - System.Windows.Input.TouchDevice.Target
  - System.Windows.Input.TouchDevice.Updated
  langs:
  - csharp
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
  type: Class
  summary: "Egyetlen jelölő touch érintőképernyővel egy életének által előállított bemenet."
  remarks: "Általában használatával éri el a TouchDevice a <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName>tulajdonság.</xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> A TouchDevice képernyőn egyetlen egyetlen jelöli. Ha több simításokat meg adva, használja a <xref:System.Windows.Input.TouchDevice.Id%2A>tulajdonságot megkülönböztetését.</xref:System.Windows.Input.TouchDevice.Id%2A>      > [!NOTE] > Ez az osztály tartalmaz egy öröklési igény szerint az összes tagjára érvényes osztály szintjén. A <xref:System.Security.SecurityException>fordul elő, ha a származtatott osztály nincs engedélye a teljesen megbízható.</xref:System.Security.SecurityException> Biztonsági követelményeivel kapcsolatos további információkért lásd: [hivatkozás iránti igények kielégítése érdekében](~/add/includes/ajax-current-ext-md.md) és [öröklési iránti igények kielégítése érdekében](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."
  example:
  - "The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers on a touchscreen. Each touch is represented by a TouchDevice in the <xref:System.Windows.Input.TouchEventArgs>. The pattern is created by drawing a line between the touch points that are provided by the touches. This example requires a Windows Touch–compatible screen.  \n  \n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a grid, and attaches the event handlers for the touch events.  \n  \n [!code-xml[TouchEventsSample#000](~/add/codesnippet/xaml/wpftoucheventssample/mainwindow.xaml#000)]  \n  \n The following code handles the touch events. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the TouchDevice is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the TouchDevice is released. When a touch moves on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n [!code-vb[TouchEventsSample#100](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#100)]\n [!code-cs[TouchEventsSample#100](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#100)]"
  syntax:
    content: 'public abstract class TouchDevice : System.Windows.Input.InputDevice, System.Windows.Input.IManipulator'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.Input.InputDevice
  implements:
  - System.Windows.Input.IManipulator
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: TouchDevice(Int32)
  nameWithType: TouchDevice.TouchDevice(Int32)
  fullName: System.Windows.Input.TouchDevice.TouchDevice(Int32)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Származtatott osztályok inicializálása konstruktorok hívása a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> osztály."
  syntax:
    content: protected TouchDevice (int deviceId);
    parameters:
    - id: deviceId
      type: System.Int32
      description: "A touch eszköz egyedi azonosítója."
  overload: System.Windows.Input.TouchDevice.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Activate
  id: Activate
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Activate()
  nameWithType: TouchDevice.Activate()
  fullName: System.Windows.Input.TouchDevice.Activate()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hozzáadja a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> rendszer üzenetküldési bemenete."
  remarks: "Öröklő <xref:System.Windows.Input.TouchDevice>Ez a módszer az aktuális eszköz aktiválásához meg kell hívnia.</xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: protected void Activate ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.Activate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Az eszköz már aktiválva van."
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Activated
  id: Activated
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Activated
  nameWithType: TouchDevice.Activated
  fullName: System.Windows.Input.TouchDevice.Activated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Akkor következik be, amikor a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> a rendszer üzenetküldési bemeneti kerül."
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ActiveSource
  id: ActiveSource
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ActiveSource
  nameWithType: TouchDevice.ActiveSource
  fullName: System.Windows.Input.TouchDevice.ActiveSource
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Lekérdezi a <xref href=&quot;System.Windows.PresentationSource&quot;> </xref> , amely az jelentéskészítési bemenetet ehhez az eszközhöz."
  syntax:
    content: public override sealed System.Windows.PresentationSource ActiveSource { get; }
    return:
      type: System.Windows.PresentationSource
      description: "Ez az eszköz a megadott jelentő forrása."
  overload: System.Windows.Input.TouchDevice.ActiveSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)
  id: Capture(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Capture(IInputElement)
  nameWithType: TouchDevice.Capture(IInputElement)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A megadott elem egy touch használatával rögzíti a <xref href=&quot;System.Windows.Input.CaptureMode&quot;> </xref> rögzítési módot."
  remarks: "A <xref:System.Windows.Input.TouchDevice>nem rögzíthetők elemre, ha már egy másik elem lesz rögzítve.</xref:System.Windows.Input.TouchDevice>"
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchDown> events that occur on a <xref:System.Windows.Controls.Canvas>. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#110](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#110)]\n [!code-cs[TouchEventsSample#110](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#110)]"
  syntax:
    content: public bool Capture (System.Windows.IInputElement element);
    parameters:
    - id: element
      type: System.Windows.IInputElement
      description: "Az elem, amely a bemeneti touch rögzíti."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az elem nem tudja rögzíteni a touch; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.Capture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>element</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref>, <xref href=&quot;System.Windows.UIElement3D&quot;></xref>, or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  id: Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Capture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.Capture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement,CaptureMode)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A megadott elem egy touch készít a meghatározott segítségével <xref href=&quot;System.Windows.Input.CaptureMode&quot;> </xref>."
  remarks: "A <xref:System.Windows.Input.TouchDevice>nem rögzíthetők elemre, ha már egy másik elem lesz rögzítve.</xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: public bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);
    parameters:
    - id: element
      type: System.Windows.IInputElement
      description: "Az elem, amely a touch rögzíti."
    - id: captureMode
      type: System.Windows.Input.CaptureMode
      description: "A rögzítési-házirendet."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az elem nem tudja rögzíteni a touch; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.Capture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>element</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref>, <xref href=&quot;System.Windows.UIElement3D&quot;></xref>, or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Captured
  id: Captured
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Captured
  nameWithType: TouchDevice.Captured
  fullName: System.Windows.Input.TouchDevice.Captured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Az elem rögzített lekérdezi a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  remarks: ''
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the Captured property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#130](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#130)]\n [!code-cs[TouchEventsSample#130](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#130)]"
  syntax:
    content: public System.Windows.IInputElement Captured { get; }
    return:
      type: System.Windows.IInputElement
      description: "Az elem rögzített a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.Captured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.CaptureMode
  id: CaptureMode
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: CaptureMode
  nameWithType: TouchDevice.CaptureMode
  fullName: System.Windows.Input.TouchDevice.CaptureMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A rögzítési házirendjében lekérdezi a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  syntax:
    content: public System.Windows.Input.CaptureMode CaptureMode { get; }
    return:
      type: System.Windows.Input.CaptureMode
      description: "A rögzítési házirendjében a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.CaptureMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Deactivate
  id: Deactivate
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Deactivate()
  nameWithType: TouchDevice.Deactivate()
  fullName: System.Windows.Input.TouchDevice.Deactivate()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Eltávolítja a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> rendszer üzenetküldési bemeneti."
  remarks: "Öröklő <xref:System.Windows.Input.TouchDevice>Ez a módszer az aktuális eszköz inaktiválása meg kell hívnia.</xref:System.Windows.Input.TouchDevice>       A <xref:System.Windows.UIElement.TouchLeave>egy esemény jelenik meg a megfelelő nélkül <xref:System.Windows.UIElement.TouchUp>esemény.</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.UIElement.TouchLeave>"
  syntax:
    content: protected void Deactivate ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.Deactivate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Az eszköz nincs aktiválva."
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Deactivated
  id: Deactivated
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Deactivated
  nameWithType: TouchDevice.Deactivated
  fullName: System.Windows.Input.TouchDevice.Deactivated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Akkor következik be, amikor a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> a rendszer eltávolítja a rendszer üzenetküldési bemeneti."
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.DirectlyOver
  id: DirectlyOver
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: DirectlyOver
  nameWithType: TouchDevice.DirectlyOver
  fullName: System.Windows.Input.TouchDevice.DirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A touch kapcsolattartási ponton keresztül közvetlenül elem beolvasása."
  syntax:
    content: public System.Windows.IInputElement DirectlyOver { get; }
    return:
      type: System.Windows.IInputElement
      description: "Az elem, amely közvetlenül a touch kapcsolódási pontot."
  overload: System.Windows.Input.TouchDevice.DirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)
  id: GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchDevice.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Amikor felül van bírálva a származtatott osztály, adja meg minden touch pontok között a legtöbb legutóbbi és az előző összegyűjtött események touch."
  syntax:
    content: public abstract System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "Az elem, amely meghatározza a koordináta területet."
    return:
      type: System.Windows.Input.TouchPointCollection
      description: "Minden touch pontok között a legtöbb legutóbbi és az előző összegyűjtött események touch."
  overload: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)
  id: GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchDevice.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetTouchPoint(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A megadott elem relatív touch eszköz aktuális helyét adja vissza."
  syntax:
    content: public abstract System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "Az elem, amely meghatározza a koordináta területet."
    return:
      type: System.Windows.Input.TouchPoint
      description: "A megadott elem relatív a touch eszköz aktuális helyzete."
  overload: System.Windows.Input.TouchDevice.GetTouchPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Id
  id: Id
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Id
  nameWithType: TouchDevice.Id
  fullName: System.Windows.Input.TouchDevice.Id
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Az egyedi azonosítója lekérdezi a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>, mert az operációs rendszer által biztosított."
  remarks: "A <xref:System.Windows.Input.TouchDevice>képernyőn egyetlen egyetlen jelöli.</xref:System.Windows.Input.TouchDevice> Ha több simításokat meg adva, az Id tulajdonság segítségével megkülönböztetését."
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchMove> events that occur on a <xref:System.Windows.Controls.Canvas>. When a touch moves on the <xref:System.Windows.Controls.Canvas>, the Id is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#120](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#120)]\n [!code-cs[TouchEventsSample#120](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#120)]"
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "Az egyedi azonosítója a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.IsActive
  id: IsActive
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: IsActive
  nameWithType: TouchDevice.IsActive
  fullName: System.Windows.Input.TouchDevice.IsActive
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Egy érték, amely azt jelzi, hogy az eszköz aktív lekérdezi."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az eszköz nem aktív. Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  id: OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: OnCapture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.OnCapture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.OnCapture(IInputElement,CaptureMode)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hívható meg, ha egy touch rögzített elemre."
  remarks: "A OnCapture metódusnak nincs alapértelmezett implementációja. A származtatott osztályt kell megadni, ha a touch bemeneti rögzített műveletek elvégzéséhez felülbírálható."
  syntax:
    content: protected virtual void OnCapture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);
    parameters:
    - id: element
      type: System.Windows.IInputElement
      description: "Az elem, amely a bemeneti touch rögzíti."
    - id: captureMode
      type: System.Windows.Input.CaptureMode
      description: "A rögzítési házirend."
  overload: System.Windows.Input.TouchDevice.OnCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)
  id: OnManipulationEnded(System.Boolean)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: OnManipulationEnded(Boolean)
  nameWithType: TouchDevice.OnManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.OnManipulationEnded(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hívható meg, ha manipuláció véget ért."
  syntax:
    content: protected virtual void OnManipulationEnded (bool cancel);
    parameters:
    - id: cancel
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a műveletet; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.OnManipulationEnded*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.OnManipulationStarted
  id: OnManipulationStarted
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: OnManipulationStarted()
  nameWithType: TouchDevice.OnManipulationStarted()
  fullName: System.Windows.Input.TouchDevice.OnManipulationStarted()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Nevű manipuláció indításakor."
  remarks: "A OnManipulationStarted metódusnak nincs alapértelmezett implementációja. A származtatott osztály által igényelt touch adatkezelési indításakor műveleteket felülbírálható."
  syntax:
    content: protected virtual void OnManipulationStarted ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.OnManipulationStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ReportDown
  id: ReportDown
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ReportDown()
  nameWithType: TouchDevice.ReportDown()
  fullName: System.Windows.Input.TouchDevice.ReportDown()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A jelentéseket, hogy egy touch elemen kattintanak."
  remarks: "Öröklő <xref:System.Windows.Input.TouchDevice>előléptetése ezt a metódust meg kell hívnia a <xref:System.Windows.UIElement.TouchDown>esemény.</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.TouchDevice> A <xref:System.Windows.UIElement.TouchEnter>esemény jelenik meg, mielőtt a <xref:System.Windows.UIElement.TouchDown>esemény.</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.UIElement.TouchEnter>"
  syntax:
    content: protected bool ReportDown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Windows.UIElement.TouchDown&quot;> </xref> esemény volt kezelt; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.ReportDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ReportMove
  id: ReportMove
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ReportMove()
  nameWithType: TouchDevice.ReportMove()
  fullName: System.Windows.Input.TouchDevice.ReportMove()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Jelzi, hogy egy touch áthelyezése egy elem között."
  remarks: "Öröklő <xref:System.Windows.Input.TouchDevice>előléptetése ezt a metódust meg kell hívnia a <xref:System.Windows.UIElement.TouchMove>esemény.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: protected bool ReportMove ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Windows.UIElement.TouchMove&quot;> </xref> esemény volt kezelt; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.ReportMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ReportUp
  id: ReportUp
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ReportUp()
  nameWithType: TouchDevice.ReportUp()
  fullName: System.Windows.Input.TouchDevice.ReportUp()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A jelentéseket, hogy az elem egy touch többször."
  remarks: "Öröklő <xref:System.Windows.Input.TouchDevice>előléptetése ezt a metódust meg kell hívnia a <xref:System.Windows.UIElement.TouchUp>esemény.</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.Input.TouchDevice> A <xref:System.Windows.UIElement.TouchLeave>esemény jelenik meg, miután a <xref:System.Windows.UIElement.TouchUp>esemény.</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.UIElement.TouchLeave>"
  syntax:
    content: protected bool ReportUp ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Windows.UIElement.TouchUp&quot;> </xref> esemény volt kezelt; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.ReportUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)
  id: SetActiveSource(System.Windows.PresentationSource)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: SetActiveSource(PresentationSource)
  nameWithType: TouchDevice.SetActiveSource(PresentationSource)
  fullName: System.Windows.Input.TouchDevice.SetActiveSource(PresentationSource)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Beállítja a <xref href=&quot;System.Windows.PresentationSource&quot;> </xref> , amely az jelentéskészítési bemenetet ehhez az eszközhöz."
  syntax:
    content: protected void SetActiveSource (System.Windows.PresentationSource activeSource);
    parameters:
    - id: activeSource
      type: System.Windows.PresentationSource
      description: "A forrás, amely jelent adjon meg ehhez az eszközhöz."
  overload: System.Windows.Input.TouchDevice.SetActiveSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Synchronize
  id: Synchronize
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Synchronize()
  nameWithType: TouchDevice.Synchronize()
  fullName: System.Windows.Input.TouchDevice.Synchronize()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Kényszeríti a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> szinkronizálni az alapul szolgáló felhasználói felület touch pontok."
  remarks: "A felhasználói felület szinkronizálása az alapul szolgáló touch pozíciók okozhat <xref:System.Windows.UIElement.TouchMove>események felmerülő.</xref:System.Windows.UIElement.TouchMove>"
  syntax:
    content: public void Synchronize ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.Synchronize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  id: System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  isEii: true
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: System.Windows.Input.IManipulator.GetPosition(IInputElement)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A helyét adja vissza a <xref href=&quot;System.Windows.Input.IManipulator&quot;> </xref> objektum."
  remarks: "Ez a tag egy explicit illesztőfelületet tag megvalósítása. Használat csak akkor, ha a <xref:System.Windows.Input.TouchDevice>példány típusúvá egy <xref:System.Windows.Input.IManipulator>felületet.</xref:System.Windows.Input.IManipulator> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: System.Windows.Point IManipulator.GetPosition (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "Az elem a határoló használják az pozíciójának kiszámítása a <xref href=&quot;System.Windows.Input.IManipulator&quot;> </xref>."
    return:
      type: System.Windows.Point
      description: "Pozíciója a <xref href=&quot;System.Windows.Input.IManipulator&quot;> </xref> objektum."
  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id
  id: System#Windows#Input#IManipulator#Id
  isEii: true
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: System.Windows.Input.IManipulator.Id
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.Id
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Az egyedi azonosítója lekérdezi a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> , az operációs rendszer által biztosított."
  remarks: "Ez a tag egy explicit illesztőfelületet tag megvalósítása. Használat csak akkor, ha a <xref:System.Windows.Input.TouchDevice>példány típusúvá egy <xref:System.Windows.Input.IManipulator>felületet.</xref:System.Windows.Input.IManipulator> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: int System.Windows.Input.IManipulator.Id { get; }
    return:
      type: System.Int32
      description: "Az egyedi azonosítója a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  id: System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  isEii: true
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Akkor következik be, amikor manipuláció véget ért."
  remarks: "Ez a tag egy explicit illesztőfelületet tag megvalósítása. Használat csak akkor, ha a <xref:System.Windows.Input.TouchDevice>példány típusúvá egy <xref:System.Windows.Input.IManipulator>felületet.</xref:System.Windows.Input.IManipulator> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: void IManipulator.ManipulationEnded (bool cancel);
    parameters:
    - id: cancel
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a műveletet; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Target
  id: Target
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Target
  nameWithType: TouchDevice.Target
  fullName: System.Windows.Input.TouchDevice.Target
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Az elem, amely a lekérdezi a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  syntax:
    content: public override sealed System.Windows.IInputElement Target { get; }
    return:
      type: System.Windows.IInputElement
      description: "Az elem, amely a bemeneti megkapja a <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>."
  overload: System.Windows.Input.TouchDevice.Target*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Updated
  id: Updated
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Updated
  nameWithType: TouchDevice.Updated
  fullName: System.Windows.Input.TouchDevice.Updated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Akkor fordul elő, amikor egy touch-üzenetet küld."
  syntax:
    content: public event EventHandler Updated;
    return:
      type: System.EventHandler
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputDevice
  isExternal: false
  name: System.Windows.Input.InputDevice
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.TouchDevice.#ctor(System.Int32)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: TouchDevice(Int32)
  nameWithType: TouchDevice.TouchDevice(Int32)
  fullName: System.Windows.Input.TouchDevice.TouchDevice(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.TouchDevice.Activate
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Activate()
  nameWithType: TouchDevice.Activate()
  fullName: System.Windows.Input.TouchDevice.Activate()
- uid: System.Windows.Input.TouchDevice.Activated
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Activated
  nameWithType: TouchDevice.Activated
  fullName: System.Windows.Input.TouchDevice.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.TouchDevice.ActiveSource
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ActiveSource
  nameWithType: TouchDevice.ActiveSource
  fullName: System.Windows.Input.TouchDevice.ActiveSource
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Capture(IInputElement)
  nameWithType: TouchDevice.Capture(IInputElement)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Capture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.Capture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement,CaptureMode)
- uid: System.Windows.Input.CaptureMode
  parent: System.Windows.Input
  isExternal: false
  name: CaptureMode
  nameWithType: CaptureMode
  fullName: System.Windows.Input.CaptureMode
- uid: System.Windows.Input.TouchDevice.Captured
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Captured
  nameWithType: TouchDevice.Captured
  fullName: System.Windows.Input.TouchDevice.Captured
- uid: System.Windows.Input.TouchDevice.CaptureMode
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: CaptureMode
  nameWithType: TouchDevice.CaptureMode
  fullName: System.Windows.Input.TouchDevice.CaptureMode
- uid: System.Windows.Input.TouchDevice.Deactivate
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Deactivate()
  nameWithType: TouchDevice.Deactivate()
  fullName: System.Windows.Input.TouchDevice.Deactivate()
- uid: System.Windows.Input.TouchDevice.Deactivated
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Deactivated
  nameWithType: TouchDevice.Deactivated
  fullName: System.Windows.Input.TouchDevice.Deactivated
- uid: System.Windows.Input.TouchDevice.DirectlyOver
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: DirectlyOver
  nameWithType: TouchDevice.DirectlyOver
  fullName: System.Windows.Input.TouchDevice.DirectlyOver
- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchDevice.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(IInputElement)
- uid: System.Windows.Input.TouchPointCollection
  parent: System.Windows.Input
  isExternal: false
  name: TouchPointCollection
  nameWithType: TouchPointCollection
  fullName: System.Windows.Input.TouchPointCollection
- uid: System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchDevice.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetTouchPoint(IInputElement)
- uid: System.Windows.Input.TouchPoint
  parent: System.Windows.Input
  isExternal: false
  name: TouchPoint
  nameWithType: TouchPoint
  fullName: System.Windows.Input.TouchPoint
- uid: System.Windows.Input.TouchDevice.Id
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Id
  nameWithType: TouchDevice.Id
  fullName: System.Windows.Input.TouchDevice.Id
- uid: System.Windows.Input.TouchDevice.IsActive
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: IsActive
  nameWithType: TouchDevice.IsActive
  fullName: System.Windows.Input.TouchDevice.IsActive
- uid: System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnCapture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.OnCapture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.OnCapture(IInputElement,CaptureMode)
- uid: System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationEnded(Boolean)
  nameWithType: TouchDevice.OnManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.OnManipulationEnded(Boolean)
- uid: System.Windows.Input.TouchDevice.OnManipulationStarted
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationStarted()
  nameWithType: TouchDevice.OnManipulationStarted()
  fullName: System.Windows.Input.TouchDevice.OnManipulationStarted()
- uid: System.Windows.Input.TouchDevice.ReportDown
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportDown()
  nameWithType: TouchDevice.ReportDown()
  fullName: System.Windows.Input.TouchDevice.ReportDown()
- uid: System.Windows.Input.TouchDevice.ReportMove
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportMove()
  nameWithType: TouchDevice.ReportMove()
  fullName: System.Windows.Input.TouchDevice.ReportMove()
- uid: System.Windows.Input.TouchDevice.ReportUp
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportUp()
  nameWithType: TouchDevice.ReportUp()
  fullName: System.Windows.Input.TouchDevice.ReportUp()
- uid: System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: SetActiveSource(PresentationSource)
  nameWithType: TouchDevice.SetActiveSource(PresentationSource)
  fullName: System.Windows.Input.TouchDevice.SetActiveSource(PresentationSource)
- uid: System.Windows.Input.TouchDevice.Synchronize
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Synchronize()
  nameWithType: TouchDevice.Synchronize()
  fullName: System.Windows.Input.TouchDevice.Synchronize()
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.GetPosition(IInputElement)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.Id
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.Id
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
- uid: System.Windows.Input.TouchDevice.Target
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Target
  nameWithType: TouchDevice.Target
  fullName: System.Windows.Input.TouchDevice.Target
- uid: System.Windows.Input.TouchDevice.Updated
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Updated
  nameWithType: TouchDevice.Updated
  fullName: System.Windows.Input.TouchDevice.Updated
- uid: System.Windows.Input.TouchDevice.#ctor*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice.TouchDevice
- uid: System.Windows.Input.TouchDevice.Activate*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Activate
  nameWithType: TouchDevice.Activate
- uid: System.Windows.Input.TouchDevice.ActiveSource*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ActiveSource
  nameWithType: TouchDevice.ActiveSource
- uid: System.Windows.Input.TouchDevice.Capture*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Capture
  nameWithType: TouchDevice.Capture
- uid: System.Windows.Input.TouchDevice.Captured*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Captured
  nameWithType: TouchDevice.Captured
- uid: System.Windows.Input.TouchDevice.CaptureMode*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: CaptureMode
  nameWithType: TouchDevice.CaptureMode
- uid: System.Windows.Input.TouchDevice.Deactivate*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Deactivate
  nameWithType: TouchDevice.Deactivate
- uid: System.Windows.Input.TouchDevice.DirectlyOver*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: DirectlyOver
  nameWithType: TouchDevice.DirectlyOver
- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetIntermediateTouchPoints
  nameWithType: TouchDevice.GetIntermediateTouchPoints
- uid: System.Windows.Input.TouchDevice.GetTouchPoint*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetTouchPoint
  nameWithType: TouchDevice.GetTouchPoint
- uid: System.Windows.Input.TouchDevice.Id*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Id
  nameWithType: TouchDevice.Id
- uid: System.Windows.Input.TouchDevice.IsActive*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: IsActive
  nameWithType: TouchDevice.IsActive
- uid: System.Windows.Input.TouchDevice.OnCapture*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnCapture
  nameWithType: TouchDevice.OnCapture
- uid: System.Windows.Input.TouchDevice.OnManipulationEnded*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationEnded
  nameWithType: TouchDevice.OnManipulationEnded
- uid: System.Windows.Input.TouchDevice.OnManipulationStarted*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationStarted
  nameWithType: TouchDevice.OnManipulationStarted
- uid: System.Windows.Input.TouchDevice.ReportDown*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportDown
  nameWithType: TouchDevice.ReportDown
- uid: System.Windows.Input.TouchDevice.ReportMove*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportMove
  nameWithType: TouchDevice.ReportMove
- uid: System.Windows.Input.TouchDevice.ReportUp*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportUp
  nameWithType: TouchDevice.ReportUp
- uid: System.Windows.Input.TouchDevice.SetActiveSource*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: SetActiveSource
  nameWithType: TouchDevice.SetActiveSource
- uid: System.Windows.Input.TouchDevice.Synchronize*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Synchronize
  nameWithType: TouchDevice.Synchronize
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.GetPosition
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.Id
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.ManipulationEnded
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded
- uid: System.Windows.Input.TouchDevice.Target*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Target
  nameWithType: TouchDevice.Target
