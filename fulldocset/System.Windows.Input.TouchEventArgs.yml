### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.TouchEventArgs
  id: TouchEventArgs
  children:
  - System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)
  - System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)
  - System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)
  - System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.TouchEventArgs.TouchDevice
  langs:
  - csharp
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
  type: Class
  summary: "Adatokat biztosít a touch bemeneti események."
  remarks: "A következő események TouchEventArgs használja.      -   <xref:System.Windows.UIElement.TouchUp?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchDown?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchEnter?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchLeave?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchMove?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchUp?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchDown?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchEnter?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchLeave?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchMove?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchUp?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchDown?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchEnter?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchLeave?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchMove?displayProperty=fullName></xref:System.Windows.ContentElement.TouchMove?displayProperty=fullName></xref:System.Windows.ContentElement.TouchLeave?displayProperty=fullName></xref:System.Windows.ContentElement.TouchEnter?displayProperty=fullName></xref:System.Windows.ContentElement.TouchDown?displayProperty=fullName></xref:System.Windows.ContentElement.TouchUp?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchMove?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchLeave?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchEnter?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchDown?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchUp?displayProperty=fullName></xref:System.Windows.UIElement.TouchMove?displayProperty=fullName></xref:System.Windows.UIElement.TouchLeave?displayProperty=fullName></xref:System.Windows.UIElement.TouchEnter?displayProperty=fullName></xref:System.Windows.UIElement.TouchDown?displayProperty=fullName></xref:System.Windows.UIElement.TouchUp?displayProperty=fullName>"
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the <xref:System.Windows.Input.TouchDevice.Captured%2A> property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#130](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#130)]\n [!code-cs[TouchEventsSample#130](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#130)]"
  syntax:
    content: 'public class TouchEventArgs : System.Windows.Input.InputEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)
  id: '#ctor(System.Windows.Input.TouchDevice,System.Int32)'
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: TouchEventArgs(TouchDevice,Int32)
  nameWithType: TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
  fullName: System.Windows.Input.TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> osztály."
  syntax:
    content: public TouchEventArgs (System.Windows.Input.TouchDevice touchDevice, int timestamp);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "A bemeneti eszköz társítja ezt az eseményt."
    - id: timestamp
      type: System.Int32
      description: "Az az idő, amikor a bemeneti történt."
  overload: System.Windows.Input.TouchEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)
  id: GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Adja vissza minden touch pontok között a legtöbb legutóbbi és az előző összegyűjtött események touch."
  syntax:
    content: public System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "Az elem, amely meghatározza a koordináta területet."
    return:
      type: System.Windows.Input.TouchPointCollection
      description: "Minden touch pontok között a legtöbb legutóbbi és az előző összegyűjtött események touch."
  overload: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)
  id: GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchEventArgs.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetTouchPoint(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "A megadott elem relatív touch eszköz aktuális helyét adja vissza."
  syntax:
    content: public System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "Az elem, amely meghatározza a koordináta területet."
    return:
      type: System.Windows.Input.TouchPoint
      description: "A megadott elem relatív a touch eszköz aktuális helyzete."
  overload: System.Windows.Input.TouchEventArgs.GetTouchPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: TouchEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.TouchEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Az eseménykezelők hív meg típusra vonatkozó módon, ami növelheti a esemény rendszer hatékonyságát."
  remarks: "Ez a megvalósítás árnyékot a általános kezelő olyan <xref:System.EventHandler%601>típusú <xref:System.Windows.Input.TouchEventArgs>, majd meghívja a tőle</xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> Ez a megvalósítás minta és az okait kapcsolatos további információkért lásd: <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>és [irányított események áttekintése](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "Az általános kezelő típusra vonatkozó módon hívja."
    - id: genericTarget
      type: System.Object
      description: "A cél, amelyen a kezelő hívása."
  overload: System.Windows.Input.TouchEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.TouchDevice
  id: TouchDevice
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: TouchDevice
  nameWithType: TouchEventArgs.TouchDevice
  fullName: System.Windows.Input.TouchEventArgs.TouchDevice
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Lekérdezi a touch az eseményt létrehozó."
  remarks: ''
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the <xref:System.Windows.Input.TouchDevice.Captured%2A> property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#130](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#130)]\n [!code-cs[TouchEventsSample#130](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#130)]"
  syntax:
    content: public System.Windows.Input.TouchDevice TouchDevice { get; }
    return:
      type: System.Windows.Input.TouchDevice
      description: "Az eseményt létrehozó touch."
  overload: System.Windows.Input.TouchEventArgs.TouchDevice*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputEventArgs
  isExternal: false
  name: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchEventArgs(TouchDevice,Int32)
  nameWithType: TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
  fullName: System.Windows.Input.TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
- uid: System.Windows.Input.TouchPointCollection
  parent: System.Windows.Input
  isExternal: false
  name: TouchPointCollection
  nameWithType: TouchPointCollection
  fullName: System.Windows.Input.TouchPointCollection
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchEventArgs.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetTouchPoint(IInputElement)
- uid: System.Windows.Input.TouchPoint
  parent: System.Windows.Input
  isExternal: false
  name: TouchPoint
  nameWithType: TouchPoint
  fullName: System.Windows.Input.TouchPoint
- uid: System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: TouchEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.TouchEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.TouchEventArgs.TouchDevice
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchDevice
  nameWithType: TouchEventArgs.TouchDevice
  fullName: System.Windows.Input.TouchEventArgs.TouchDevice
- uid: System.Windows.Input.TouchEventArgs.#ctor*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs.TouchEventArgs
- uid: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetIntermediateTouchPoints
  nameWithType: TouchEventArgs.GetIntermediateTouchPoints
- uid: System.Windows.Input.TouchEventArgs.GetTouchPoint*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetTouchPoint
  nameWithType: TouchEventArgs.GetTouchPoint
- uid: System.Windows.Input.TouchEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: TouchEventArgs.InvokeEventHandler
- uid: System.Windows.Input.TouchEventArgs.TouchDevice*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchDevice
  nameWithType: TouchEventArgs.TouchDevice
