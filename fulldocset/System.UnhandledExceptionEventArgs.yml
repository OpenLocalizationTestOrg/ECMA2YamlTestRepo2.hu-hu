### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "Adja meg az esemény jelenik meg, ha egy kivételt, amely nem lett kezelve, bármely alkalmazás adatait."
  remarks: "UnhandledExceptionEventArgs hozzáférést biztosít a kivétel objektum-azt jelzi, hogy a közös nyelvi futtatókörnyezet leáll. A UnhandledExceptionEventArgs átadott paraméterek egyike <xref:System.UnhandledExceptionEventHandler>a a <xref:System.AppDomain.UnhandledException?displayProperty=fullName>esemény.</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       Esemény kezelő delegáltak kapcsolatos további információkért lásd: [események](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref> osztály a kivétel objektum és a közös nyelvi futtatókörnyezet lezárást jelzőt."
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "Nem kezelt kivétel."
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha leállítja a futtatókörnyezet; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "A nem kezelt kivétel objektum beolvasása."
  remarks: "Ez a tulajdonság típusa <xref:System.Object>helyett egy származó <xref:System.Exception>.</xref:System.Exception> </xref:System.Object> objektum beállítása/beolvasása. Bár a Common Language Specification szükséges összes kivétel típusa származik <xref:System.Exception>, lehetséges kell küldeni a kivételek az objektumok nem származik a <xref:System.Exception>.</xref:System.Exception> módszerek</xref:System.Exception> Használható ez a kivétel a következőket teheti:-alkalmazni a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>az attribútum egy <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>értékének `true` a szerelvény, amely tartalmazza az eseménykezelő.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> Ez burkolja minden kivétel nem származik a <xref:System.Exception>osztályt egy <xref:System.Runtime.CompilerServices.RuntimeWrappedException>objektum.</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> Ezután biztonságosan típuskonverziójához (C#) vagy (a Visual Basic nyelvben) konvertálni az objektumot a tulajdonság egy <xref:System.Exception>objektumot, és az eredeti kivételt objektum lekérése a <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>tulajdonság.</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> Vegye figyelembe, hogy néhány compilers – például a C# és Visual Basic compilers – automatikusan alkalmazza ezt az attribútumot.      -Konvertálja az objektumot, a tulajdonság egy <xref:System.Exception>objektum.</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "A nem kezelt kivétel objektum."
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Azt jelzi, hogy a közös nyelvi futtatókörnyezet leállítja."
  remarks: "Ez a tulajdonság visszaadja verziótól kezdve a .NET-keretrendszer 2.0-s verzióját, `true` a legtöbb kezeletlen kivételek, kivéve, ha az alkalmazás kompatibilitási jelző használata 1.0 és 1.1 működésének visszaállításához. A hiba oka, hogy a szálak szál készlet szálak, beleértve a kezeletlen kivételek engedélyezve legyenek-e természetesen folytatja ennek általában az alkalmazás bezárásakor eredményeképpen. További információ, beleértve az esetek, amelyben a futtatókörnyezet nem ér véget, listáját: [a szálak kezelt kivételek](~/add/includes/ajax-current-ext-md.md).      ## Fájlverzió-információkat a következő foglaltak azokra a .NET-keretrendszer 1.0 és 1.1: Ez a tulajdonság adja vissza `true` amikor kivétel érkezett, de nem kezeli, az alkalmazás fő szálnak. Ez a tulajdonság is adja vissza `true` Ha egy nem felügyelt szál végrehajtja a felügyelt kód, nem kezelt kivétel kap. Végül adja vissza ezt a tulajdonságot `false` szál készlet szálak és a felügyelt szálak létre az alkalmazások, mert 1.0 és 1.1 kezeletlen kivételeket az ilyen szálak, és figyelmen kívül hagyja azokat."
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha leállítja a futtatókörnyezet; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
