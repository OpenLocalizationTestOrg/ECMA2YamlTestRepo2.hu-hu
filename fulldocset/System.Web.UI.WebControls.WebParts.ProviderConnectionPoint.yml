### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Határozza meg a kapcsolódási pont objektum, amely lehetővé teszi a kiszolgálói vezérlőnek az ügyféllel való kapcsolat kialakításához-szolgáltatóként működik."
  remarks: "Minden kijelzők kapcsolat két kiszolgálói vezérlő között, a vezérlők objektummal kell rendelkeznie (többek között az egyéb követelmények) egy társított kapcsolat pont, amely lehetővé teszi a más vezérlő való kapcsolódáshoz és vagy adatokat szolgáltatni vagy felhasználni, attól függően, hogy a szolgáltató vagy a kapcsolat fogyasztói a következő vezérlő van kijelölve. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objektum általában hogyan vezérlő csatlakozhat egy másik vezérlő és oszthatnak meg az adatok részleteit tartalmazza.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> A vezérlő kapcsolaton keresztül a szolgáltatóként működő a szolgáltatáskapcsolódási pont ProviderConnectionPoint objektumnak kell lennie. A kijelzők kapcsolatok és a csatlakozási pontok részletekért lásd: a Lásd még szakaszban felsorolt témakörök.       ProviderConnectionPoint objektum létrehozásához, több lépésre szükség: 1.  Hozzon létre egy illesztőfelület. Ha egy szolgáltató megosztja az adatokat az ügyféllel, ilyeneket illesztőfelület példánya, és annak a példánynak ügyféllel való újracsatlakozást.      2.  A szolgáltató valósítja meg az illesztőfelületet. A <xref:System.Web.UI.WebControls.WebParts.WebPart>vagy egyéb kiszolgálói vezérlőnek (a kiszolgálói vezérlőnek bármilyen típusú egy <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zóna is használható) fogja tárolni a szolgáltatónak tartalmaznia kell az első lépésben létrehozott felületet.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Azonosítsa a visszahívási metódus. A szolgáltató egy metódust kell azonosítani a visszahívási metódus kapcsolatot létesíteni. Ez a módszer egy példányát a megvalósított illesztőfelülettel ügyféllel való adja vissza. A kijelzők módszer alapján azonosítja a szolgáltató egy visszahívási metódusa hoz adhat hozzá egy `ConnectionProvider` metaadat-attribútum (határozzák meg a <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>osztály) a metódus, amely visszaadja az illesztőfelület példánya.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Az attribútum hozzáadásakor csak szükséges paraméter egy megjelenítési nevet a szolgáltatói csatlakozási pont használandó. Választható paraméterek: kettőhöz lehet hozzáadni, például a csatlakozási pont azonosítója.       Után egy vezérlő rendelkezik meg a szolgáltató összekötőként, a vezérlő részt vehetnek-kapcsolatok (feltéve, hogy egy felhasználói vezérlő hasonlóképpen felszerelt és érhető el). Statikus, deklaratív VPN-kapcsolat létrehozásához a kód egy weblap, a fejlesztők használhatják a `<asp:webpartconnection>` elemet. Ha a `ConnectionProvider` a szolgáltató forráskód, amely azonosítja a visszahívási metódus attribútum határozza meg a csatlakozási pont azonosítója, majd ezt az értéket kell rendelni a `ProviderConnectionPointID` attribútumnak a `<asp:webpartconnection>` elemnek egy oldalon. Egyik oka, hogy a fejlesztő előfordulhat, hogy adja meg a szolgáltatói csatlakozási pont azonosítója, ha több kapcsolódási pont vannak-e a szolgáltató vezérlő. Ha egy azonosítója nincs megadva a szolgáltató vezérlőben szolgáltatói csatlakozási pont, egy érték nem rendelkezik hozzá kell rendelni a `ProviderConnectionPointID` attribútumnak a lapot, mert a kapcsolat alapértelmezett értéket kapott használatával jön létre a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>mező.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Kapcsolat létrehozása a kódban, a fejlesztők létre kell hoznia egy új ProviderConnectionPoint objektum meghívásával a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>metódust, és átadja azt a szolgáltató vezérlőelemet, és az azonosító vagy a szolgáltató vezérlőben a meghatározott ProviderConnectionPoint objektum indexe azonosítója.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> A visszaadott ProviderConnectionPoint objektum, valamint egy hivatkozást a szolgáltató szabályozására, a felhasználói vezérlőt, és a megfelelő hivatkozást <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektumazonosító, a rendszer minden átadott a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>Hozzon létre egy új módszer <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Bár a fejlesztők használhatják a szolgáltatói csatlakozási pont kapcsolatok létrehozó deklarációval vagy programozott módon részeként, a felhasználók is használhatják szolgáltató csatlakozási pontok a felhasználói felületen (UI) kapcsolatok létrehozásához. Ha a fejlesztők számára deklarálható egy <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>vezérlő weblapon, a felhasználók számára a kapcsolatok létrehozása futásidőben felhasználói Felületet biztosít.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Ha a felhasználók a felhasználói vezérlő választják kiindulópontként a kapcsolat létrehozásához kattintson a csatlakozás művelet (is kiválaszthatják, hogy a szolgáltató, mert nincs különbség az eredményül kapott kapcsolat), a felhasználói felületen a megjelenített nevükkel, a érhető el szolgáltatói csatlakozási pont (vagy ha több pontok) legördülő lista vezérlő látják. Felhasználók kell választania egy szolgáltatói csatlakozási pont VPN-kapcsolat létrehozásához.       A ProviderConnectionPoint objektum közvetlenül egy adott szolgáltató vezérlő társítja, és a kapcsolat adatait tárolja az alap <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>osztály</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> örökli tulajdonságai Például az az örökölt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>tulajdonság, a szolgáltatói csatlakozási pont megtartja a szolgáltató által visszaadott interfész típusa.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Ha a szolgáltatói és kapcsolaton keresztül is ugyanazzal a munkahelyi illesztőfelület-típuson, a vezérlők kompatibilis is alkalmas közvetlen kapcsolat. Ha a szolgáltatói és nem működik együtt a azonos illesztőfelület-típus, hogy nem kompatibilis, és kell egy <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum lefordítani a szolgáltatói csatlakozási pont <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>érték olyan típusú, amely az ügyfél képes együttműködni.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Egy másik fontos örökölt tulajdonság a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>tulajdonság, amely tartalmaz egy rövid nevet a felhasználói felületen, a felhasználók számára válassza ki a szolgáltató kapcsolati megjelenítendő terjesztésipont-kapcsolatok létrehozására, amikor.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> A megjelenített név esetén a szükséges paraméter fejlesztők hozzáadása egy `ConnectionProvider` a szolgáltató vezérlőkben visszahívási metódus attribútumot. Az örökölt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>tulajdonság olyan esetekben is hasznos, ahogyan már említettük, biztosít az egyedi azonosítót a szolgáltatói csatlakozási pont abban az esetben, ha egy szolgáltató több kapcsolódási pont is van.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> A szolgáltató rendelkezhet több ProviderConnectionPoint objektum meghatározni a azt, és ebben az esetben, ha a fejlesztők adja hozzá a `ConnectionProvider` attribútum egy módszerre, az azonosítóérték segítségével különböztetheti meg egymástól az egyes csatlakozási pont kell adnia. Egy másik fontos örökölt tulajdonság a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>tulajdonság, amely azt jelzi, hogy a szolgáltatói csatlakozási pont csatlakozhat egyidejűleg több felhasználóból.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Ez a tulajdonság értéke `true` alapértelmezés szerint szolgáltatói csatlakozási pont (mivel alapértelmezés szerint a `false` az ügyfél-csatlakozási pont).       A ProviderConnectionPoint osztály több egyedi módszerek hozzáadása a tagok örökli az <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>osztályhoz.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>módszer lekéri a felület, amely a fogyasztók visszatérhet a visszahívási metódus példányának.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>metódus lekéri további fogyasztói felületek, amelyek részei egy létező kapcsolatot, de a csatlakozást a felületek nem használhatók.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> osztály."
  remarks: "Az <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>osztály egyszerűen meghívja az alap konstruktort, átadja azt a különböző paraméterek és az alap osztály inicializálása</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> a ProviderConnectionPoint konstruktor       Az alaposztály konstruktor ellenőrzi a csatlakozási pont paramétereinek számát, és segítségével throw kivételek. Lehetséges kivételek listája a kivételek című rész.       A saját <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>osztály</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> példányának létrehozása a ProviderConnectionPoint konstruktor hívása Azonban egyszerűen, hogy kapcsolatot létesít, és nem az a osztály kiterjesztése esetén esetben meg kell hívni a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>kapcsolódási pont objektum vissza olyan szolgáltató metódus.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "A szolgáltató vezérlő, amely visszaadja az illesztőfelület példánya a fogyasztók számára, amellyel kapcsolatot kell metódust."
    - id: interfaceType
      type: System.Type
      description: "A <xref:System.Type>a szolgáltató látja a fogyasztók számára, hogy az illesztő.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "A <xref:System.Type>a szolgáltató vezérlő, amelyhez a szolgáltatói csatlakozási pont társítva.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Úgy tűnik, hogy a felhasználók a kapcsolat felhasználói felületen (UI) szolgáltatói csatlakozási pont egy jól hangzó megjelenítési nevet."
    - id: id
      type: System.String
      description: "A szolgáltatói csatlakozási pont egyedi azonosítója."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Egy logikai érték, amely azt jelzi, hogy a szolgáltatói csatlakozási pont lehet-e a fogyasztók több egyidejű kapcsolatok."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>ugyanolyan típusú, mint a szolgáltató vezérlő nincs (vagy abból származtatott érvényes osztályú)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Meghívja a szolgáltató vezérlőkben, amely lekérdezi a fogyasztók visszatérni illesztőfelület példánya visszahívási metódus."
  remarks: "Ez a módszer egy objektum, amely a kapcsolat létrehozásához használt felület példánya szolgáltató vezérlő adja vissza. Az objektum típusa a megvalósított illesztőfelület típusú lesz. Például két felületet, amelyeket a rendszer a kijelzők vezérlő készlet kapcsolatok <xref:System.Web.UI.WebControls.WebParts.IWebPartField>és <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> : A GetObject metódus meghívásakor a egy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektumot, ha a kapcsolódó szolgáltató megvalósítja ezek egyikét, a visszaadott objektumot azonos típusú lesz.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       A GetObject metódust hívja <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektumokat a kapcsolat aktiválásakor.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Ez az a kritikus lépést, amely ténylegesen kezdeményezi a kapcsolatot, és a folyamat, amely lehetővé teszi, hogy a két vezérlők adatmegosztásra kezdődik.       A felhasználói vezérlő kapcsolaton keresztül történő együttműködésre felület azonos típusú szolgáltató képesnek kell lennie. Ha nem, a vezérlők nem kompatibilisek a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum használatával kell kapcsolatot létesíteni.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A kijelzők kapcsolaton keresztül a szolgáltatóként működő vezérlő."
    return:
      type: System.Object
      description: "Egy <xref:System.Object>Ez a felület a szolgáltató egy példányát a fogyasztók számára, amellyel kapcsolatot kell adja vissza.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Egy nem kötelező gyűjteményt, amely támogatja-e a szolgáltatói csatlakozási pont másodlagos adapterek lekérdezi."
  remarks: "A szolgáltatói csatlakozási pont objektumok mindig a fogyasztók kapcsolat létrehozásához használt alapértelmezett felülettel rendelkezik. Az alapértelmezett illesztőfelület példánya meghívásával beolvasott a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metódust egy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektum.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       Egyes szolgáltató vezérlők azonban több összeköttetések fogyasztóknak a kapcsolat részeként fogja végrehajtani. Ezek a felületek, amelyek nem az alapértelmezett lévőktől kapcsolatot létesíteni, másodlagos adapterek nevezzük. A GetSecondaryInterfaces metódust kell visszaadnia hivatkozik a másodlagos illesztőfelület, ahogy lehetőséget biztosít a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metódus visszaad egy hivatkozást az alapértelmezett felületet.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A kijelzők kapcsolaton keresztül a szolgáltatóként működő vezérlő."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> a szolgáltatóként működő vezérlő által biztosított további adapterek."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
