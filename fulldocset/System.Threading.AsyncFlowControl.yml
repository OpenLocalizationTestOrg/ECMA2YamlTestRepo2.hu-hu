### YamlMime:ManagedReference
items:
- uid: System.Threading.AsyncFlowControl
  id: AsyncFlowControl
  children:
  - System.Threading.AsyncFlowControl.Dispose
  - System.Threading.AsyncFlowControl.Equals(System.Object)
  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.GetHashCode
  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.Undo
  langs:
  - csharp
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
  type: Struct
  summary: "Az áttelepítés, vagy a folyamat, a szálak közötti a végrehajtási környezet visszaállítása funkciókat biztosít."
  remarks: "A végrehajtási környezet logikai szálhoz összes végrehajtási kapcsolatos információkat tartalmaz. A végrehajtási környezet más szálak számát áramló használatával megakadályozása a <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>metódus, amely visszaadja az AsyncFlowControl struktúrát.</xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> A <xref:System.Threading.AsyncFlowControl.Undo%2A>a visszaadott AsyncFlowControl struktúra metódusában használható visszavonja a folyamat tiltási.</xref:System.Threading.AsyncFlowControl.Undo%2A> Az AsyncFlowControl struktúra amelyen létrehozták elemmel azonos szálban kell használni."
  syntax:
    content: 'public struct AsyncFlowControl : IDisposable'
  inheritance:
  - System.ValueType
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Dispose
  id: Dispose
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Feloldja a jelenlegi példány által használt erőforrások a <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> osztály."
  remarks: "Hívás `Dispose` amikor elkészült, a <xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl> használatával A `Dispose` metódus leaves a <xref:System.Threading.AsyncFlowControl>használhatatlan állapotban.</xref:System.Threading.AsyncFlowControl> Hívása után `Dispose`, fel kell szabadítania mutató összes hivatkozást az <xref:System.Threading.AsyncFlowControl>, a szemétgyűjtő is visszaszerezni a memória, amely a <xref:System.Threading.AsyncFlowControl>lett elfoglaló.</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.AsyncFlowControl>       További információkért lásd: [nem felügyelt erőforrások tisztítás](~/add/includes/ajax-current-ext-md.md) és [eldobásakor metódusának](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Mindig hívás `Dispose` az <xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl> utolsó referenciaként a engedélyezés előtt Ellenkező esetben az erőforrásoknak nem szabadul szemétgyűjtő hívást csak a <xref:System.Threading.AsyncFlowControl>objektum `Finalize` metódus.</xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra nem használatos a szálon ahol létrehozták.       – vagy – a <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra már felhasználták Dispose vagy <xref:System.Threading.AsyncFlowControl.Undo*>.</xref:System.Threading.AsyncFlowControl.Undo*> hívása"
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Meghatározza, hogy a megadott objektum egyenlő az aktuális <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Az aktuális struktúra összehasonlítandó objektum."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <code> obj </code> van egy <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> szerkezeti és megegyezik a jelenlegi <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> szerkezeti; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  id: Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Meghatározza, hogy a megadott <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra megegyezik a jelenlegi <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
  syntax:
    content: public bool Equals (System.Threading.AsyncFlowControl obj);
    parameters:
    - id: obj
      type: System.Threading.AsyncFlowControl
      description: "Egy <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> való összehasonlításra az aktuális struktúra struktúra."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <code> obj </code> megegyezik a jelenlegi <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> szerkezeti; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.GetHashCode
  id: GetHashCode
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Egy kivonatoló kódot lekérdezi az aktuális <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Az aktuális kivonatoló kódot <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
  overload: System.Threading.AsyncFlowControl.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Összehasonlít két <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúrákat, hogy határozza meg, hogy azok egyenlő."
  syntax:
    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "Egy <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "Egy <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a két struktúrák egyenlő; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Összehasonlít két <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúrákat, hogy határozza meg, hogy azok nem egyenlő."
  syntax:
    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "Egy <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "Egy <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a struktúrák nem egyenlő; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Undo
  id: Undo
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Visszaállítja a végrehajtási környezet szálak közötti áramlását."
  remarks: "A <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>metódus értéket ad vissza egy <xref:System.Threading.AsyncFlowControl>visszaállítására a struktúráját.</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>       Csak a visszavonás metódust kell meghívni a <xref:System.Threading.AsyncFlowControl>hozzá van rendelve által visszaadott struktúra <xref:System.Threading.ExecutionContext.SuppressFlow%2A>metódus.</xref:System.Threading.ExecutionContext.SuppressFlow%2A> </xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Undo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra nem használatos a szálon ahol létrehozták.       – vagy – a <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struktúra már felhasználták hívására <xref:System.Threading.AsyncFlowControl.Dispose*>vagy visszavonni.</xref:System.Threading.AsyncFlowControl.Dispose*>"
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.AsyncFlowControl.Dispose
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Threading.AsyncFlowControl.GetHashCode
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.Undo
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
- uid: System.Threading.AsyncFlowControl.Dispose*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose
  nameWithType: AsyncFlowControl.Dispose
- uid: System.Threading.AsyncFlowControl.Equals*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals
  nameWithType: AsyncFlowControl.Equals
- uid: System.Threading.AsyncFlowControl.GetHashCode*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode
  nameWithType: AsyncFlowControl.GetHashCode
- uid: System.Threading.AsyncFlowControl.op_Equality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality
  nameWithType: AsyncFlowControl.op_Equality
- uid: System.Threading.AsyncFlowControl.op_Inequality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality
  nameWithType: AsyncFlowControl.op_Inequality
- uid: System.Threading.AsyncFlowControl.Undo*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo
  nameWithType: AsyncFlowControl.Undo
