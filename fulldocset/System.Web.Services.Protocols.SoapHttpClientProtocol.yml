### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol
  id: SoapHttpClientProtocol
  children:
  - System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  - System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  - System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  langs:
  - csharp
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol
  type: Class
  summary: "Adja meg az osztály-ügyfél, amelyek proxyk a SOAP használata esetén."
  remarks: "Ha az ügyféllel, majd proxy osztály, amely származik közvetve vagy közvetlenül <xref:System.Web.Services.Protocols.WebClientProtocol>az XML-webszolgáltatás kell létrehozni.</xref:System.Web.Services.Protocols.WebClientProtocol> Az ügyféllel meghívja a SOAP használata, ha a proxy osztályból kell származnia SoapHttpClientProtocol, amely <xref:System.Web.Services.Protocols.HttpWebClientProtocol>.</xref:System.Web.Services.Protocols.HttpWebClientProtocol> származik <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, viszont <xref:System.Web.Services.Protocols.WebClientProtocol>.</xref:System.Web.Services.Protocols.WebClientProtocol> származik</xref:System.Web.Services.Protocols.HttpWebClientProtocol>       XML-webszolgáltatás kommunikálni, közvetve vagy közvetlenül a származó proxyosztály létrehozása <xref:System.Web.Services.Protocols.WebClientProtocol>a hívni kívánt XML webszolgáltatásnak.</xref:System.Web.Services.Protocols.WebClientProtocol> Nem kell létrehoznia a proxyosztály, eszközzel a Web Services Description Language (Wsdl.exe) egy adott szolgáltatáshoz XML-webszolgáltatás szolgáltatásleírás a proxyosztály létrehozása. A SOAP protokoll proxyosztály generálásakor XML-webszolgáltatási metódusok szinkron hívások keresztül végzik a <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>metódus, mivel aszinkron hívásai történnek a <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>metódus és a <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>metódus.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  \n  \n [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]\n [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.Services.Protocols.SoapHttpClientProtocol&quot;> </xref> osztály."
  syntax:
    content: public SoapHttpClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Elindítja a SOAP PROTOKOLLT használó XML-webszolgáltatás service metódus aszinkron hívás."
  remarks: "Általában akkor nem a BeginInvoke metódust hívja közvetlenül, kivéve, ha Ön volt felépítése saját egy XML-webszolgáltatási proxyosztályt.       A Web Services Description Language (Wsdl.exe) eszköz állítja elő a szolgáltatásleírás proxyosztály az XML-webszolgáltatási metódusok az XML-webszolgáltatási metódusok hívására szinkron módon történik a proxy osztályból származtatott mutatja. Az XML-webszolgáltatási metódusok aszinkron módon hívására, két további módszereket hozzáadódnak a proxyosztály minden XML-webszolgáltatás szolgáltatás használata esetén egy-az `Begin` előtagot az XML-webszolgáltatás metódusa és egyet a nevét a `End` előtagot.       A proxyosztály meghívja a BeginInvoke metódust egy aszinkron hívás hívása az XML-webszolgáltatás metódusa elindításához. Például, ha egy XML-webszolgáltatás közzététele egy XML-webszolgáltatás metódusa nevű `Add`, a proxyosztály tartalmaz nevű metódus `BeginAdd`, az XML-webszolgáltatás a hívás indításához szolgáltatás metódust. A kód a `BeginAdd`, egy kérés érkezett a BeginInvoke metódust, és az eredmények bekerülnek a várt visszatérési típus `Add`.       A `methodName` lehet megtalálni az egyéni attribútumok, amelyek a módszer, például <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> hozzáadva <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>a származtatott metódus SOAP protokoll szükséges további információkat tartalmaz.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`átad a `callback` és szerepel a <xref:System.IAsyncResult>, amely a BeginInvoke metódust küld vissza.</xref:System.IAsyncResult> A `asyncState` paraméter segítségével adjon át a környezetben a aszinkron hívás, a megadott információ a `callback` paramétert, a meghatalmazott, és az eredmény kezeli."
  example:
  - "The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "A származtatott osztály, amely a BeginInvoke metódust hívja a XML-webszolgáltatás metódusa neve."
    - id: parameters
      type: System.Object[]
      description: "A paraméterek átadása az XML-webszolgáltatás tartalmazó objektumokból álló tömb. A tömbben szereplő értékeket sorrendjének sorrendben, ahogy a származtatott osztály hívó metódus paramétereinek felelnek meg."
    - id: callback
      type: System.AsyncCallback
      description: "A delegált hívására az aszinkron invoke befejeződött. Ha `callback` van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, a delegált nem hívják meg."
    - id: asyncState
      type: System.Object
      description: "További információ a hívó által megadott."
    return:
      type: System.IAsyncResult
      description: "Egy <xref:System.IAsyncResult>, amely átadott a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*>metódus visszatérési értékek szerezni a távoli metódus hívása.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "A kérelem elérte a számítógépen, de nem feldolgozása sikeres volt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A kérés nem érvényes az objektum aktuális állapota."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Hiba történt a hálózathoz hozzáférő."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  id: Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Dinamikusan van kötve, <xref:System.Web.Services.Protocols.WebClientProtocol.Url*>.</xref:System.Web.Services.Protocols.WebClientProtocol.Url*> felderítési dokumentumban leírt XML-webszolgáltatás"
  remarks: "Az XML-webszolgáltatás szolgáltatás ügyfél más felderítési módszerrel a proxyosztály hivatkozott XML-webszolgáltatás dinamikusan kötést tud létrehozni. Általában a <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>tulajdonság hivatkozik az XML-webszolgáltatás alapszintű címéből.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Azonban a Discover metódus hívása előtt állítsa be a <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>tulajdonság egy felderítési dokumentum egy URL-címre.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> A Discover metódus található egyezés a proxy osztály kötés a felderítési dokumentum megpróbálja, és dinamikusan kötést létrehozni, azt. Ha sikeres, az XML-webszolgáltatás levő felderítési dokumentumban leírt további metódushívások van irányítva.       A proxyosztály épül, a Web Services Description Language eszközzel (Wsdl.exe), ha a proxyosztály meghatározza a kötés által a XML-webszolgáltatási metódusok meghívja a <xref:System.Web.Services.WebServiceBindingAttribute>.</xref:System.Web.Services.WebServiceBindingAttribute> használatával megvalósított XML-webszolgáltatás több kötése valósítja meg, amikor a Wsdl.exe kötésben proxyosztály hoz létre. Az egyes proxy osztály alkalmazott egy <xref:System.Web.Services.WebServiceBindingAttribute>, amely meghatározza, hogy a kötés és a névtér nevét.</xref:System.Web.Services.WebServiceBindingAttribute> A felderítési dokumentum beállíthatja a <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>tulajdonságot kell tartalmaznia egy XML-webszolgáltatás, amely a kötés neve és a névtér egy hivatkozást, vagy kivételt vált ki.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>"
  example:
  - "The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]\n [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  \n  \n The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]"
  syntax:
    content: public void Discover ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "A proxy osztály nincs meghatározva kötés."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "A SOAP PROTOKOLLT használó XML-webszolgáltatás service metódus aszinkron hívás ér véget."
  remarks: "Általában akkor nem a EndInvoke metódust hívja közvetlenül, kivéve, ha Ön volt felépítése saját egy XML-webszolgáltatási proxyosztályt.       A Web Services Description Language eszköz (Wsdl.exe) az XML-webszolgáltatás által generált proxyosztály a szinkron módon hívja az XML-webszolgáltatási metódusok ki a proxyosztály nevének az XML-webszolgáltatási metódusok mutatja. Az aszinkron módon hívja meg az XML-webszolgáltatási metódusok, két további módszereket hozzáadódnak a proxyosztály minden XML-webszolgáltatás szolgáltatás használata esetén egy-az `Begin` előtagot az XML-webszolgáltatás metódusa és egyet a nevét a `End` előtagot.       A proxyosztály meghívja a EndInvoke metódust egy aszinkron hívás híváshoz az XML-webszolgáltatás metódusa. Például, ha egy XML-webszolgáltatás közzététele egy XML-webszolgáltatás metódusa nevű `Add`, a proxyosztály tartalmaz nevű metódus `EndAdd`, egy XML-webszolgáltatás az aszinkron hívás végrehajtása a szolgáltatás a metódust. A kód a `EndAdd` kezdeményezték a EndInvoke metódus, és ezután az eredmények bekerülnek a várt visszatérési típus `Add`."
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]\n [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]\n [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "A <xref:System.IAsyncResult>által visszaadott a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>metódus.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object[]
      description: "Objektumok tömbje, amely tartalmazza az eredményül kapott értéket és az összes-hivatkozás vagy <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> osztályból származtatott metódus paramétere."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>a visszatérési érték a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> metódust."
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "A kérelem elérte a számítógépen, de nem feldolgozása sikeres volt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A kérés nem érvényes az objektum aktuális állapota."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Hiba történt a hálózathoz hozzáférő."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Értéket ad vissza egy <xref:System.Xml.XmlReader>inicializálása során a <xref:System.Web.Services.Protocols.SoapMessage.Stream*>tulajdonsága a <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> paraméter.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  syntax:
    content: protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> , amely biztosítja a <xref:System.Web.Services.Protocols.SoapMessage.Stream*>a <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> inicializálása</xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "<xref:System.IO.StreamReader>A <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> által használt</xref:System.IO.StreamReader> kezdeti puffer mérete"
    return:
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>inicializálása során a <xref:System.Web.Services.Protocols.SoapMessage.Stream*>tulajdonsága a <code> message </code> paraméter.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Létrehoz egy <xref:System.Net.WebRequest>a megadott <code> uri </code>.</xref:System.Net.WebRequest>"
  remarks: "Ez a módszer testreszabásához bírálható felül a <xref:System.Net.WebRequest>előtt az XML-webszolgáltatás szolgáltatáskérelem.</xref:System.Net.WebRequest> Például egy egyéni fejlécet sikerült hozzáadása a kéréshez."
  syntax:
    content: protected override System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "A <xref:System.Uri>használatára a <xref:System.Net.WebRequest>.</xref:System.Net.WebRequest> létrehozásakor</xref:System.Uri>"
    return:
      type: System.Net.WebRequest
      description: "A <xref:System.Net.WebRequest>a megadott URI-hoz.</xref:System.Net.WebRequest>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Értéket ad vissza egy <xref:System.Xml.XmlWriter>inicializálása során a <xref:System.Web.Services.Protocols.SoapMessage.Stream*>tulajdonsága a <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> paraméter.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  syntax:
    content: protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> , amely biztosítja a <xref:System.Web.Services.Protocols.SoapMessage.Stream*>a <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> inicializálása</xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "<xref:System.IO.StreamWriter>A <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> által használt</xref:System.IO.StreamWriter> kezdeti puffer mérete"
    return:
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>inicializálása során a <xref:System.Web.Services.Protocols.SoapMessage.Stream*>tulajdonsága a <code> message </code> paraméter.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Egy XML-webszolgáltatás metódusa szinkron módon történik a SOAP használata hív meg."
  remarks: "Általában akkor ne hívja meg az Invoke metódus közvetlenül, kivéve, ha a saját XML-webszolgáltatás proxy osztály készítésekor.       A Web Services Description Language eszköz (Wsdl.exe) az XML-webszolgáltatás által generált proxyosztály ki a proxyosztály nevének az XML-webszolgáltatási metódusok mutatja. A proxyosztály meghívja az Invoke metódus meghívására egy XML-webszolgáltatás metódus hívása. Például, ha egy XML-webszolgáltatás közzététele egy XML-webszolgáltatás metódusa nevű `Add`, a proxyosztály is tartalmaz nevű metódus `Add`. A kód a `Add` a proxyosztály metódust, a szinkron kérés érkezett az XML-webszolgáltatás metódusa az Invoke metóduson keresztül, és ezután az eredmények bekerülnek a várt visszatérési típus `Add`.       A `methodName` paraméter lehet megtalálni az egyéni attribútumok a módszer, például <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> hozzáadott <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>További tájékoztatást nyújt a származtatott metódus SOAP protokoll szükséges.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] Invoke (string methodName, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "Az XML-webszolgáltatás metódusa neve."
    - id: parameters
      type: System.Object[]
      description: "Objektumok tömbje, amely tartalmazza a paraméterek átadása az XML-webszolgáltatás. A tömbben szereplő értékeket sorrendjének sorrendben, ahogy a paramétereket a származtatott osztály a hívó metódus felel meg."
    return:
      type: System.Object[]
      description: "Objektumok tömbje, amely tartalmazza az eredményül kapott értéket, és bármely <xref uid=&quot;langword_csharp_reference&quot; name=&quot;reference&quot; href=&quot;&quot;> </xref> vagy <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> osztályból származtatott metódus paramétere."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "A kérelem elérte a számítógépen, de nem feldolgozása sikeres volt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A kérés nem érvényes az objektum aktuális állapota."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Hiba történt a hálózathoz hozzáférő."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Aszinkron módon elindítja a megadott metódust."
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "A meghívni kívánt metódus nevét."
    - id: parameters
      type: System.Object[]
      description: "A paraméterek átadása a metódust."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "A delegált hívható meg, ha a metódushívás befejeződött."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Aszinkron módon elindítja a megadott metódust."
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "A meghívni kívánt metódus nevét."
    - id: parameters
      type: System.Object[]
      description: "A paraméterek átadása a metódust."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "A delegált hívható meg, ha a metódushívás befejeződött."
    - id: userState
      type: System.Object
      description: "Egy objektum, amelyen az állapotadatokat az `callback` delegálni."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Lekérdezi vagy beállítja az XML-webszolgáltatás számára a SOAP-kérelem végrehajtásához használt SOAP protokoll verziója."
  remarks: "A SoapVersion tulajdonság értéke a proxy osztály számára a Web Services Description Language eszköz (Wsdl.exe) által generált <xref:System.Web.Services.Protocols.SoapProtocolVersion>alapértelmezés szerint ha a WSDL-dokumentumok, a XML-webszolgáltatás támogatja a SOAP 1.1-es verzió.</xref:System.Web.Services.Protocols.SoapProtocolVersion> Azonban ha egy XML-webszolgáltatás csak támogatja a SOAP 1.2-es, Wsdl.exe a SoapVersion tulajdonság beállítása a <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion> A SOAP protokoll verziójának kiválasztása a proxyosztály Wsdl.exe a létrehozásakor, használja a `/protocol` kapcsoló a `SOAP` vagy `SOAP12` beállításokat a tulajdonsága SoapVersion <xref:System.Web.Services.Protocols.SoapProtocolVersion>és <xref:System.Web.Services.Protocols.SoapProtocolVersion>, illetve.</xref:System.Web.Services.Protocols.SoapProtocolVersion> </xref:System.Web.Services.Protocols.SoapProtocolVersion>"
  example:
  - "The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  \n  \n [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]\n [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "Egy a <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref> értékeket. Az alapértelmezett érték <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Web.Services.Protocols.SoapException
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapException
  nameWithType: SoapException
  fullName: System.Web.Services.Protocols.SoapException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.Services.Protocols.SoapClientMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapClientMessage
  nameWithType: SoapClientMessage
  fullName: System.Web.Services.Protocols.SoapClientMessage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: SoapHttpClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover
  nameWithType: SoapHttpClientProtocol.Discover
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: SoapHttpClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: SoapHttpClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: SoapHttpClientProtocol.Invoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: SoapHttpClientProtocol.InvokeAsync
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
