### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Határozza meg a kapcsolódási pont objektum, amely lehetővé teszi a kiszolgálói vezérlőnek működött egy végfelhasználói szolgáltatóhoz kapcsolat kialakításához."
  remarks: "Minden kijelzők kapcsolat két kiszolgálói vezérlő között, a vezérlők objektummal kell rendelkeznie (többek között az egyéb követelmények) egy társított kapcsolat pont, amely lehetővé teszi a más vezérlő való kapcsolódáshoz és vagy adatokat szolgáltatni vagy felhasználni, attól függően, hogy a szolgáltató vagy a kapcsolat fogyasztói a következő vezérlő van kijelölve. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objektum általában hogyan vezérlő csatlakozhat egy másik vezérlő és oszthatnak meg az adatok részleteit tartalmazza.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> A vezérlő a fogyasztó kapcsolaton keresztül működő a szolgáltatáskapcsolódási pont ConsumerConnectionPoint objektumnak kell lennie. A kijelzők kapcsolatok és a csatlakozási pontok tudnivalókért olvassa el a Lásd még szakaszban felsorolt témakörök.       ConsumerConnectionPoint objektum létrehozásához, több lépésre szükség: 1.  Engedélyezése egy felhasználói vezérlő hivatkozhasson rá az illesztőfelület példánya. A <xref:System.Web.UI.WebControls.WebParts.WebPart>vagy egyéb kiszolgálói vezérlőnek (bármilyen típusú, amely belekerül a kiszolgálói vezérlőnek egy <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zóna is használható) adatokat egy adott illesztő példányból képesnek kell lennie.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> A vezérlő kell nem valósítja meg a felületet; csak a szolgáltatónak tartalmaznia kell azt. A fogyasztó vagy együttműködik a szolgáltató által kiszolgált pontos illesztőfelület-típushoz, vagy ha nem létezik, egy <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum tudja értelmezni a fogyasztó típusa illesztőfelület-típus egy szolgáltatót az adatok átalakítására használható.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Egy tipikus ahhoz, hogy egy végfelhasználói módja egy titkos mezőt a hivatkozni kívánt illesztőfelület-típusnak deklarálnia.      2.  Azonosítsa a visszahívási metódus. A végfelhasználói metódus a szolgáltató kapcsolatot létesíteni a visszahívási metódusnak kell azonosítani. Ez a módszer az, hogy a szolgáltató valósít meg, és rendel úgy, hogy a titkos mezőben (például) az első lépésben létrehozott illesztőfelület példánya kéri le. A kijelzők módszer alapján azonosítja az egy visszahívási metódus a fogyasztói hoz adhat hozzá egy `ConnectionConsumer` metaadat-attribútum (határozzák meg a <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>osztály) a metódus, amely megkapja az illesztőfelület példánya.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Az attribútum hozzáadásakor csak szükséges paraméter egy megjelenítési nevet az ügyfél-csatlakozási pont használandó. Választható paraméterek: kettőhöz lehet hozzáadni, például egy.      3.  Folyamat és a kimeneti az illesztőfelület-példány adatait. Hajtsa végre a belső feldolgozás, az adatok szükség esetén, és majd általában egy felhasználói vezérlő jelenik meg az adatokat a lapra. Ez egy általános módszer a vezérlő felülbírálására <xref:System.Web.UI.Control.OnPreRender%2A>metódus.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > Egy szinkron kérelem során egy végfelhasználói igényeljen adatok közvetlenül a szolgáltató által közben vagy után azonnal a <xref:System.Web.UI.Control.PreRender>esemény.</xref:System.Web.UI.Control.PreRender> Egy aszinkron kérelem során a szolgáltató visszahívási metódus nem hívása esetén bármikor megjelenítése, közben a fejlesztői feltételezheti, hogy nincs adatok küldése a fogyasztónak.       Miután egy vezérlő rendelkezik lett ellátva, a felhasználó nevében járhasson el, a vezérlő is kapcsolatokban is részt (feltéve, hogy a szolgáltató vezérlő is felszerelt és érhető el). Statikus, deklaratív VPN-kapcsolat létrehozásához a kód egy weblap, a fejlesztők használhatják a `<asp:webpartconnection>` elemet. Ha a `ConnectionConsumer` a fogyasztói forráskód, amely azonosítja a visszahívási metódus attribútum határozza meg a csatlakozási pont azonosítója, majd ezt az értéket kell rendelni a `ConsumerConnectionPointID` attribútumnak a `<asp:webpartconnection>` elemnek egy oldalon. Egy, hogy a fejlesztő előfordulhat, hogy adjon meg egy ügyfél-csatlakozási pont azonosítója oka, hogy van-e a felhasználói vezérlő definiált több kapcsolódási pontok. Ha az azonosító nincs megadva a felhasználói vezérlő ügyfél-csatlakozási pont, egy érték nem rendelkezik hozzá kell rendelni a `ConsumerConnectionPointID` attribútumnak a lapot, mert a kapcsolat alapértelmezett értéket kapott használatával jön létre a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>mező.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Kapcsolat létrehozása a kódban, a fejlesztők létre kell hoznia egy új ConsumerConnectionPoint objektum meghívásával a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metódus, és átadja azt a felhasználói vezérlő, együtt a azonosítója és a meghatározott ConsumerConnectionPoint objektum a felhasználói vezérlő indexe azonosítója.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> A visszaadott ConsumerConnectionPoint objektumot, és hivatkozni kell a felhasználói vezérlőt, a szolgáltató vezérlő, illetve a megfelelő hivatkozást <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektumazonosító, a rendszer minden átadott a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>Hozzon létre egy új módszer <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektum.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Bár a fejlesztők használhatják a fogyasztói csatlakozási pontok kapcsolatok létrehozó deklarációval vagy programozott módon részeként, a felhasználók is használhatják fogyasztói csatlakozási pontok a felhasználói felületen (UI) kapcsolatok létrehozásához. Ha a fejlesztők számára deklarálható egy <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>vezérlő weblapon, a felhasználók számára a kapcsolatok létrehozása futásidőben felhasználói Felületet biztosít.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Ha a felhasználók eldönthetik, a szolgáltató vezérlő kiindulópontként a kapcsolat létrehozásához kattintson a csatlakozás művelet (is kiválaszthatják, hogy a fogyasztó; nincs különbség az eredményül kapott kapcsolat), a felhasználói felületen látják majd a legördülő listából válassza ki a rendelkezésre álló fogyasztói kapcsolat pont (vagy pontokat, ha több) megjelenítési nevének vezérlőt, hogy a szolgáltató a adatokat küldhet. Felhasználók kell választania egy ügyfél-csatlakozási pont kapcsolatot létesíteni.       A ConsumerConnectionPoint objektum közvetlenül egy adott felhasználói vezérlő társítja, és a kapcsolat adatait tárolja az alap <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>osztály</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> örökli tulajdonságai Például az az örökölt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>tulajdonságot, egy ügyfél-csatlakozási pont tartja használ interfész típusa.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Ha a szolgáltatói és kapcsolaton keresztül is értelmezi az illesztőfelület-típus, a vezérlők kompatibilis is alkalmas közvetlen kapcsolat. Ha a szolgáltatói és nem működik együtt a azonos illesztőfelület-típus, hogy nem kompatibilis, és kell egy <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum lefordítani a szolgáltatói csatlakozási pont <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>tulajdonságot az olyan típusú, amely az ügyfél képes együttműködni.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Egy másik fontos örökölt tulajdonság a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>tulajdonság, amely egy rövid nevet a felhasználói felületen, a felhasználók számára, hogy egy ügyfél-kapcsolódási válassza ki a megjelenítendő biztosít terjesztésipont-kapcsolatok létrehozására, amikor.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> A megjelenített név esetén a szükséges paraméter fejlesztők hozzáadása egy `ConnectionConsumer` attribútumot a felhasználói vezérlőkben visszahívási metódusra. Az örökölt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>tulajdonság olyan esetekben is hasznos, ahogyan már említettük, biztosít az egyedi azonosítóját egy ügyfél-csatlakozási pont abban az esetben, ha több kapcsolódási pont megsértéséről.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> A fogyasztó rendelkezhet több ConsumerConnectionPoint objektum meghatározni a azt, és ebben az esetben, ha a fejlesztők hozzáadása a `ConnectionConsumer` attribútum egy módszerre, az azonosítóérték segítségével különböztetheti meg egymástól az egyes csatlakozási pont kell adnia. Egy másik fontos örökölt tulajdonság a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>tulajdonság, amely azt jelzi, hogy egy ügyfél-csatlakozási pont csatlakozhat egyidejűleg több szolgáltató.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Ez a tulajdonság értéke `false` alapértelmezés szerint fogyasztói csatlakozási pontok (mivel alapértelmezés szerint a `true` szolgáltató csatlakozási pontok).       A ConsumerConnectionPoint osztály több egyedi módszerek hozzáadása a tagok örökli az <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>osztályhoz.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>metódus meghívja a fogyasztó saját definiált visszahívási metódus a Provider interface példányának lekéréséhez.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>metódus, amely azt jelzi, hogy a szolgáltatáskapcsolódási pont hozhat létre kapcsolatokat, a kapcsolódó felhasználói vezérlő aktuális állapotán alapuló logikai értéket ad vissza.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> osztály."
  remarks: "Az <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>osztály egyszerűen meghívja az alap konstruktort, átadja azt a különböző paraméterek és az alap osztály inicializálása</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> a ConsumerConnectionPoint konstruktor       Az alaposztály konstruktor ellenőrzi a csatlakozási pont paramétereinek számát, és segítségével throw kivételek. Lehetséges kivételek listája a kivételek című rész.       A saját <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>osztály</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> példányának létrehozása a ConsumerConnectionPoint konstruktor hívása Azonban egyszerűen, hogy kapcsolatot létesít, és nem az a osztály kiterjesztése esetén esetben meg kell hívni a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metódust egy olyan kapcsolatobjektum pont vissza olyan szolgáltató.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "A felhasználói vezérlő, amely visszaadja az illesztőfelület példánya a fogyasztók számára, amellyel kapcsolatot kell metódust."
    - id: interfaceType
      type: System.Type
      description: "A <xref:System.Type>a felület, amely a felhasználó kap egy szolgáltató.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "A <xref:System.Type>a felhasználói vezérlő, amelyhez az ügyfél-csatlakozási pont társítva.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Úgy tűnik, hogy a felhasználók a kapcsolat felhasználói felületen (UI) ügyfél-csatlakozási pont egy jól hangzó megjelenítési nevet."
    - id: id
      type: System.String
      description: "Az ügyfél-csatlakozási pont egyedi azonosítója."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Egy logikai érték, amely azt jelzi, hogy az ügyfél-csatlakozási pont lehet-e a szolgáltatók több egyidejű kapcsolatok."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>nem ugyanolyan típusú, mint a felhasználói vezérlő (vagy abból származtatott érvényes osztályú)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "A felhasználói vezérlőkben visszahívási metódus meghívja, és beolvassa a szolgáltató vezérlő az illesztőfelület példánya."
  remarks: "Ezt a módszert olyan szolgáltatót, amely tartalmazza a felhasználói vezérlő adatokat fogad az illesztőfelület példánya.       A SetObject elemnek átadott metódust <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektumokat a kapcsolat aktiválásakor.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Ez az egy fontos lépés, amely része a kapcsolatot kezdeményező, és amelyek lehetővé teszik a két megoszthatják az adatokat.       A felhasználói vezérlő kapcsolaton keresztül történő együttműködésre felület azonos típusú szolgáltató képesnek kell lennie. Ha nem, a vezérlők nem kompatibilisek a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektum használatával kell kapcsolatot létesíteni.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Egy ügyfél-csatlakozási pont társított felhasználói vezérlő."
    - id: data
      type: System.Object
      description: "A felület adta vissza egy szolgáltató vezérlőből."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Meghatározza, hogy egy ügyfél-csatlakozási pont jelenleg képes, hogy kapcsolatot létesít."
  remarks: "A SupportsConnection metódus mindig vissza megvalósított módon `true` minden esetben az <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>osztályhoz.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Ehhez a metódushoz célja annak állapotának ellenőrzése `control` és `secondaryInterfaces` bizonyos kritikus pontok annak meghatározásához, hogy egy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>célja jelenleg képes kapcsolatot létrehozni.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Nem határozható meg forgatókönyvek ahol `control` így könnyebben lehetetlen alkotnak kapcsolat, mert olyan állapotban van, vagy ha `secondaryInterfaces` már léteznie kell egy kapcsolatot alakítható. Ilyen esetben a fejlesztők örökölhet a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>osztály, és írja felül az SupportsConnection metódust, biztosító határozhatja meg, amikor készen áll kapcsolatok támogatására-e a szolgáltatáskapcsolódási pont egyéni implementációja.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A felhasználói vezérlő társított a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> bármely másodlagos adapterek, amely részt vesz a kapcsolatot."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a szolgáltatáskapcsolódási pont jelenleg létesíthet kapcsolatot; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
