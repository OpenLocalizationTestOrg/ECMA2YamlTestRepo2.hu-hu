### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RandomNumberGenerator
  id: RandomNumberGenerator
  children:
  - System.Security.Cryptography.RandomNumberGenerator.#ctor
  - System.Security.Cryptography.RandomNumberGenerator.Create
  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  - System.Security.Cryptography.RandomNumberGenerator.Dispose
  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  langs:
  - csharp
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  type: Class
  summary: "Az absztrakt osztály, amelyből kriptográfiai véletlenszerű szám generátorokat összes implementációja származtatni jelöli."
  remarks: "Kriptográfiai véletlenszerű szám generátorokat erős titkosítással véletlenszerű értékek létrehozása.       Alkalmazáskód közvetlenül nem használja ezt az osztályt. Absztrakt osztály összes kriptográfiai véletlenszerű szám generátorokat biztosított, az alaposztály.       Egy kriptográfiai véletlenszám-generátor megvalósítása használja a származtatott osztály <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.</xref:System.Security.Cryptography.RNGCryptoServiceProvider>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class RandomNumberGenerator : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Egy új példányát inicializálja <xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref>."
  remarks: "Absztrakt osztály példánya nem hozható létre. Alkalmazás kódja egy származtatott osztály új példánya hoz létre. Egy kriptográfiai véletlenszám-generátor megvalósítása használja a származtatott osztály <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.</xref:System.Security.Cryptography.RNGCryptoServiceProvider>"
  syntax:
    content: protected RandomNumberGenerator ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  id: Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Felülbírálja a származtatott osztály, létrehoz egy kriptográfiai véletlenszám-generátor kezdőértékét véletlenszerű adatokat létrehozásához használható alapértelmezett végrehajtásának példánya."
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "Egy kriptográfiai véletlenszám-generátor új példányát."
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Felülbírálja a származtatott osztály, létrehoz egy kriptográfiai véletlenszám-generátor megadott végrehajtásának példánya."
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create (string rngName);
    parameters:
    - id: rngName
      type: System.String
      description: "A használandó véletlenszerű szám generátor végrehajtása neve."
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "Egy kriptográfiai véletlenszám-generátor új példányát."
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Felülbírálja a származtatott osztály, ha feloldja a jelenlegi példány által használt erőforrások a <xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref> osztály."
  remarks: "Hívás `Dispose` amikor elkészült, a <xref:System.Security.Cryptography.RandomNumberGenerator>.</xref:System.Security.Cryptography.RandomNumberGenerator> használatával A `Dispose` metódus leaves a <xref:System.Security.Cryptography.RandomNumberGenerator>használhatatlan állapotban.</xref:System.Security.Cryptography.RandomNumberGenerator> Hívása után `Dispose`, fel kell szabadítania mutató összes hivatkozást az <xref:System.Security.Cryptography.RandomNumberGenerator>, a szemétgyűjtő lehet visszaszerezni a memória, amely a <xref:System.Security.Cryptography.RandomNumberGenerator>lett elfoglaló.</xref:System.Security.Cryptography.RandomNumberGenerator> </xref:System.Security.Cryptography.RandomNumberGenerator>       További információkért lásd: [nem felügyelt erőforrások tisztítás](~/add/includes/ajax-current-ext-md.md) és [eldobásakor metódusának](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Mindig hívás `Dispose` az <xref:System.Security.Cryptography.RandomNumberGenerator>.</xref:System.Security.Cryptography.RandomNumberGenerator> utolsó referenciaként a engedélyezés előtt Ellenkező esetben az erőforrásoknak nem szabadul szemétgyűjtő hívást csak a <xref:System.Security.Cryptography.RandomNumberGenerator>objektum `Finalize` metódus.</xref:System.Security.Cryptography.RandomNumberGenerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Felül van bírálva a származtatott osztály, ha a nem felügyelt által használt erőforrások kiadja a <xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref> és opcionálisan kiadja a felügyelt erőforrások."
  remarks: "Ezt a módszert nevezik nyilvános `Dispose()` metódus és a `Finalize` metódust. `Dispose()`meghívja a védett `Dispose(Boolean)` metódust a `disposing` paraméter `true`. `Finalize`Elindítja a `Dispose` rendelkező `disposing` beállítása `false`.       Ha a `disposing` paraméter `true`, ez a módszer minden felügyelt objektum által tárolt összes erőforrás kiadja, amelyhez a <xref:System.Security.Cryptography.RandomNumberGenerator>hivatkozik.</xref:System.Security.Cryptography.RandomNumberGenerator> Ez a metódus meghívja a `Dispose()` minden hivatkozott metódusa."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a kibocsátási felügyelt és a nem felügyelt erőforrások; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> csak a nem felügyelt erőforrások kijelölése."
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  id: GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Felülbírálja a származtatott osztály, ha beírja bájttömb értékek erős titkosítással véletlenszerűen generált."
  remarks: "A bájttömb hossza határozza meg, hány véletlenszerű bájt előállítása."
  example:
  - "The following example creates a random sequence 100 bytes long and stores it in `random`.  \n  \n [!code-cs[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/csharp/m-system.security.crypto_63_1.cs)]\n [!code-cpp[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/cpp/m-system.security.crypto_63_1.cpp)]\n [!code-vb[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_63_1.vb)]"
  syntax:
    content: public abstract void GetBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "A tömböt az erős titkosítással véletlenszerű bájt kitölthet."
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[],Int32,Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "A megadott bájttömb beírja értékek erős titkosítással véletlenszerűen generált."
  syntax:
    content: public virtual void GetBytes (byte[] data, int offset, int count);
    parameters:
    - id: data
      type: System.Byte[]
      description: "A tömböt az erős titkosítással véletlenszerű bájt kitölthet."
    - id: offset
      type: System.Int32
      description: "Az index a tömb kitöltés indítása."
    - id: count
      type: System.Int32
      description: "Töltse ki a bájtok száma."
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>vagy <code>count</code> 0-nál kisebb"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>plusz <code>count</code> hossza meghaladja a <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  id: GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Felülbírálja a származtatott osztály, ha beírja bájttömb nem nulla érték erős titkosítással véletlenszerűen generált."
  remarks: "A bájttömb hossza határozza meg, hány véletlenszerű bájt előállítása."
  example:
  - "The following example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \n  \n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/cpp/cf0179cb-fbea-47fb-bad6-_1.cpp)]\n [!code-cs[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/csharp/cf0179cb-fbea-47fb-bad6-_1.cs)]\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/visualbasic/cf0179cb-fbea-47fb-bad6-_1.vb)]"
  syntax:
    content: public virtual void GetNonZeroBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "A tömböt az erős titkosítással véletlenszerű nem nulla bájt kitölthet."
  overload: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[],Int32,Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(Byte[])
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create
  nameWithType: RandomNumberGenerator.Create
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose
  nameWithType: RandomNumberGenerator.Dispose
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes
  nameWithType: RandomNumberGenerator.GetBytes
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes
  nameWithType: RandomNumberGenerator.GetNonZeroBytes
