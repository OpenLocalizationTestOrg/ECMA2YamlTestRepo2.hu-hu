### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "Egy egyszerű figyelő, amely arra utasítja a nyomkövetés vagy hibakeresés kimenet biztosít egy <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "A EventLogTraceListener példánya lehet hozzáadni a <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, vagy a <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>nyomkövetés vagy hibakeresés <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> kimenetként gyűjtemények</xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> Vegye fel a példányt a kódot, vagy adja meg azt az alkalmazás konfigurációs fájljában. Egy konfigurációs fájl segítségével EventLogTraceListener hozzáadása, szerkesztése a fájlt, amely megfelel az alkalmazás nevét vagy az app.config fájlban egy [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] projekt. Ebben a fájlban írja be a következőt EventLogTraceListener elem beszúrása.       A következő példakóddal felveheti egy nevű EventLogTraceListener objektum `myListener` számára a <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> A `initializeData` paraméter, amely átadását az eseménynapló-forrás nevét adja meg a <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>konstruktor.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```Az alkalmazás konfigurációs fájljában nyomkövetésfigyelők adásával kapcsolatos további információkért lásd: vagy.      > [!NOTE] > Ha a <xref:System.Diagnostics.EventLog.Source%2A>az eseménynaplóban, amelyek a EventLogTraceListener példányhoz társított nem létezik, egy új eseményforrás létrehozása.</xref:System.Diagnostics.EventLog.Source%2A> Egy eseményforrás létrehozása Windows Vista, Windows XP Professional vagy Windows Server 2003, rendszergazdai jogosultságokkal kell rendelkeznie.   >> Ezt a követelményt oka, hogy annak megállapításához, hogy a forrás egyedi biztonsági, beleértve az összes Eseménynapló kell keresni. A Windows Vista rendszerben felhasználók nincs engedélye hozzáférni a biztonsági napló; ezért egy <xref:System.Security.SecurityException>vált ki.</xref:System.Security.SecurityException>   >> A Windows Vista felhasználói fiókok felügyelete (UAC) meghatározza, hogy a felhasználó jogosultságával. Ha a beépített Rendszergazdák csoport tagja, két futásidejű jogkivonatot kapott: egy általános jogú felhasználói jogkivonat és egy rendszergazdai hozzáférési jogkivonatot. Alapértelmezés szerint áll az általános jogú felhasználói szerepkörben. Végrehajtani a biztonsági napló hozzáférő kódot, akkor kell először emelheti a jogosultságokat az általános jogú felhasználó rendszergazda. Ehhez kattintson a jobb gombbal az alkalmazás ikonja, és jelzi, hogy szeretné-e rendszergazdai az alkalmazás indításakor.       Az osztály tartalmazza a <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>tulajdonság lekérése vagy beállítása az eseménynaplóban talál, amely megkapja a nyomkövetésének engedélyezése vagy hibakeresés kimeneti, és a <xref:System.Diagnostics.EventLogTraceListener.Name%2A>tulajdonságot a EventLogTraceListener nevét.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       A <xref:System.Diagnostics.EventLogTraceListener.Close%2A>metódus bezárja az eseménynaplóban, az többé nem kap nyomkövetés vagy hibakeresés kimeneti.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> A <xref:System.Diagnostics.EventLogTraceListener.Write%2A>és <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>módszerek írása egy üzenetet az eseménynaplóba.</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> </xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > Elkerülése érdekében a lehetőségét, amely nagy mennyiségű adatok írása az eseménynaplóba, a EventLogTraceListener nem kimeneti által megadott választható nyomkövetési adatok a <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>tulajdonság.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> osztály egy nyomkövetés-figyelő nélkül."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> osztály a megadott Eseménynapló használatával."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "Az Eseménynapló írni."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> osztály a megadott forrás használatával."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "Egy meglévő eseménynapló-forrás neve."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Bezárja az eseménynaplóban, így többé nem kap a hibakeresési és nyomkövetési kimeneti."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a írni az eseménynaplóban talál."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "Az Eseménynapló írni."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a nevét, ennek <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>."
  remarks: "Ez a tulajdonság alapértelmezett értéke a forrás nevét, az Eseménynapló."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "A nyomkövetés-figyelő neve."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Írás nyomkövetési adatok egy adatobjektum és esemény információt az eseménynaplóban talál."
  remarks: "> [!IMPORTANT]> A <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>módszerek nem célja, hogy az alkalmazás kódjában meghívni.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Módszerekkel, akkor a <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, és <xref:System.Diagnostics.TraceSource>kimeneti nyomkövetési adatok osztályokat.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>módszer, például a <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metódus automatizált eszközök számára készült, de is lehetővé teszi, hogy további objektumok, például egy kivétel példányt, a nyomkövetést csatlakoztatása.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       A `eventCache` és `source` paraméterek segítségével meghatározhatja, ha az esemény nyomon kell követni. `id`hozhatók létre olyan <xref:System.Diagnostics.EventInstance>objektum és a <xref:System.Diagnostics.TraceEventType>egyenértékű, hogy egy <xref:System.Diagnostics.EventLogEntryType>a a <xref:System.Diagnostics.EventInstance.EntryType%2A>tulajdonság.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> A <xref:System.Diagnostics.EventInstance>ír az eseménynaplóba a `data` objektum, egy karakterláncként kell beállítani, használja a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Maximális értékét a `id` paraméter 65 535. Ha a `id` megadott érték nagyobb, mint 65 535, a maximális érték lesz érvényben."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Egy objektum, amely tartalmazza az aktuális folyamatazonosító szálazonosító és nyomkövetési adatok a verem."
    - id: source
      type: System.String
      description: "A név alapján határozza meg a kimeneti; általában az alkalmazás neve, amely a nyomkövetési esemény jön létre."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Az egyik a számbavételi érték került, ami miatt a nyomkövetési esemény típusa."
    - id: id
      type: System.Int32
      description: "Az esemény azonosítószáma. A kombinációja `source` és `id` egyedileg azonosít egy eseményt."
    - id: data
      type: System.Object
      description: "Egy objektum írni a kimeneti fájl vagy adatfolyam."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Nincs megadva.       – vagy – a naplózási bejegyzés karakterlánc 32766 karakternél hosszabb."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Írás nyomkövetési adatait, az adatok objektumok és az eseménynaplóba eseményadatok tömbjét."
  remarks: "> [!IMPORTANT]> A <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>módszerek nem célja, hogy az alkalmazás kódjában meghívni.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Módszerekkel, akkor a <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, és <xref:System.Diagnostics.TraceSource>kimeneti nyomkövetési adatok osztályokat.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>módszer, például a <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metódus automatizált eszközök számára készült, de is lehetővé teszi, hogy további objektumok, például egy kivétel példányt, a nyomkövetést csatlakoztatása.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       A `severity` és `id` paraméter használatával hozzon létre egy <xref:System.Diagnostics.EventInstance>objektum, amely az adatok objektumokból álló tömb íródik az adatokat az eseménynaplóban talál.</xref:System.Diagnostics.EventInstance>       A `eventCache` és `source` paraméterek segítségével meghatározhatja, ha az esemény nyomon kell követni. `id`hozhatók létre olyan <xref:System.Diagnostics.EventInstance>objektum és a <xref:System.Diagnostics.TraceEventType>egyenértékű, hogy egy <xref:System.Diagnostics.EventLogEntryType>a a <xref:System.Diagnostics.EventInstance.EntryType%2A>tulajdonság.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> A <xref:System.Diagnostics.EventInstance>ír az eseménynaplóba a `data` object tömbben, formátumú karakterlánc-tömbben, használja a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Maximális értékét a `id` paraméter 65 535. Ha a `id` megadott érték nagyobb, mint 65 535, a maximális érték lesz érvényben."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Egy objektum, amely tartalmazza az aktuális folyamatazonosító szálazonosító és nyomkövetési adatok a verem."
    - id: source
      type: System.String
      description: "A név alapján határozza meg a kimeneti; általában az alkalmazás neve, amely a nyomkövetési esemény jön létre."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Az egyik a számbavételi érték került, ami miatt a nyomkövetési esemény típusa."
    - id: id
      type: System.Int32
      description: "Az esemény azonosítószáma. A kombinációja `source` és `id` egyedileg azonosít egy eseményt."
    - id: data
      type: System.Object[]
      description: "Adatok objektumokból álló tömb."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Nincs megadva.       – vagy – a naplózási bejegyzés karakterlánc 32766 karakternél hosszabb."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Írás nyomkövetési adatokat, egy üzenet és az esemény információt az eseménynaplóban talál."
  remarks: "> [!IMPORTANT]> A <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>módszerek nem célja, hogy az alkalmazás kódjában meghívni.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Ezek a módszerek módszerek által meghívott a <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, és <xref:System.Diagnostics.TraceSource>osztályok nyomkövetési adatokat írni.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metódus olyan nyomkövetési események eszközök által automatikusan feldolgozható.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Például egy felügyeleti eszköz értesítheti a rendszergazda, ha egy adott esemény megadott erőforrása által követett.       A `eventCache` és `source` paraméterek segítségével meghatározhatja, ha az esemény nyomon kell követni. `id`hozhatók létre olyan <xref:System.Diagnostics.EventInstance>objektum és a <xref:System.Diagnostics.TraceEventType>egyenértékű, hogy egy <xref:System.Diagnostics.EventLogEntryType>a a <xref:System.Diagnostics.EventInstance.EntryType%2A>tulajdonság.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> A <xref:System.Diagnostics.EventInstance>ír az eseménynaplóba a `message` adatokat a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Maximális értékét a `id` paraméter 65 535. Ha a `id` megadott érték nagyobb, mint 65 535, a maximális érték lesz érvényben."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Egy objektum, amely tartalmazza az aktuális folyamatazonosító szálazonosító és nyomkövetési adatok a verem."
    - id: source
      type: System.String
      description: "A név alapján határozza meg a kimeneti; általában az alkalmazás neve, amely a nyomkövetési esemény jön létre."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Az egyik a számbavételi érték került, ami miatt a nyomkövetési esemény típusa."
    - id: id
      type: System.Int32
      description: "Az esemény azonosítószáma. A kombinációja `source` és `id` egyedileg azonosít egy eseményt."
    - id: message
      type: System.String
      description: "A nyomkövetési üzenet."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Nincs megadva.       – vagy – a naplózási bejegyzés karakterlánc 32766 karakternél hosszabb."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Írás nyomkövetési adatait, az objektumok és az eseménynaplóba eseményadatok formázott tömbje."
  remarks: "> [!IMPORTANT]> A <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>módszerek nem célja, hogy az alkalmazás kódjában meghívni.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Ezek a módszerek módszerek által meghívott a <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, és <xref:System.Diagnostics.TraceSource>osztályok nyomkövetési adatokat írni.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metódus olyan nyomkövetési események eszközök által automatikusan feldolgozható.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Például egy felügyeleti eszköz értesítheti a rendszergazda, ha egy adott esemény megadott erőforrása által követett.       A `eventCache` és `source` paraméterek segítségével meghatározhatja, ha az esemény nyomon kell követni. `id`hozhatók létre olyan <xref:System.Diagnostics.EventInstance>objektum és a <xref:System.Diagnostics.TraceEventType>egyenértékű, hogy egy <xref:System.Diagnostics.EventLogEntryType>a a <xref:System.Diagnostics.EventInstance.EntryType%2A>tulajdonság.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> A <xref:System.Diagnostics.EventInstance>írása az eseménynaplóba, használja a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódust használ, az üzenetet kapott a `format` és `args` paraméterek.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> A `args` object tömbben alakítja át egy karakterlánc használata a <xref:System.String.Format%2A>metódust, hogy a `format` karakterlánc és `args` tömbben az üzenetet az eseménynaplóba. a karakterlánc formátuma</xref:System.String.Format%2A>      > [!NOTE] > Maximális értékét a `id` paraméter 65 535. Ha a `id` megadott érték nagyobb, mint 65 535, a maximális érték lesz érvényben."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Egy objektum, amely tartalmazza az aktuális folyamatazonosító szálazonosító és nyomkövetési adatok a verem."
    - id: source
      type: System.String
      description: "A név alapján határozza meg a kimeneti; általában az alkalmazás neve, amely a nyomkövetési esemény jön létre."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Az egyik a számbavételi érték került, ami miatt a nyomkövetési esemény típusa."
    - id: id
      type: System.Int32
      description: "Az esemény azonosítószáma. A kombinációja `source` és `id` egyedileg azonosít egy eseményt."
    - id: format
      type: System.String
      description: "A formázó karakterlánc, amely nulla vagy több objektumot a megfelelő formátumban elemet tartalmaz, a `args` tömb."
    - id: args
      type: System.Object[]
      description: "Egy <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> formázásához nulla vagy több objektumot tartalmazó tömb."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Nincs megadva.       – vagy – a naplózási bejegyzés karakterlánc 32766 karakternél hosszabb."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Üzenetet ír az eseménynaplóba erre a példányra."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Az üzenet írni."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>32766 karakternél hosszabb."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Üzenetet ír az eseménynaplóba erre a példányra."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Az üzenet írni."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>32766 karakternél hosszabb."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
