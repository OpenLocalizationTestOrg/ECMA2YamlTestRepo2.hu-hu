### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SchemaNameCollection
  id: SchemaNameCollection
  children:
  - System.DirectoryServices.SchemaNameCollection.Add(System.String)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  - System.DirectoryServices.SchemaNameCollection.Clear
  - System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  - System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Count
  - System.DirectoryServices.SchemaNameCollection.GetEnumerator
  - System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  - System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  - System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  - System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
  type: Class
  summary: "Tartalmazza a séma listájának neve, amely a <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>tulajdonsága egy <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> objektum használhatja.</xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>"
  syntax:
    content: 'public class SchemaNameCollection : System.Collections.IList'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  id: Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A megadott séma nevének hozzáfűzi a gyűjteményhez."
  syntax:
    content: public int Add (string value);
    parameters:
    - id: value
      type: System.String
      description: "A séma neve hozzáadására a gyűjteményhez."
    return:
      type: System.Int32
      description: "A megadott tulajdonság értékének nulla alapú indexét. Ha az objektum nem található, a visszatérési értéke -1."
  overload: System.DirectoryServices.SchemaNameCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  id: AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Egy készlet a megadott séma nevek hozzáfűzi a gyűjteményhez."
  syntax:
    content: public void AddRange (System.DirectoryServices.SchemaNameCollection value);
    parameters:
    - id: value
      type: System.DirectoryServices.SchemaNameCollection
      description: "A <xref href=&quot;System.DirectoryServices.SchemaNameCollection&quot;> </xref> , amely tartalmazza a séma nevét."
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Egy készlet a megadott séma nevek hozzáfűzi a gyűjteményhez."
  syntax:
    content: public void AddRange (string[] value);
    parameters:
    - id: value
      type: System.String[]
      description: "A típus <xref:System.String>, amely tartalmazza a séma nevének hozzáadandó</xref:System.String> tömbjét"
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  id: Clear
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Ez a gyűjtemény összes objektum eltávolítása."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.DirectoryServices.SchemaNameCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Meghatározza, hogy van-e a megadott séma nevének a gyűjteményben."
  syntax:
    content: public bool Contains (string value);
    parameters:
    - id: value
      type: System.String
      description: "Keresse meg a séma neve."
    return:
      type: System.Boolean
      description: "A visszatérési érték <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> , ha a megadott tulajdonság tartozik ehhez a gyűjteményhez; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SchemaNameCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Másolja át a séma nevének át tömbbé, egy adott index a tömb kezdődő ebben a gyűjteményben."
  syntax:
    content: public void CopyTo (string[] stringArray, int index);
    parameters:
    - id: stringArray
      type: System.String[]
      description: "Típusú tömb <xref:System.String>, amely fogadja a séma gyűjteménynevek.</xref:System.String>"
    - id: index
      type: System.Int32
      description: "A nulla alapú tömbindex, ahol a séma nevének másolásához."
  overload: System.DirectoryServices.SchemaNameCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Count
  id: Count
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A Count tulajdonság lekérése objektumok száma ebben a gyűjteményben."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Ebben a gyűjteményben található objektumok száma."
  overload: System.DirectoryServices.SchemaNameCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A gyűjtemény iterációt használó számbavevő adja vissza."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Ez a gyűjtemény iterációt használt számbavevő."
  overload: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Meghatározza, hogy a megadott séma nevének a gyűjtemény indexe."
  syntax:
    content: public int IndexOf (string value);
    parameters:
    - id: value
      type: System.String
      description: "Keresse meg a séma neve."
    return:
      type: System.Int32
      description: "A megadott séma neve, vagy&1; értéket, ha a séma neve nem található a gyűjteményben lévő nulla alapú indexét."
  overload: System.DirectoryServices.SchemaNameCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A séma nevének szúr be egy megadott indextől a gyűjtemény."
  remarks: "Ha a `index` paraméter értéke a gyűjteményben lévő elemek száma, ez a módszer az érték hozzáfűzi a gyűjtemény végéig."
  syntax:
    content: public void Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: "A gyűjteményhez beszúrására a sémanév amelynél nulla alapú indexét."
    - id: value
      type: System.String
      description: "A séma neve lehet beszúrni az ebben a gyűjteményben."
  overload: System.DirectoryServices.SchemaNameCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi vagy beállítja az objektum, amely létezik a megadott indexnél."
  remarks: "A C# Ez a tulajdonság akkor az <xref:System.DirectoryServices.SchemaNameCollection>osztály</xref:System.DirectoryServices.SchemaNameCollection> az indexelő       A JScript a típus által definiált indexelt alapértelmezett tulajdonságok használhatók, de meg explicit módon sajátokat nem határozhat meg. Azonban az expando attribútumot az osztály automatikusan tartalmaz egy alapértelmezett megadó indexelt tulajdonsága, amelynek típusa objektumot, és amelynek Indextípus <xref:System.String>.</xref:System.String>"
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "A gyűjteményhez nulla alapú indexét."
    return:
      type: System.String
      description: "Az objektum, amely a megadott indexnél."
  overload: System.DirectoryServices.SchemaNameCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Eltávolítja a megadott séma nevének a gyűjteményhez."
  syntax:
    content: public void Remove (string value);
    parameters:
    - id: value
      type: System.String
      description: "Távolítsa el a séma neve."
  overload: System.DirectoryServices.SchemaNameCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A séma neve, amely egy megadott indextől a gyűjtemény jelenleg eltávolítja."
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Eltávolítja a sémanév nulla alapú indexét."
  overload: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "A nulla alapú index kívül esik, vagy kisebb, mint nulla vagy annál a gyűjtemény méreténél."
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Másolja át a elemei a <xref:System.Collections.ICollection>való egy <xref:System.Array>, egy adott induló <xref:System.Array>index.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>Ez a cél <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> átmásolva elem</xref:System.Array> egydimenziós A <xref:System.Array>kell rendelkeznie a nulla alapú indexelést.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét `array` mely másolása megkezdődik."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>többdimenziós.       – vagy – a forrás elemeinek száma <xref:System.Collections.ICollection> nagyobb, mint a rendelkezésre álló terület <code>index</code> a cél végére <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref:System.Collections.ICollection>nem konvertálható automatikusan a cél típusa <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Egy érték, amely jelzi, hogy hozzáférést lekérdezi a <xref:System.Collections.ICollection>van (a többszálú futtatásra) szinkronizált.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Visszaadja egy objektum, amely segítségével a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> való hozzáférés szinkronizálása</xref:System.Collections.ICollection.SyncRoot%2A>       A legtöbb gyűjtemény osztályoknak a <xref:System.Collections?displayProperty=fullName>névtér is megvalósíthatja egy Synchronized metódus, amely biztosítja az alapul szolgáló gyűjtemény szinkronizált csomagolásának.</xref:System.Collections?displayProperty=fullName>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket.       [A Visual Basic, a C#]       A következő példa bemutatja, hogyan a gyűjteményhez történő zárolja a <xref:System.Collections.ICollection.SyncRoot%2A>a teljes enumerálása során: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a hozzáférést a <xref:System.Collections.ICollection>van (a többszálú futtatásra) szinkronizált; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi egy objektumot, amely segítségével a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> való hozzáférés szinkronizálása"
  remarks: "Az alapul szolgáló tárolási gyűjtemények nincs nyilvánosan elérhető, a várt megvalósítása nem az aktuális példány visszaadása. Vegye figyelembe, hogy az aktuális példány a mutató előfordulhat, hogy nem elegendő a gyűjteményeket, amelyek más gyűjtemények; burkolása Ezek visszaadja-e az alapul szolgáló gyűjtemény `SyncRoot` tulajdonság.       A legtöbb gyűjtemény osztályoknak a <xref:System.Collections?displayProperty=fullName>névteret is megvalósíthatja egy `Synchronized` metódus, amely biztosítja az alapul szolgáló gyűjtemény szinkronizált csomagolásának.</xref:System.Collections?displayProperty=fullName> Hogy a származtatott osztályok azonban adja meg a gyűjtemény használja saját szinkronizált verzióját a <xref:System.Collections.ICollection.SyncRoot%2A>tulajdonság.</xref:System.Collections.ICollection.SyncRoot%2A> A szinkronizálási kódot kell műveleteket végezhet a <xref:System.Collections.ICollection.SyncRoot%2A>a gyűjtemény, nem közvetlenül a gyűjteményben.</xref:System.Collections.ICollection.SyncRoot%2A> Ez biztosítja, hogy a gyűjtemények más objektumok származó megfelelő működését. Pontosabban más szállal, amely előfordulhat, hogy egyidejűleg módosítja a gyűjteménypéldány megfelelő szinkronizálási tart fenn.       Hiányában egy `Synchronized` metódus olyan gyűjtemény, a várható használat <xref:System.Collections.ICollection.SyncRoot%2A>dolgozunk: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` keresztül egy gyűjtemény enumerálását hajtja alapvetően nem szálbiztos eljárás.      </xref:System.Collections.ICollection.SyncRoot%2A> Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket.       [A Visual Basic, a C#]       A következő példa bemutatja, hogyan a gyűjteményhez történő zárolja a <xref:System.Collections.ICollection.SyncRoot%2A>a teljes enumerálása során: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Olyan objektum, amely segítségével a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> való hozzáférés szinkronizálása"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Egy elem hozzáadása a listához."
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Az elem hozzáadása a listához."
    return:
      type: System.Int32
      description: "A pozíció, amelybe az új elem lett beszúrva."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Meghatározza, hogy a lista tartalmazza-e a megadott értékkel."
  remarks: "Től kezdve a .NET-keretrendszer 2.0-s, ezt a módszert használja a megegyezik, és CompareTo módszereket annak megállapításához, hogy az elem a gyűjteményben lévő objektum létezik. A .NET-keretrendszer korábbi verzióiban ez a döntés történt egyenlő és CompareTo módszerek a cikk paraméter azokra az objektumokra vonatkozóan a gyűjteményben."
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Az érték kereséséhez a listában."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az érték megtalálható a listában, egyéb esetben pedig <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Meghatározza, hogy a listán megadott elem indexe."
  remarks: "Től kezdve a .NET-keretrendszer 2.0-s, ezt a módszert használja a megegyezik, és CompareTo módszereket annak megállapításához, hogy az elem a gyűjteményben lévő objektum létezik. A .NET-keretrendszer korábbi verzióiban ez a döntés történt egyenlő és CompareTo módszerek a cikk paraméter azokra az objektumokra vonatkozóan a gyűjteményben."
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Az elem található a listában."
    return:
      type: System.Int32
      description: "Az index <code> value </code> található a listában, ha sikertelen, ha a -1."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "A megadott indexpozíciónál szúr be egy elemet a listára."
  remarks: "Ha `index` a listán szereplő elemek száma egyenlő majd *érték* vége a rendszer hozzáfűzi.       A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét, amelynél értéket kell beilleszteni."
    - id: value
      type: System.Object
      description: "Az elem beszúrása a listában."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref:System.Collections.IList>mérete4 rögzített.</xref:System.Collections.IList>"
  remarks: "Rögzített méretű gyűjtemény nem teszi lehetővé hozzáadását és eltávolítását, az elem után a gyűjtemény létrejött, de lehetővé teszi a meglévő elemeket módosítása."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Collections.IList>rendelkezik egy rögzített méretű; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref:System.Collections.IList>csak olvasható.</xref:System.Collections.IList>"
  remarks: "A csak olvasható gyűjtemény nem teszi lehetővé a hozzáadása, eltávolítása vagy módosítása az elem a gyűjtemény létrehozása után."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Collections.IList>csak olvasható; egyéb, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lekérdezi vagy beállítja az elem a megadott indexnél."
  remarks: 'Ez a tulajdonság lehetővé teszi a hozzáférést egy adott elem a gyűjteményben a következő szintaxissal: `myCollection[index]`.'
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Az elem lekérése vagy beállítása nulla alapú indexét."
    return:
      type: System.Object
      description: "Az elem a megadott indexnél."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>Nincs érvénytelen index a <xref:System.Collections.IList>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A tulajdonság értéke és az <xref:System.Collections.IList>csak olvasható.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Eltávolítja a első előfordulása egy adott <code> value </code> a listából."
  remarks: "A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek."
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A `value` eltávolítása a listából."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Count
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
- uid: System.DirectoryServices.SchemaNameCollection.Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add
  nameWithType: SchemaNameCollection.Add
- uid: System.DirectoryServices.SchemaNameCollection.AddRange*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange
  nameWithType: SchemaNameCollection.AddRange
- uid: System.DirectoryServices.SchemaNameCollection.Clear*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear
  nameWithType: SchemaNameCollection.Clear
- uid: System.DirectoryServices.SchemaNameCollection.Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains
  nameWithType: SchemaNameCollection.Contains
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo
  nameWithType: SchemaNameCollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.Count*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SchemaNameCollection.GetEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf
  nameWithType: SchemaNameCollection.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert
  nameWithType: SchemaNameCollection.Insert
- uid: System.DirectoryServices.SchemaNameCollection.Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item
  nameWithType: SchemaNameCollection.Item
- uid: System.DirectoryServices.SchemaNameCollection.Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove
  nameWithType: SchemaNameCollection.Remove
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt
  nameWithType: SchemaNameCollection.RemoveAt
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SchemaNameCollection.System.Collections.IList.Add
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SchemaNameCollection.System.Collections.IList.Item
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove
