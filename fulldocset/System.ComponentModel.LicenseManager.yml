### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Tulajdonságai és metódusai licenc hozzáadása egy összetevő, és kezeléséhez biztosít egy <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>. Ez az osztály nem örökölhető."
  remarks: "A következőket biztosítja a zárolása osztály `static` tulajdonságok: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>és <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> Az osztály is biztosít a következő `static` módszerek: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, és <xref:System.ComponentModel.LicenseManager.Validate%2A>.</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       Egy összetevő, amelyet szeretne licenc létrehozásakor tegye a következőket: 1.  Adja meg a <xref:System.ComponentModel.LicenseProvider> <xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute> összetevő megjelölésével</xref:System.ComponentModel.LicenseProvider>      2.  Hívás <xref:System.ComponentModel.LicenseManager.Validate%2A>vagy <xref:System.ComponentModel.LicenseManager.IsValid%2A>összetevő konstruktorában.</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>jelez a <xref:System.ComponentModel.LicenseException>Ha megpróbálja hozzon létre egy példányt egy érvényes licenc nélkül.</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>nem kivételt jelez.</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  Hívás <xref:System.ComponentModel.License.Dispose%2A>licenc számára biztosított, ha az összetevő eldobása vagy véglegesíti a.</xref:System.ComponentModel.License.Dispose%2A>       Licencelési további információkért lásd: [hogyan: licenc összetevőket és -vezérlők](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adott egy környezetben, amelyben használhatja a licencelt példány hoz létre a megadott típus egy példánya."
  remarks: "A <xref:System.ComponentModel.LicenseContext>Adja meg, mint a `creationContext` paraméter használatos <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>a <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> élettartamára</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> A CreateWithContext metódus más szálak blokkolja a <xref:System.AppDomain>módosítsák a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, így CreateWithContext elemi műveletként viselkedik.</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>, amely jelzi, hogy a típus létrehozásához.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> , amely megadja, hogy a licencelt példány használatakor."
    return:
      type: System.Object
      description: "A megadott típus egy példánya."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hoz létre a megadott típus egy példánya a megadott argumentumok megadva olyan környezetben, amelyben a licencelt példányát használhatja."
  remarks: "A <xref:System.ComponentModel.LicenseContext>Adja meg, mint a `creationContext` paraméter használatos <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>a <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> élettartamára</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Ez a módszer minden más szálak blokkolja a <xref:System.AppDomain>módosítsák a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, így <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>elemi műveletként viselkedik.</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>, amely jelzi, hogy a típus létrehozásához.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> , amely megadja, hogy a licencelt példány használatakor."
    - id: args
      type: System.Object[]
      description: "Típusú tömb <xref:System.Object>, amely jelöli, hogy a típus argumentumai.</xref:System.Object>"
    return:
      type: System.Object
      description: "Az argumentumok a megadott tömb a megadott típusú példányok."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Lekérdezi vagy beállítja az aktuális <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>, amely meghatározza, hogy a licencelt objektum használatos."
  remarks: "Ha a felhasználó kísérel meg egy érvényes <xref:System.ComponentModel.License>, a felhasználónak tudnia kell a környezetben, amelyben a <xref:System.ComponentModel.License>érvényes a <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>metódus.</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> A <xref:System.ComponentModel.LicenseContext>által visszaadott tulajdonság az összes kell átadni <xref:System.ComponentModel.LicenseProvider>osztályok.</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> , amely megadja, hogy a licencelt objektum használatakor."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A LicenseManager CurrentContext jelenleg zárolva van, és nem módosítható."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adja vissza, hogy az adott típus rendelkezik-e egy érvényes licenccel."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>található egy érvényes licenc tartalmát.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az adott típus licencköteles; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Meghatározza, hogy érvényes licenc kaphatja a megadott típus esetében."
  remarks: "Az IsValid metódus visszaadja `true` Ha a típus nem engedélyezett, vagy licencköteles és a licenc érvénytelen.       Ez a módszer nem lépett, egy <xref:System.ComponentModel.LicenseException>Amikor azt nem adja meg egy érvényes <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> A <xref:System.ComponentModel.LicenseManager.Validate%2A>metódus kivételt jelez.</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>kérő objektum típusát jelöli, amelyek a <xref href=&quot;System.ComponentModel.License&quot;> </xref>.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha érvényes licenc engedélyezhetők; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Meghatározza, hogy érvényes licenc lehet adni a megadott típusú példány. Ezzel a módszerrel hoz létre egy érvényes <xref href=&quot;System.ComponentModel.License&quot;> </xref>."
  remarks: "A <xref:System.ComponentModel.LicenseManager.IsValid%2A>metódus beolvasása `true` amikor a `type` paraméter nem rendelkezik licenccel, vagy ha a licenccel rendelkező és a `license` paraméter érvénytelen.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Ez a módszer nem lépett, egy <xref:System.ComponentModel.LicenseException>Amikor azt nem adja meg egy érvényes <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> A <xref:System.ComponentModel.LicenseManager.Validate%2A>metódus kivételt jelez.</xref:System.ComponentModel.LicenseManager.Validate%2A>       Ha a `license` paraméter nem `null` után ez a hívás, az objektum, amely kéri a <xref:System.ComponentModel.License>meghívásával licencfeltételeinek kell eldobásakor a <xref:System.ComponentModel.License.Dispose%2A>metódust, ha az objektum el, vagy a véglegesített.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>képviselő objektum, amely kéri a licenc típusa.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "A megadott vagy típusú objektum a megadott típusból származik."
    - id: license
      type: System.ComponentModel.License
      description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref> , amely egy érvényes licenc vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ha érvényes licenc nem lehet biztosítani."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha egy érvényes <xref href=&quot;System.ComponentModel.License&quot;> </xref> megadott; ellenkező esetben lehet <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Megakadályozza, hogy az aktuális végrehajtott változtatások <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> az adott objektum."
  remarks: "Használja a <xref:System.ComponentModel.LicenseContext>lekérni a <xref:System.ComponentModel.License>objektum.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Ez a módszer zárolja a <xref:System.ComponentModel.LicenseContext>, megakadályozva a <xref:System.ComponentModel.License>letöltését.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Az objektum, amelynek aktuális környezetet zárolni szeretne."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A környezet már zárolt."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Lehetővé teszi, hogy az aktuális változtatások <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> az adott objektum."
  remarks: "Használja a <xref:System.ComponentModel.LicenseContext>lekérni a <xref:System.ComponentModel.License>objektum.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Ez a módszer feloldja a <xref:System.ComponentModel.LicenseContext>, így a <xref:System.ComponentModel.License>kérhető.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Az objektum, amelynek kontextusban feloldani kívánt."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>mint egy korábbi hívás szerepel egy másik felhasználót jelöl <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Lekérdezi a <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> amely adja meg, ha használható a licencelt objektum a <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  remarks: "Ha ez a tulajdonság nem található olyan <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>értéket adja vissza, <xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "Egy a <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> értékek, a a <xref:System.ComponentModel.LicenseManager.CurrentContext*>tulajdonság.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Meghatározza, hogy licenc kaphatja a megadott típus esetében."
  remarks: "Ez a módszer jelez a <xref:System.ComponentModel.LicenseException>Ha érvényes <xref:System.ComponentModel.License>nem lehet biztosítani.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> A <xref:System.ComponentModel.LicenseManager.IsValid%2A>metódus nem lépett fel kivételhiba.</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>képviselő objektum, amely kéri a licenc típusa.</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref> nem lehet biztosítani."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Meghatározza, hogy licenc engedélyezhetők a megadott típus példánya."
  remarks: "Ez a módszer jelez a <xref:System.ComponentModel.LicenseException>Ha érvényes <xref:System.ComponentModel.License>nem lehet biztosítani.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> A <xref:System.ComponentModel.LicenseManager.IsValid%2A>metódus nem lépett fel kivételhiba.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Kérő összes objektum egy <xref:System.ComponentModel.License>a licenc meghívásával kell azzal a <xref:System.ComponentModel.License.Dispose%2A>metódust, ha az objektum el, vagy a véglegesített.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>képviselő objektum, amely kéri a licenc típusa.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Egy <xref:System.Object>a megadott típus vagy egy adott típusból származik.</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "A típus licencét szerezte meg, de egy <xref href=&quot;System.ComponentModel.License&quot;> </xref> nem adható."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
