### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.RuntimeWrappedException
  id: RuntimeWrappedException
  children:
  - System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  langs:
  - csharp
  name: RuntimeWrappedException
  nameWithType: RuntimeWrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException
  type: Class
  summary: "Fussa kivételt, amely nem a az <xref:System.Exception>osztályhoz.</xref:System.Exception> Ez az osztály nem örökölhető."
  remarks: "Néhány nyelven, C++, például lehetővé teszik a throw kivétel ez alól a felügyelt típussal.  Más nyelven, például a Microsoft C# és Visual Basic, a szükséges, hogy minden kivétel kivétel <xref:System.Exception>osztályból</xref:System.Exception> származik  A kompatibilitás nyelvek között, a közös nyelvi futtatókörnyezet (CLR) becsomagolja objektumok, amelyek nem a <xref:System.Exception>egy RuntimeWrappedException objektumban.</xref:System.Exception>       Használhatja a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>osztály adhatja meg, hogy kivételek megjelenjenek-catch blokkok és kivételszűrők belül burkolt egy összeállítás.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>  Több nyelv compilers – beleértve a Microsoft C# és Visual Basic compilers – alkalmazásburkoló viselkedésének alapértelmezés szerint ez az attribútum alkalmazni.       Vegye figyelembe, hogy a futtatókörnyezet továbbra is becsomagolja kivételek, még akkor is, ha használja a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>osztály adhatja meg, hogy nem szeretné, hogy azok burkolva.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>  Ebben az esetben a kivételek olyan burkolatlan csak catch blokkok vagy a kivételszűrők belül."
  example:
  - "The following code example demonstrates how to throw a <xref:System.String> object as an exception in C++ and catch it using a RuntimeWrappedException object.  \n  \n [!code-cpp[System.Runtime.CompilerServices.RuntimeWrappedException#1](~/add/codesnippet/cpp/t-system.runtime.compile_12_1.cpp)]"
  syntax:
    content: 'public sealed class RuntimeWrappedException : Exception'
  inheritance:
  - System.Exception
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: "Beállítja a <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> információ a kivételről objektum."
  remarks: "A GetObjectData eljárás módszer beállítása egy <xref:System.Runtime.Serialization.SerializationInfo>objektum összes kivétel objektum adatokkal szerializálási szánt.</xref:System.Runtime.Serialization.SerializationInfo> Deszerializálás során, a kivétel előállított a `SerializationInfo` továbbított az adatfolyam."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objektum, amely tárolja a kivétel lépett fel az éppen szerializált objektum adatait."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext>objektum, amely a cél- és környezeti információkat tartalmaz.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  id: WrappedException
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  langs:
  - csharp
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: "Az objektum, amely szerint burkolása lekérdezi a <xref href=&quot;System.Runtime.CompilerServices.RuntimeWrappedException&quot;> </xref> objektum."
  remarks: "A WrappedException tulajdonság lekérdezi egy objektumot, amely, egy nyelv, amely lehetővé teszi, hogy a kivételeket, amelyek a <xref:System.Exception>osztályból</xref:System.Exception> származik kivételt dobott"
  syntax:
    content: public object WrappedException { get; }
    return:
      type: System.Object
      description: "Az objektum, amely szerint burkolása a <xref href=&quot;System.Runtime.CompilerServices.RuntimeWrappedException&quot;> </xref> objektum."
  overload: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Exception
  isExternal: false
  name: System.Exception
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: GetObjectData
  nameWithType: RuntimeWrappedException.GetObjectData
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
