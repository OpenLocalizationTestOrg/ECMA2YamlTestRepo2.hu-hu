### YamlMime:ManagedReference
items:
- uid: System.Web.UI.PageAsyncTask
  id: PageAsyncTask
  children:
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  - System.Web.UI.PageAsyncTask.BeginHandler
  - System.Web.UI.PageAsyncTask.EndHandler
  - System.Web.UI.PageAsyncTask.ExecuteInParallel
  - System.Web.UI.PageAsyncTask.State
  - System.Web.UI.PageAsyncTask.TimeoutHandler
  langs:
  - csharp
  name: PageAsyncTask
  nameWithType: PageAsyncTask
  fullName: System.Web.UI.PageAsyncTask
  type: Class
  summary: "Egy olyan lapra regisztrált aszinkron feladat adatait tartalmazza. Ez az osztály nem örökölhető."
  remarks: "Az ASP.NET 2.0-s verziójában lehetővé teszi több feladat lapra regisztrálja, és a lap megjelenítése előtt aszinkron módon futtatja őket. Megadhatja, hogy a feladat futni aszinkron módon ha lassú folyamat, és nem szeretné, hogy más folyamatok összekapcsolását azt. Az aszinkron feladatok párhuzamosan vagy egymás után hajtható végre.       A PageAsyncTask objektum szerepelnie kell a lap a <xref:System.Web.UI.Page.RegisterAsyncTask%2A>metódus.</xref:System.Web.UI.Page.RegisterAsyncTask%2A> Az oldal nem kell aszinkron módon fel kell dolgozni annak aszinkron feladatokat végrehajtani. Beállíthatja a `Async` vagy attribútumot `true` (ahogy az alábbi kódpéldát) vagy `false` az oldalon az irányelv és az aszinkron feladatok továbbra is dolgoz fel aszinkron módon: `<%@ Page Async=&quot;true&quot; %>` amikor a `Async` attribútum van beállítva `false`, a szál, amely végrehajtja a lap le lesz tiltva addig, amíg minden aszinkron feladat be nem fejeződik.       Minden aszinkron feladatot regisztrálása előtt a <xref:System.Web.UI.Page.PreRenderComplete>esemény mindenképpen végrehajtja az automatikusan a lapon, ha azok nem már végrehajtott.</xref:System.Web.UI.Page.PreRenderComplete> Miután regisztrált aszinkron feladatok a <xref:System.Web.UI.Page.PreRenderComplete>esemény a explicit módon kell végrehajtani a <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metódus.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> </xref:System.Web.UI.Page.PreRenderComplete> A <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>módszer is használható feladatok előtt indítsa el a <xref:System.Web.UI.Page.PreRenderComplete>esemény.</xref:System.Web.UI.Page.PreRenderComplete> </xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> A <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>módszer minden olyan regisztrált aszinkron feladatok végrehajtása a lapon nem került végrehajtásra.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>       Alapértelmezés szerint aszinkron feladat időtúllépést okoz, ha azt 45 másodpercen belül nem fejeződik. A Web.config fájl vagy a lap direktívájában különböző időtúllépési értéket adhat meg. A `<pages>` szakasz a Web.config fájl tartalmaz egy `asyncTimeout` attribútum, a lent látható módon.       `<system.web>`       `<pages asyncTimeout=&quot;30&quot;>`       `</pages>`       `</system.web>`A lap direktívájában tartalmaz egy `AsyncTimeout` attribútum.       `<%@ Page AsyncTimeout=&quot;30&quot; %>`"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_2.cs)]"
  syntax:
    content: public sealed class PageAsyncTask
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> osztály használatával egy eseménykezelő, amely lehetővé teszi a lehet megszakítani a feladatot."
  remarks: "Ez a konstruktor becsomagolja egy <xref:System.Web.CancellableTaskEventHandler>delegálása, hogy a <xref:System.Web.UI.PageAsyncTask>objektum aszinkron kód integrálva (alapján <xref:System.Threading.Tasks.Task>objektumok) a meglévő ASP.NET Web Forms keretrendszerre aszinkron lapok szolgáltatással.</xref:System.Threading.Tasks.Task> </xref:System.Web.UI.PageAsyncTask> </xref:System.Web.CancellableTaskEventHandler> Az ASP.NET rendszer jelezze a <xref:System.Threading.CancellationToken>átadott objektum egy <xref:System.Web.CancellableTaskEventHandler>megszüntetés alapuló delegálása a <xref:System.Web.UI.Page.AsyncTimeout%2A>attribútum be a `@ Page` irányelv weblap.</xref:System.Web.UI.Page.AsyncTimeout%2A> </xref:System.Web.CancellableTaskEventHandler> </xref:System.Threading.CancellationToken> Ha a <xref:System.Web.UI.Page.AsyncTimeout%2A>elérte az értéket, a <xref:System.Threading.CancellationToken>objektum felé a jelzésküldés.</xref:System.Threading.CancellationToken> </xref:System.Web.UI.Page.AsyncTimeout%2A> A `CancellationToken` bármely aszinkron API-t a <xref:System.Web.CancellableTaskEventHandler>osztálytól</xref:System.Web.CancellableTaskEventHandler> megvalósítását által meghívott kell lennie átadott paraméter"
  syntax:
    content: public PageAsyncTask (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: "Eseménykezelő."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> osztály használatával egy eseménykezelő, amely lehetővé teszi a kezelni kívánt feladat."
  syntax:
    content: public PageAsyncTask (Func<System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.Tasks.Task}
      description: "Eseménykezelő."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> osztály az alapértelmezett érték használatával hajthatók végre párhuzamosan."
  remarks: "Ez a megvalósítás a konstruktor készletek a <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>tulajdonságot `false` , az aszinkron feladat nem dolgozza fel az oldalon más tevékenységekkel párhuzamosan.</xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "A kezelő hívására aszinkron feladat verziótól."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "A kezelő hívható, ha a feladat sikeresen befejeződött az időkorláton belül."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "A kezelő hívható, ha a feladat nem végzi el sikeresen az időkorláton belül."
    - id: state
      type: System.Object
      description: "Az objektum, amely a feladat állapotát jeleníti meg."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A <code> beginHandler </code> paraméter vagy <code> endHandler </code> paraméter nincs megadva."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> osztály párhuzamos végrehajtása a megadott értéket használja."
  remarks: "Ez a konstruktor végrehajtásának lehetővé teszi, hogy meg kell adnia, hogy a aszinkron feladatot dolgoz fel, és más feladatok lapon párhuzamosan."
  example:
  - "The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/3bf006c1-f830-4b70-9cc2-_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/3bf006c1-f830-4b70-9cc2-_1.aspx)]"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "A kezelő hívására aszinkron feladat verziótól."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "A kezelő hívható, ha a feladat sikeresen befejeződött az időkorláton belül."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "A kezelő hívható, ha a feladat nem végzi el sikeresen az időkorláton belül."
    - id: state
      type: System.Object
      description: "Az objektum, amely a feladat állapotát jeleníti meg."
    - id: executeInParallel
      type: System.Boolean
      description: "Az érték, amely azt jelzi, hogy a feladat azokat a rendszer párhuzamosan, más feladatok."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A <code> beginHandler </code> paraméter vagy <code> endHandler </code> paraméter nincs megadva."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  id: BeginHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Lekérdezi a metódus hívása, amikor megkezdi a aszinkron feladat."
  remarks: "A BeginHandler delegált konstruktorában van beállítva."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A BeginHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_2.cs)]"
  syntax:
    content: public System.Web.BeginEventHandler BeginHandler { get; }
    return:
      type: System.Web.BeginEventHandler
      description: "A <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> delegált esetén, amely a metódus hívására az aszinkron feladat verziótól jelöli."
  overload: System.Web.UI.PageAsyncTask.BeginHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.EndHandler
  id: EndHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Lekérdezi a metódust kell meghívni, amikor a feladat sikeresen befejeződik az időkorláton belül."
  remarks: "A EndHandler delegált konstruktorában van beállítva."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An EndHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler EndHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "Egy <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> delegált esetén, amely jelöli az metódust kell meghívni, amikor a feladat sikeresen befejeződik az időkorláton belül."
  overload: System.Web.UI.PageAsyncTask.EndHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  id: ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Egy érték, amely azt jelzi, hogy a feladat azokat a rendszer párhuzamosan, más feladatok beolvasása."
  remarks: "A ExecuteInParallel tulajdonság értéke a konstruktorban. Ha több feladat regisztrálva van egy lap, és a ExecuteInParallel tulajdonsága `true`, akkor egyszerre dolgoznak fel ezeket a feladatokat. Azonban ha a ExecuteInParallel tulajdonsága `false`, akkor ezeket a feladatokat feldolgozása sorrendben történik. Például ha egy lap két aszinkron feladatok befejezéséhez 5 másodpercet vett igénybe, hogy minden egyes és ExecuteInParallel értéke `true`, mindkét feladat befejeződik, az 5 másodperc. Ha ExecuteInParallel `false` ugyanezen a két feladat, akkor az első feladat befejeződik, az 5 másodperc és a második feladat befejeződik, az első feladat befejezése után 5 másodperc."
  example:
  - "The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_3_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_3_1.aspx)]"
  syntax:
    content: public bool ExecuteInParallel { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a feladat fel kell dolgozni, más feladatok; párhuzamosan Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.State
  id: State
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Lekérdezi a olyan objektum, amely a feladat állapotát jeleníti meg."
  remarks: "Az állapot tulajdonság van beállítva a konstruktorban, és nem lehet módosítani a aszinkron feladat végrehajtása során. Egyedi értékeket rendel a megfelelő állapot tulajdonságaik tudja különböztetni az aszinkron feladatok lapon."
  example:
  - "The following code example creates three asynchronous tasks and gives them unique values for their State properties. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_4_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_4_1.aspx)]"
  syntax:
    content: public object State { get; }
    return:
      type: System.Object
      description: "Egy <xref:System.Object>a feladat állapotát jeleníti meg, amely.</xref:System.Object>"
  overload: System.Web.UI.PageAsyncTask.State*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  id: TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Lekérdezi a metódust kell meghívni, amikor a feladat nem sikerült az időkorláton belül."
  remarks: "A TimeoutHandler delegált konstruktorában van beállítva."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A TimeoutHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler TimeoutHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "Egy <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> delegált esetén, amely jelöli az metódust kell meghívni, amikor a feladat nem sikerült az időkorláton belül."
  overload: System.Web.UI.PageAsyncTask.TimeoutHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<CancellationToken,Task>
  nameWithType: Func<CancellationToken,Task>
  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
- uid: System.Web.UI.PageAsyncTask.#ctor*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask
  nameWithType: PageAsyncTask.PageAsyncTask
- uid: System.Web.UI.PageAsyncTask.BeginHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
