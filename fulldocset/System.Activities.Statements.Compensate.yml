### YamlMime:ManagedReference
items:
- uid: System.Activities.Statements.Compensate
  id: Compensate
  children:
  - System.Activities.Statements.Compensate.#ctor
  - System.Activities.Statements.Compensate.CacheMetadata(System.Activities.NativeActivityMetadata)
  - System.Activities.Statements.Compensate.Cancel(System.Activities.NativeActivityContext)
  - System.Activities.Statements.Compensate.Execute(System.Activities.NativeActivityContext)
  - System.Activities.Statements.Compensate.Target
  langs:
  - csharp
  name: Compensate
  nameWithType: Compensate
  fullName: System.Activities.Statements.Compensate
  type: Class
  summary: "Explicit módon indítja a kompenzációs kezelőt a tevékenységet egy <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>."
  syntax:
    content: 'public sealed class Compensate : System.Activities.NativeActivity'
  inheritance:
  - System.Object
  - System.Activities.Activity
  - System.Activities.NativeActivity
  implements: []
  inheritedMembers:
  - System.Activities.Activity.CacheId
  - System.Activities.Activity.Constraints
  - System.Activities.Activity.DisplayName
  - System.Activities.Activity.Id
  - System.Activities.Activity.ShouldSerializeDisplayName
  - System.Activities.Activity.ToString
  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  - System.Activities.NativeActivity.CanInduceIdle
  - System.Activities.NativeActivity.Implementation
  - System.Activities.NativeActivity.ImplementationVersion
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  platform:
  - net462
- uid: System.Activities.Statements.Compensate.#ctor
  id: '#ctor'
  parent: System.Activities.Statements.Compensate
  langs:
  - csharp
  name: Compensate()
  nameWithType: Compensate.Compensate()
  fullName: System.Activities.Statements.Compensate.Compensate()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Activities.Statements.Compensate&quot;> </xref> osztály."
  syntax:
    content: public Compensate ();
    parameters: []
  overload: System.Activities.Statements.Compensate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.Compensate.CacheMetadata(System.Activities.NativeActivityMetadata)
  id: CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.Statements.Compensate
  langs:
  - csharp
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: Compensate.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.Statements.Compensate.CacheMetadata(NativeActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.NativeActivityMetadata
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Activities.Statements.Compensate.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.Compensate.Cancel(System.Activities.NativeActivityContext)
  id: Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.Compensate
  langs:
  - csharp
  name: Cancel(NativeActivityContext)
  nameWithType: Compensate.Cancel(NativeActivityContext)
  fullName: System.Activities.Statements.Compensate.Cancel(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void Cancel (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Activities.Statements.Compensate.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.Compensate.Execute(System.Activities.NativeActivityContext)
  id: Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.Compensate
  langs:
  - csharp
  name: Execute(NativeActivityContext)
  nameWithType: Compensate.Execute(NativeActivityContext)
  fullName: System.Activities.Statements.Compensate.Execute(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void Execute (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Activities.Statements.Compensate.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.Compensate.Target
  id: Target
  parent: System.Activities.Statements.Compensate
  langs:
  - csharp
  name: Target
  nameWithType: Compensate.Target
  fullName: System.Activities.Statements.Compensate.Target
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "Lekérdezi vagy beállítja a &lt;xref:System.WorkflowModel.InArgument%601&gt; , amely tartalmazza a <xref:System.Activities.Statements.CompensationHandle>a <xref href=&quot;System.Activities.Statements.Compensate&quot;> </xref> tevékenység.</xref:System.Activities.Statements.CompensationHandle>"
  remarks: "Ha a célja a <xref:System.Activities.Statements.CompensationHandle>meg van adva, a <xref:System.Activities.Statements.Compensate>tevékenység explicit módon hívja meg a kompenzációs kezelőt <xref:System.Activities.Statements.CompensableActivity>, a <xref:System.Activities.Statements.CompensationHandle>.</xref:System.Activities.Statements.CompensationHandle> ad vissza, amely</xref:System.Activities.Statements.CompensableActivity> a</xref:System.Activities.Statements.Compensate> </xref:System.Activities.Statements.CompensationHandle> Ha a célja a <xref:System.Activities.Statements.CompensationHandle>nincs megadva, a <xref:System.Activities.Statements.Compensate>tevékenység elindítja az alárendelt alapértelmezett megtérítésére <xref:System.Activities.Statements.CompensableActivity>tevékenységek sikeres befejezése fordított sorrendben.</xref:System.Activities.Statements.CompensableActivity> </xref:System.Activities.Statements.Compensate> </xref:System.Activities.Statements.CompensationHandle> Egy <xref:System.>InvalidOperationException? qualifyHint = False & autoUpgrade = True vált ki, ha a cél hivatkozik egy <xref:System.Activities.Statements.CompensableActivity>, amely korábban megerősítve, vagy kompenzálva.</xref:System.Activities.Statements.CompensableActivity> </xref:System.>       Ez a tulajdonság csak olvasható futásidőben. Ha a beállítás értéke futásidőben, egy <xref:System.InvalidOperationException>következik be.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Activities.InArgument<System.Activities.Statements.CompensationToken> Target { get; set; }
    return:
      type: System.Activities.InArgument{System.Activities.Statements.CompensationToken}
      description: "A &lt;xref:System.WorkflowModel.InArgument%601&gt; , amely tartalmazza a <xref:System.Activities.Statements.CompensationHandle>a <xref href=&quot;System.Activities.Statements.Compensate&quot;> </xref>.</xref:System.Activities.Statements.CompensationHandle>"
  overload: System.Activities.Statements.Compensate.Target*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.NativeActivity
  isExternal: false
  name: System.Activities.NativeActivity
- uid: System.Activities.Statements.Compensate.#ctor
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Compensate()
  nameWithType: Compensate.Compensate()
  fullName: System.Activities.Statements.Compensate.Compensate()
- uid: System.Activities.Statements.Compensate.CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: Compensate.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.Statements.Compensate.CacheMetadata(NativeActivityMetadata)
- uid: System.Activities.NativeActivityMetadata
  parent: System.Activities
  isExternal: false
  name: NativeActivityMetadata
  nameWithType: NativeActivityMetadata
  fullName: System.Activities.NativeActivityMetadata
- uid: System.Activities.Statements.Compensate.Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Cancel(NativeActivityContext)
  nameWithType: Compensate.Cancel(NativeActivityContext)
  fullName: System.Activities.Statements.Compensate.Cancel(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.Activities.Statements.Compensate.Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Execute(NativeActivityContext)
  nameWithType: Compensate.Execute(NativeActivityContext)
  fullName: System.Activities.Statements.Compensate.Execute(NativeActivityContext)
- uid: System.Activities.Statements.Compensate.Target
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Target
  nameWithType: Compensate.Target
  fullName: System.Activities.Statements.Compensate.Target
- uid: System.Activities.InArgument{System.Activities.Statements.CompensationToken}
  parent: System.Activities
  isExternal: false
  name: InArgument<CompensationToken>
  nameWithType: InArgument<CompensationToken>
  fullName: System.Activities.InArgument<System.Activities.Statements.CompensationToken>
  spec.csharp:
  - uid: System.Activities.InArgument`1
    name: InArgument
    nameWithType: InArgument
    fullName: InArgument<System.Activities.Statements.CompensationToken>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Statements.CompensationToken
    name: CompensationToken
    nameWithType: CompensationToken
    fullName: CompensationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Statements.Compensate.#ctor*
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Compensate
  nameWithType: Compensate.Compensate
- uid: System.Activities.Statements.Compensate.CacheMetadata*
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: CacheMetadata
  nameWithType: Compensate.CacheMetadata
- uid: System.Activities.Statements.Compensate.Cancel*
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Cancel
  nameWithType: Compensate.Cancel
- uid: System.Activities.Statements.Compensate.Execute*
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Execute
  nameWithType: Compensate.Execute
- uid: System.Activities.Statements.Compensate.Target*
  parent: System.Activities.Statements.Compensate
  isExternal: false
  name: Target
  nameWithType: Compensate.Target
