### YamlMime:ManagedReference
items:
- uid: System.Web.UI.DataVisualization.Charting.StripLine
  id: StripLine
  children:
  - System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  - System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  - System.Web.UI.DataVisualization.Charting.StripLine.Font
  - System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  - System.Web.UI.DataVisualization.Charting.StripLine.Interval
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  - System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  - System.Web.UI.DataVisualization.Charting.StripLine.Name
  - System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  - System.Web.UI.DataVisualization.Charting.StripLine.Text
  - System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  - System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  - System.Web.UI.DataVisualization.Charting.StripLine.Url
  langs:
  - csharp
  name: StripLine
  nameWithType: StripLine
  fullName: System.Web.UI.DataVisualization.Charting.StripLine
  type: Class
  summary: "A diagram sávok jelöli."
  remarks: "Sáv vonalak vagy sávok, olyan rendszeres vagy egyéni időközönként diagram hátterének árnyalása vízszintes vagy függőleges tartományt. Használhatja a sávok:-a diagram egyedi értékek gyűjtéséhez olvashatóság javítása.      -Külön adatpontok a diagram olvasásakor.      -Kiemelés a dátumokat, amelyek rendszeres időközönként, például hétvégi adatok azonosítására mutat.      -Jelöljön ki egy adott kulcs adattartomány.      -A küszöbérték sor hozzáadása egy adott konstans érték.       Egyetlen StripLine objektum vagy kivehető egyszer, vagy többször, egy adott időszakban. Ez a művelet által szabályozott a <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Ha a -1 érték hozzá van rendelve a <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>tulajdonságot, egy szalag sor kell rajzolni.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Ha egy nem nulla értéke van hozzárendelve a <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>tulajdonságot, egy szalag sort kell rajzolni ismételten minden adott időközönként.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> A helyet, ahol a sáv vonal megrajzolása is hatással van a <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>és <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A>sáv vonal tulajdonságainak.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>       Sávok társított mindig egy <xref:System.Web.UI.DataVisualization.Charting.Axis>objektum.</xref:System.Web.UI.DataVisualization.Charting.Axis> Ezt követően adhatók hozzá mind a tervezés során, és a futási idő.       Adja hozzá a vízszintes vagy függőleges vonal jeleníti meg a küszöbérték, állítsa be a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0.0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Ennek eredményeképpen az egy vonal alatt. Használhatja a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>és <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>színének, szélességének és használt vonal stílusának tulajdonságait.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Diagram háttérképének tulajdonságok nélkül (`Back*`) mikor használják a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0.0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Használja a <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A>tulajdonság rendelje hozzá a szöveg egy szalag sor sáv vonal.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> Az elhelyezési és ez a szöveg helyzetét vezérelhető a <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>       Amikor több sávok ugyanarra a tengelyre meghatározása, nem lehetséges, hogy a sávok átfedik. A mélységi StripLine objektum határozza meg a előfordulás sorrendjét a <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection>objektum.</xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> Ez azt jelenti, hogy először; jelenik-e az első előfordulás a második előfordulása megrajzolása második, és így tovább.       Sávok nem támogatottak a következő diagram esetében: a kör, perec, tölcsér, piramis, Kagi, háromvonalas Trendváltozási, o-x, poláris és sugárdiagram."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ' Adds a week of data with values between 20 and 35.   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ' Adds repeating horizontal strip lines at intervals of 5.   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()  \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ' Adds strip lines to highlight weekend values.   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ' Adds a horizontal threshold strip line at the mean value of the first series.  \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("IntervalOffset")]

      public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritance:
  - System.Object
  - System.Web.UI.DataVisualization.Charting.ChartElement
  implements:
  - System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritedMembers:
  - System.Web.UI.DataVisualization.Charting.ChartElement.Dispose
  - System.Web.UI.DataVisualization.Charting.ChartElement.Equals(System.Object)
  - System.Web.UI.DataVisualization.Charting.ChartElement.GetHashCode
  - System.Web.UI.DataVisualization.Charting.ChartElement.Tag
  - System.Web.UI.DataVisualization.Charting.ChartElement.ToString
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  id: '#ctor'
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
  type: Constructor
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> osztály."
  syntax:
    content: public StripLine ();
    parameters: []
  overload: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  id: BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal hátterének színét."
  remarks: "Ez a tulajdonság érvényes ARGB (alpha, piros, zöld, kék) értéket is beállíthatja.       Állítsa be a szalag sor színátmenet, állítsa be a BackColor és <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Tulajdonságok.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>       Ha ezt a színt &quot;átlátszó&quot; – Ez azt jelenti, állítsa 0 a alfa értékét – a háttérben, az elem nincs szín lesz hozzárendelve. Ennek eredményeképpen a háttérben átlátszó lesz.       Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0.0, kell rajzolni egy sort, és a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>tulajdonság határozza meg, hogy a sor nem ez a tulajdonság színét.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> struktúra. Az alapértelmezett érték a <xref:System.Drawing.Color.White*>.</xref:System.Drawing.Color.White*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  id: BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal átmenetének stílusát."
  remarks: "A BackGradientStyle tulajdonság határozza meg, hogy diagramelem megjeleníti átmenetekhez, valamint a színátmenet tájolását használatakor.       Használandó színt:-használja a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>tulajdonság beállítása elsődleges színét.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      – Használja a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>tulajdonság beállítása a másodlagos színt.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>      -A BackGradientStyle tulajdonság a diagram elem be a kívánt átmenetének stílusát.       Ez a tulajdonság nincs alkalmazható Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0,0 érték.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.GradientStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref> enumerálása. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  id: BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal csíkozáshoz stílusát."
  remarks: "A háttér csíkozásának mintát teli háttérszíne és a háttérben fölé sorból áll. A két csíkozásának stílusát használt színek-beállításokat a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>és <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Tulajdonságok.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Ez a tulajdonság nincs alkalmazható Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0,0 érték.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref> enumerálása. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  id: BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal hátterének képét."
  remarks: "A BackImage tulajdonsága sok diagramelemek háttérképének elérési definiálja, és egy abszolút vagy relatív URL-CÍMÉT.       Ez a rendszerkép elhelyezése, használja a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>és <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>Tulajdonságok.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>       Azt is megadhatja, hogy egy szín megjelenik-e a kép &quot;átlátszóvá&quot; úgy, hogy a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>       A képfájl lehet bármely .NET-keretrendszer, beleértve az ikonok által támogatott érvényes képfájl.       Ez a tulajdonság nincs alkalmazható Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0,0 érték.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Háttérképeket élveznek más háttér tulajdonságait, például színt."
  syntax:
    content: public string BackImage { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> szám, amely egy kép URL-címe. Az alapértelmezett érték egy üres karakterlánc."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  id: BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a háttérkép-igazítást."
  remarks: "Ez a tulajdonság meghatározza a sávok; háttérképének igazítása alkalmazott csak amikor <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>tulajdonsága <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>       Rendelkezésre álló illesztését kapcsolatos további információkért tekintse meg a <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>számbavételi témakörben.</xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref> számbavételi érték. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  id: BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv háttérképének, amelyeket színének átlátszó."
  remarks: "Ez a tulajdonság nincs alkalmazható Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0,0 érték.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackImageTransparentColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> érték, amely amelyet áttetszőként fog megjelenni."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  id: BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal háttérképének rajzolási módját."
  remarks: "Ez a tulajdonság meghatározza a kép megjelenítési módjának; Ez azt jelenti, hogy mozaikszerűen, méretezhető és stb.       Ha lemezkép átméretezi, azt a program nyújtsa méretéhez igazítja a határoló sáv sor. A kép megjelenik, ha ez ismételten megrajzolása, a bal felső sarokból kiindulva.       A rendelkezésre álló alkalmazásburkoló módok vonatkozó további információkért lásd: a <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>témakör számbavételi.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Ha a BackImageWrapMode tulajdonsága <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, a hely, ahol a kép megrajzolása határozza meg a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>tulajdonság beállítását.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> </xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Ez a tulajdonság nincs alkalmazható Ha <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>0,0 értékre van állítva.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref> egész enumerálása. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  id: BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv sor hátterének másodlagos színe."
  remarks: "Ez a tulajdonság határozza meg a másodlagos háttérszínét sok diagram objektumot, és használt színátmenet színek alkalmazása során.       Beállíthat másodlagos háttérszínét bármely érvényes ARGB (alpha, piros, zöld, kék) értékre.       Ha csíkozáshoz használt, a backsecondarycolor szín tulajdonság határozza meg azt a csíkozáshoz vonalak színe.       A diagramelem hátterének Átmenetes színek használata:-használja a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>tulajdonság beállítása elsődleges színét.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      -A backsecondarycolor szín tulajdonság segítségével állítsa be a másodlagos színt.      – Állítsa be a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>tulajdonságot a kívánt átmenetének stílusát.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>       Ez a tulajdonság nincs alkalmazható Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság értéke 0,0 érték.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackSecondaryColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> csíkozáshoz vagy a színátmenetes kitöltés egy hátterének másodlagos színe használt érték. Az alapértelmezett szín <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  id: BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal szegélyének színét."
  remarks: "Ez a tulajdonság érvényes ARGB (alpha, piros, zöld, kék) értéket is beállíthatja.       Ha a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonsága egy <xref:System.Web.UI.DataVisualization.Charting.StripLine>objektum értéke 0.0, kell rajzolni egy sort, és ezt a tulajdonságot, és nem a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>, hogy a tulajdonság határozza meg, hogy a vonal színét.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BorderColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> value. Az alapértelmezett szín <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  id: BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal szegélyének stílusát."
  remarks: "Ez a tulajdonság meghatározza a használt szegély vonalstílusát. Lehet, hogy a sor teli, pontozott vagy valamilyen teli és pontozott változata."
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartDashStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartDashStyle&quot;> </xref> számbavételi érték, amely meghatározza a sáv vonal szegélyének stílusát."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  id: BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal szegélyvastagságát."
  remarks: "Ez a tulajdonság képpontban értendő."
  syntax:
    content: public int BorderWidth { get; set; }
    return:
      type: System.Int32
      description: "Egy <xref uid=&quot;langword_csharp_integer&quot; name=&quot;integer&quot; href=&quot;&quot;> </xref> érték, amely meghatározza a sáv vonal szegélyének képpont."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "A nem felügyelt által használt erőforrások kiadja a <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> és opcionálisan kiadja a felügyelt erőforrások."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>a kibocsátási felügyelt és a nem felügyelt erőforrások; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> csak a nem felügyelt erőforrások kijelölése."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  id: Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv sor szövege használt betűtípus."
  syntax:
    content: public System.Drawing.Font Font { get; set; }
    return:
      type: System.Drawing.Font
      description: "A <xref href=&quot;System.Drawing.Font&quot;> </xref> értékében, amely megfelel a szalag sor szövegének betűtípusát."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  id: ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv sor szöveg színét."
  remarks: "Bármilyen érvényes ARGB színt ehhez a tulajdonsághoz megadható. Ez a tulajdonság értéke csak alkalmazható, ha egy szöveges értéket a sáv vonal van megadva."
  syntax:
    content: public System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> szám, amely egy szalag vonal színét. Az alapértelmezett érték: <xref:System.Drawing.Color.Black*>.</xref:System.Drawing.Color.Black*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  id: Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal az időközt, és határozza meg, ha a szalag-vonalat rajzolni-e, egyszer vagy többször."
  remarks: "Ha az intervallum tulajdonságban nulla (0,0) értékre állítja, egy szalag sorban jelenik meg, megadott szélessége a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Ha úgy állítja be időköze nem nulla értékre, több sávok jelenik meg. Az az intervallum tulajdonságban használt egység által a <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double Interval { get; set; }
    return:
      type: System.Double
      description: "A <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> sávok időközétől értéket. Az alapértelmezett értéke 0.0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  id: IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a rácsvonalak, osztásjelek, sávok és tengelyfeliratok eltolását."
  remarks: "A másodlagos osztásjelek és rácsvonalak intervallumának eltolása soha nem érinti a értékének a <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>tulajdonsága a <xref:System.Web.UI.DataVisualization.Charting.Axis>objektum.</xref:System.Web.UI.DataVisualization.Charting.Axis> </xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>       Az IntervalOffset tulajdonság beállítása a eltolása mértékegységek határozza meg.       A <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>negatív érték lehet.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>       Az alapértelmezett érték `Auto` (`0`)."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double IntervalOffset { get; set; }
    return:
      type: System.Double
      description: "A <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> érték, amely a intervallumának eltolása jelöli."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  id: IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal intervallumának eltolási típusa."
  remarks: "Alapértelmezés szerint ez a tulajdonság értéke <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; a tényleges érték a tulajdonság határozza meg a <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> számbavételi érték, amely az időköz típusát jelzi. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  id: IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja az időköz típusát egy <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> objektum."
  remarks: "Időköz típusok megadható <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, ebben az esetben a függenek: az X- vagy Y-érték típusú a program <xref:System.Web.UI.DataVisualization.Charting.DataPoint>objektumok – attól függően, hogy melyik a <xref:System.Web.UI.DataVisualization.Charting.StripLine>tartozó objektumok – és a tengely.</xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.DataPoint> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       A <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>tulajdonság határozza meg, milyen gyakran egy sáv vagy vonal megrajzolása.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> számbavételi érték, amely az időköz típusát jelzi. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  id: MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a térkép sáv vonal területének attribútumait."
  syntax:
    content: public string MapAreaAttributes { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> ábrázolási terület megfelelő érték, amely a diagramelem attribútumait tartalmazza."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  id: Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi a sáv vonal nevét."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> érték, amely a sáv vonal nevét jelöli."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  id: PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a visszaküldési a feldolgozható egy <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> esemény."
  syntax:
    content: public string PostBackValue { get; set; }
    return:
      type: System.String
      description: "Egy karakterláncértéket, amely a profilszolgáltatóhoz továbbított visszaküldési értékét jelöli egy <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> esemény."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  id: StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal szélességét."
  remarks: "Ez a tulajdonság nem állítható be 0,0-nál kisebb értékre, ellenkező esetben kivételt generál.       0,0 beállítását eredményezi egy vonalat rajzolni; a sor fogja használni a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>és <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>tulajdonságbeállításokat a színének, szélességének és style.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Egyik sem a `Back*` az osztály tulajdonságai használhatók, amikor a StripWidth értéke 0.0.       Ha megadta a StripWidth tulajdonság értéke 0,0-nál nagyobb, a szalag jön létre. A <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>és <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>tulajdonságai csak a szalag; szegélye vonatkoznak összes a `Back*` tulajdonságok használja a sáv háttérképének tulajdonságai.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>       Ha a StripWidth tulajdonság értékének 0,0-nál nagyobbnak, a megfelelő tengely a egységek határozza meg."
  syntax:
    content: public double StripWidth { get; set; }
    return:
      type: System.Double
      description: "A <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> érték, amely meghatározza, hogy a sáv vagy vonal megrajzolása. Az alapértelmezett értéke 0.0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  id: StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a mértékegységét a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>"
  remarks: "Ez a tulajdonság meghatározza, hogy a használt egységeket a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonság.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Például, hogy a szalag sor &quot;egy hét&quot; képviselő, beállíthat ezt a tulajdonságot <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>és állítsa be a <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>tulajdonságot valamelyik (1.0).</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       Ez a tulajdonság módosítható <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>való egy <xref:System.DateTime>értéke, ha a megfelelő tengely használ egy <xref:System.DateTime>érték.</xref:System.DateTime> </xref:System.DateTime> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> számbavételi érték, amely a szélesség típusát jelzi. Az alapértelmezett érték <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  id: Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv sor szövege."
  remarks: "Ez a tulajdonság használatával szöveg hozzáadása egy szalag sor."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> érték, amely a szöveget egy szalag vonal jelöli."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  id: TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal szövegének igazítását."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "A <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> értékében, amely megfelel a szalag sor szöveg igazítását."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  id: TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv sor szövege sor szövegének igazítását."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextLineAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "A <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> értékében, amely megfelel a szöveg vonal igazítását."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  id: TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a szöveg irányát."
  remarks: "Ha ez a tulajdonság értéke érték <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, a text az objektumorientált diagram típusa alapján.</xref:System.Web.UI.DataVisualization.Charting.TextOrientation> Minden X-Y diagram esetében eltérő sáv, az x tengely sáv sor szövege objektumorientált vízszintesen balról jobbra sáv vonal alján. Sávdiagramok az x tengely sáv sor szövege objektumorientált függőlegesen a felső – alsó sáv vonal jobbra."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.TextOrientation
      description: "A szöveg tájolásának igazítása jelző TextOrientation érték."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  id: ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal elemleírása."
  remarks: "Ha bekapcsolja ezt a tulajdonságot, egy ügyféloldali interaktív képterülete automatikusan jön létre, és a térképterület jön létre a megadott eszközleírás karakterlánca cím attribútuma. Az ábrázolási terület a dimenziók, hogy a szalag sor fogja használni.       A tulajdonság beállítása nem lesz hatása ha a <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A>tulajdonsága `false`.</xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> Az alapértelmezett érték: igaz."
  syntax:
    content: public string ToolTip { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> érték, amely az elemleírás sáv vonal jelöli."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  id: Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Lekérdezi vagy beállítja a sáv vonal cél URL-cím vagy a rögzítési pont."
  remarks: "Egy abszolút URL-cím használatához indítsa el a &quot;http://&quot; vagy a &quot;www&quot;. a karakterlánc-kifejezés. A karakterlánc nem indul el ezeket az előtagokat bármelyikével, ha akkor minősül, egy relatív URL-címet."
  syntax:
    content: public string Url { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> érték, amely a cél URL-cím vagy a rögzítési pont sáv vonal jelöli."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataVisualization.Charting.ChartElement
  isExternal: false
  name: System.Web.UI.DataVisualization.Charting.ChartElement
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.GradientStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: GradientStyle
  nameWithType: GradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.GradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartHatchStyle
  nameWithType: ChartHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageAlignmentStyle
  nameWithType: ChartImageAlignmentStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageWrapMode
  nameWithType: ChartImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartDashStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartDashStyle
  nameWithType: ChartDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: DateTimeIntervalType
  nameWithType: DateTimeIntervalType
  fullName: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
- uid: System.Drawing.StringAlignment
  parent: System.Drawing
  isExternal: false
  name: StringAlignment
  nameWithType: StringAlignment
  fullName: System.Drawing.StringAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: TextOrientation
  nameWithType: TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine
  nameWithType: StripLine.StripLine
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose
  nameWithType: StripLine.Dispose
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
