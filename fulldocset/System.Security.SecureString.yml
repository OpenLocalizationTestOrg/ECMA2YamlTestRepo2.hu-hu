### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "Szöveg, amelyet kell bizalmasan, többek között a számítógép memóriáját, amikor már nincs szükség törlésével jelöli. Ez az osztály nem örökölhető."
  remarks: "SecureString olyan karakterlánc, amely egy biztonsági intézkedés biztosít. Megkísérli ne tároljon bizalmas karakterlánc egyszerű szövegként folyamat memóriájában.  (-Korlátozások, tekintse meg a [hogy mennyire vannak biztonságban van SecureString?](#HowSecure) szakaszában.) SecureString példányának értékének automatikusan védett a mechanizmussal az alapul szolgáló platform támogatott, ha a példány inicializálva, vagy az érték módosításának. Az alkalmazás feldolgozhatja a példány nem módosítható, és hogy további módosításának megakadályozása a <xref:System.Security.SecureString.MakeReadOnly%2A>metódus.</xref:System.Security.SecureString.MakeReadOnly%2A>       A SecureString példány hossza legfeljebb 65 536 karakter lehet.      > [!IMPORTANT] > Ez a típus megvalósítja az <xref:System.IDisposable>felületet.</xref:System.IDisposable> Ha befejezte a típus egy példányát használja, ezért fel kell azt közvetve vagy közvetlenül. Arra, hogy a típus közvetlenül, hívja az <xref:System.IDisposable.Dispose%2A>metódust egy `try` / `catch` blokk.</xref:System.IDisposable.Dispose%2A> Eltávolítása után közvetve, használjon egy nyelvi szerkezet például `using` (a C#) vagy `Using` (a Visual Basic nyelvben). A &quot;Használatával az objektum, amely megvalósítja IDisposable&quot; szakaszában talál további információt a <xref:System.IDisposable>felületet a témakörben.</xref:System.IDisposable>       A SecureString osztály és annak tagjait nem láthatók a COM számára. További információkért lásd: <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute>       Ebben a szakaszban: [vs karakterlánc. SecureString](#vsString)[SecureString műveletek](#Ops)[SecureString és együttműködési](#interop)[hogy mennyire vannak biztonságban van SecureString?               ](#HowSecure)      <a name=&quot;vsString&quot;></a>## Karakterlánc-vagy SecureString egy példányát a <xref:System.String?displayProperty=fullName>osztály csak nem módosítható, és már nem szükséges, ha nem lehet programozott módon ütemezni a szemétgyűjtő; Ez azt jelenti, hogy a példány írásvédett után létrejön, és nincs előre lehet jelezni, ha a példány törölve lesz a számítógép memóriájában.</xref:System.String?displayProperty=fullName> Mivel <xref:System.String?displayProperty=fullName>példányai nem módosíthatók, a műveleteket, és módosítsa a meglévő példány ténylegesen készítsen másolatot az segítségével kezelheti.</xref:System.String?displayProperty=fullName> Ezért ha egy <xref:System.String>objektum például egy jelszó, a hitelkártya száma vagy a személyes adatok bizalmas információkat tartalmaznak, fennáll a veszélye, az adatokat kell derüljön ki, miután használt, mert az alkalmazás nem lehet törölni az adatokat a számítógép elegendő memóriával.</xref:System.String>       A SecureString objektum hasonlít egy <xref:System.String>objektum abban, hogy egy szöveges értéket tartalmaz.</xref:System.String> Azonban egy objektum van rögzítve a memóriában, SecureString értékének használhat egy védelmi mechanizmust, például a titkosítás, az alapul szolgáló operációs rendszer által biztosított módosítható, amíg az alkalmazás csak olvashatóként jelöli meg és a törölhetők a számítógép elegendő memóriával az alkalmazás hívása vagy a <xref:System.Security.SecureString.Dispose%2A>metódust vagy a .NET-keretrendszer szemétgyűjtője.</xref:System.Security.SecureString.Dispose%2A>       A SecureString osztály vonatkozó korlátozások ismertetéséhez tekintse meg a [hogy mennyire vannak biztonságban van SecureString?](#HowSecure) szakasz.       [Tetejére](#top) <a name=&quot;Ops&quot;> </a> ## SecureString műveletek a SecureString osztály tagok, amelyek lehetővé teszik a következőket tartalmazza: SecureString objektumpéldányt egy a SecureString objektumpéldányt paraméter nélküli konstruktora meghívásával.             Adja hozzá a SecureString karakterek objektum adhat hozzá egy egyetlen karaktert egyszerre a SecureString objektumok meghívásával annak <xref:System.Security.SecureString.AppendChar%2A>vagy <xref:System.Security.SecureString.InsertAt%2A>metódus.</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] > A SecureString objektum soha nem állítható össze az olyan <xref:System.String>mert a bizalmas adatokat már nem módosítható <xref:System.String>az osztályt</xref:System.String> memória adatmegőrzési következményeinek függvényében</xref:System.String> A legjobb módszer a SecureString objektum összeállításához forrásból származik karakter:-a-időben nem felügyelt, például a <xref:System.Console.ReadKey%2A?displayProperty=fullName>metódus.</xref:System.Console.ReadKey%2A?displayProperty=fullName>       Távolítsa el a SecureString karaktereit objektum meghívásával lecserélheti a speciális karakterek a <xref:System.Security.SecureString.SetAt%2A>metódus, távolítsa el a speciális karakterek meghívásával a <xref:System.Security.SecureString.RemoveAt%2A>metódus, vagy távolítsa el a SecureString az összes karaktert példány meghívásával a <xref:System.Security.SecureString.Clear%2A>metódus.</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       Ellenőrizze a SecureString objektum csak olvasható a karakterláncot, amely a SecureString objektum által jelképezett meghatározása után hívja a <xref:System.Security.SecureString.MakeReadOnly%2A>módszer a karakterlánc csak olvasható.</xref:System.Security.SecureString.MakeReadOnly%2A>       Információk lekérdezése a SecureString objektum a SecureString osztály információval szolgálnak a karakterlánc csak két tagokkal rendelkezik: a <xref:System.Security.SecureString.Length%2A>tulajdonság, amely megadja, hogy a karakterlánc; a kód UTF16-kódolású egységek számának és a <xref:System.Security.SecureString.IsReadOnly%2A>, metódus, amely azt jelzi, hogy a példány írásvédett.</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       A fenntartott memória mérete a SecureString példányhoz, mert SecureString valósítja meg a kibocsátási a <xref:System.IDisposable>felületet, az memória meghívásával engedje fel a <xref:System.Security.SecureString.Dispose%2A>metódus.</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       A SecureString osztály rendelkezik tagok, amelyek vizsgálata, hasonlítsa össze, vagy a SecureString értékét. Ilyen kizárásával segít, hogy megvédjék a példány értékének véletlenül vagy szándékosan. Használja a megfelelő tagjai a <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>osztály, például a <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>metódust, az érték a SecureString objektumok módosítására.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       A .NET-keretrendszer Class Library SecureString példányok gyakran használja az alábbi módokon: - folyamatok jelszó-információkat biztosít a <xref:System.Diagnostics.ProcessStartInfo>felépítésének vagy egy túlterhelése, hívja az <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>módszer, amelynek a SecureString típusú paraméterrel rendelkezik.</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -A hálózati jelszót adatmegadáshoz hívásával egy <xref:System.Net.NetworkCredential>osztálykonstruktor, amely a SecureString típusú vagy paramétereinek a <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>tulajdonság.</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -A adja meg a jelszó-információkat az SQL Server-hitelesítés meghívásával a <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>konstruktor vagy értékének beolvasása a <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>tulajdonság.</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -A nem felügyelt kód karakterlánc átadni. További információkért lásd: a [SecureString és együttműködési](#interop) szakasz.       [Tetejére](#top) <a name=&quot;interop&quot;> </a> ## SecureString és együttműködési, mert az operációs rendszer nem támogatja közvetlenül SecureString kell konvertálnia a SecureString objektum értékének a szükséges karakterlánctípus a karakterlánc egy natív mód való továbbítása előtt.        A <xref:System.Runtime.InteropServices.Marshal>osztály rendelkezik ehhez öt módszerek:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, amely átalakítja a SecureString karakterláncértéket ismeri fel a COM-környezetbe. a bináris karakterlánc (BSTR)</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>és <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, amely a SecureString karakterláncértéket másolja a nem felügyelt memóriában ANSI-karakterlánc.</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>és <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, amely a SecureString karakterláncértéket másolása egy Unicode karakterlánc nem felügyelt memóriában.</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       Mindkét módszerhez a nem felügyelt egy tiszta szöveges karakterláncot hoz létre. A feladata a fejlesztő nulla és, hogy a memória, amint azt már nem szükséges. A karakterlánc átalakítás és a memória elosztási módszer nulla és a lefoglalt memória megfelelő metódust tartalmaz: |} Lemezfoglalási és -konvertálási metódus |} Nulla, és szabad metódus |}   |--------------------------------------|--------------------------|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|       [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    Hozza létre, amikor a SecureString példánya <xref:System.String>.</xref:System.String> további védelmet biztosít A karakterlánc egy karakter-:-a-időforrást, létrehozásakor <xref:System.String>a memóriában, több köztes hoz, mivel a SecureString csak egyetlen példányt hoz létre.</xref:System.String>  A szemétgyűjtés <xref:System.String>objektumok nem determinisztikus.</xref:System.String> Emellett az memória nincs rögzítve, mert a szemétgyűjtő bizonyosodhatunk további példányokat <xref:System.String>értékek áthelyezésekor és memória tömörítését.</xref:System.String> Ezzel szemben a SecureString objektum kiosztott memória van rögzítve, és, hogy a memória szabadítható meghívásával a <xref:System.Security.SecureString.Dispose%2A>metódus.</xref:System.Security.SecureString.Dispose%2A>       Bár a SecureString példányban tárolt adatok több biztonságos, mint a <xref:System.String>példány, a SecureString példány hogyan biztonságos szigetek jelentős korlátozva</xref:System.String> tárolt adatok Ezek közé tartoznak: Platform a a Windows operációs rendszer, a tartalmát a SecureString példány belső karaktertömbnek titkosítva van. Hogy az API-k vagy kulcskezelés problémák hiányzik, mert titkosítási azonban nem érhető el minden platformon. Emiatt a SecureString áll rendelkezésre, asztalon (csak Windows), és nem a .NET Core.       Időtartam páros képes kihasználni a titkosítás, az egyszerű szöveges példány különböző időpontokban válhat a SecureString rendelt SecureString végrehajtása esetén: – mivel a Windows nem biztosít egy biztonságos karakterláncot kell megadnia az operációs rendszer szintjén, továbbra is a .NET-keretrendszer példányhoz átalakítani a biztonságos karakterláncot kell megadnia az egyszerű szöveges ábrázolást akarja használni.      – Amikor a biztonságos karakterlánc értéke módosul a metódusok, mint <xref:System.Security.SecureString.AppendChar%2A>vagy <xref:System.Security.SecureString.RemoveAt%2A>, akkor vissza kell fejteni (azaz, átalakított vissza gombra, és egyszerű szöveg), módosítva, és titkosítja, majd újra.</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -Ha a biztonságos karakterláncot kell megadnia egy együttműködési hívás használja, akkor át kell alakítani ANSI-karakterlánc, egy Unicode karakterlánc vagy bináris karakterlánc (BSTR). További információkért lásd: a [SecureString és együttműködési](#interop) szakasz.       Az időtartam, amelynek a SecureString Példányérték fel van fedve csupán csonkolva ellentétben az <xref:System.String>osztályhoz.</xref:System.String>       Használati és tároló általában a SecureString osztály határozzák meg tárolási védett vagy bizalmasan kell karakterlánc-értékek. Kívül a .NET-keretrendszer magát, azonban használatának mechanizmus SecureString támogatja. Ez azt jelenti, hogy a biztonságos karakterláncot kell konvertálni, amely felismeri a cél használható formában (általában egy egyszerű szöveges formában), és, hogy a felhasználó terület visszafejtési és -konvertálási kell megjelennie.       A teljes, SecureString, annál biztonságosabb <xref:System.String>mert bizalmas karakterlánc adatok veszélyeztetettségének.</xref:System.String> Ezek a karakterláncok továbbra is válhat nyers memória, például a gazdagépen, a folyamatkép-kiírást vagy a felhasználó megtekinthető lapozófájl futó rosszindulatú folyamat eléréséhez használt művelet vagy folyamat. Jelszavak védelmére SecureString helyett a javasolt megoldás egy nem átlátszó leíró használt folyamaton kívül tárolt hitelesítő adatok használatára.       [Lap tetejére](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.SecureString&quot;> </xref> osztály."
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy ez a példány értékének feloldása közben."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Ez a művelet nem támogatott ezen a platformon."
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.SecureString&quot;> </xref> egy subarray az osztály &lt;xref:System.Char?displayProperty=fullName&gt; objektumok.       Ez a konstruktor nem CLS-kompatibilis. A CLS-kompatibilis alternatíva ez &lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;."
  remarks: "Ez a konstruktor inicializálja az új <xref:System.Security.SecureString>karakterek száma objektum `value` által megadott `length`; a példány értékét a rendszer ezután titkosítja.</xref:System.Security.SecureString>       A C# Ez a konstruktor csak nem biztonságos kóddal környezetében van definiálva."
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "A tömb mutató &lt;xref:System.Char?displayProperty=fullName&gt; objektumok."
    - id: length
      type: System.Int32
      description: "Az elemek száma `value` ahhoz, hogy az új példány szerepeljen."
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>kisebb nullánál vagy nagyobb, mint 65,536 van."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy feloldása a biztonságos karakterlánc értéke."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Ez a művelet nem támogatott ezen a platformon."
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Az aktuális biztonságos karakterlánc végén fűzi hozzá karaktert."
  remarks: "Ha az használ egy védelmi mechanizmust, például titkosítást, a biztonságos karakterláncot kell megadnia, ha vannak ilyenek, értéke nem védett; `c` a rendszer hozzáfűzi; majd a biztonságos karakterláncot kell megadnia az új értéke újra védett."
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "A biztonságos karakterláncot hozzáfűzése karaktert."
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A biztonságos karakterláncot csak olvasható."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A művelet végrehajtása teszi a biztonságos karakterlánc hossza nagyobb, mint 65 536 karakter."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy feloldása a biztonságos karakterlánc értéke."
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Törli a jelenlegi biztonságos karakterlánc értékét."
  remarks: "A számítógép elegendő memóriával a biztonságos karakterlánc értéket tartalmazó nullákat tartalmaz, akkor biztonságos karakterlánc értéknek a hossza nullára van állítva."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A biztonságos karakterláncot csak olvasható."
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Másolat készítése az aktuális biztonságos karakterláncot kell megadnia."
  remarks: "Ha egy példányát a <xref:System.Security.SecureString>van megjelölve, csak olvasható, példánynak másolata nem lesz csak olvasható.</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "Duplikált biztonságos karakterlánc."
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy feloldása a biztonságos karakterlánc értéke."
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Feloldja a jelenlegi által használt erőforrások <xref href=&quot;System.Security.SecureString&quot;> </xref> objektum."
  remarks: "A Dispose metódus ír a lefoglalt memória az e értéket tartalmazó bináris nullából <xref:System.Security.SecureString>objektumot, majd a lefoglalt memória felszabadul.</xref:System.Security.SecureString>       További információkért lásd: [szemétgyűjtés](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "A biztonságos karakterláncot kell megadnia a megadott pozíciónál karaktert szúrja be."
  remarks: "Az index kívül esik a nulla alapú; a biztonságos karakterlánc első karaktere az index nulla pozíciótól.       Ha az használ egy védelmi mechanizmust, például titkosítást, a biztonságos karakterláncot kell megadnia, ha vannak ilyenek, értéke nem védett; `c` csatlakoztatva van a megadott pozíciónál; majd a védelem visszaállítása új értéke. A InsertAt metódus azonos adja eredményül a <xref:System.Security.SecureString.AppendChar%2A>metódus, amely karakter beszúrása egy biztonságos karakterláncot kell megadnia, végén, ha a `index` InsertAt paraméterének értéke ehhez a példányhoz mennyi.</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "Az index elhelyezése where paraméter `c` csatlakoztatva van."
    - id: c
      type: System.Char
      description: "A beszúrandó karakter."
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A biztonságos karakterláncot csak olvasható."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>értéke nem nulla, biztonságos karakterlánc hosszánál nagyobb.       – vagy – a művelet végrehajtása tenné a biztonságos karakterlánc hossza nagyobb, mint 65 536 karakter."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy feloldása a biztonságos karakterlánc értéke."
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Azt jelzi, hogy a biztonságos karakterláncot van megjelölve, csak olvasható."
  remarks: "Miután <xref:System.Security.SecureString>van megjelölve, a <xref:System.Security.SecureString.MakeReadOnly%2A>módszer, módosítsa a példány jelez értékét <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> tett bármilyen kísérlet</xref:System.Security.SecureString.MakeReadOnly%2A> csak olvasható</xref:System.Security.SecureString> példánya A típus IsReadOnly metódust használja annak megállapítására, hogy egy <xref:System.Security.SecureString>csak olvasható előtt megpróbálja módosítani azt.</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a biztonságos karakterláncot van megjelölve, csak olvasható; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Lekérdezi a karakterek számát az aktuális biztonságos karakterláncot kell megadnia."
  remarks: "A Length tulajdonságot számát adja vissza <xref:System.Char>objektumok ebben az esetben, nem Unicode karakterek száma.</xref:System.Char> A Unicode-karakter lehet, hogy képviseli egynél több <xref:System.Char>objektum.</xref:System.Char>       Legfeljebb egy <xref:System.Security.SecureString>példány 65 536 karakterek.</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "Hány &lt;xref:System.Char?displayProperty=fullName&gt; ezen objektumok biztonságos karakterlánc."
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Lehetővé teszi a biztonságos karakterlánc szöveges érték, csak olvasható."
  remarks: "A szöveges érték, egy példányának inicializálása a <xref:System.Security.SecureString>az osztály a <xref:System.Security.SecureString.%23ctor%2A>konstruktorok, és módosítsa az értéket a <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, és <xref:System.Security.SecureString.AppendChar%2A>módszerek.</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       Miután kiválasztotta a végleges módosítások, segítségével a MakeReadOnly metódust az érték a példány nem módosítható (csak olvasható). Miután az érték csak olvashatóként van megjelölve, módosítsa ezt a további próbál jelez <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       A MakeReadOnly metódust hívja a hatása az állandó mert a <xref:System.Security.SecureString>osztály nem teszi lehetővé a biztonságos karakterláncot módosíthatóvá tételéhez újra.</xref:System.Security.SecureString> Használja a <xref:System.Security.SecureString.IsReadOnly%2A>metódust annak megállapítására, hogy egy példánya <xref:System.Security.SecureString>csak olvasható.</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "A megadott pozíciónál karakter eltávolítása a biztonságos karakterláncot kell megadnia."
  remarks: "Az index kívül esik a nulla alapú; Ebben a példában az első karakter van index nulla pozíciótól.       Ha az használ egy védelmi mechanizmust, például titkosítást, a biztonságos karakterláncot kell megadnia, ha vannak ilyenek, értéke nem védett; a megadott pozíciónál karakter eltávolítása; az új érték akkor a védelem visszaállítása."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Az index pozíciója karaktert a biztonságos karakterláncot kell megadnia."
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A biztonságos karakterláncot csak olvasható."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>értéke nem nulla, vagy nagyobb, mint a biztonságos karakterlánc hosszának egyenlőnek."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy feloldása a biztonságos karakterlánc értéke."
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Lecseréli a meglévő a megadott pozíciónál levő karaktert egy másik karakter."
  remarks: "Az index kívül esik a nulla alapú; Ebben a példában az első karakter van index nulla pozíciótól.       Ha az használ egy védelmi mechanizmust, például titkosítást, a biztonságos karakterláncot kell megadnia, ha vannak ilyenek, értéke nem védett; `c` van rendelve a megadott index beosztáshoz; majd a védelem visszaállítása új értéke."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "A biztonságos karakterláncot kell megadnia az index egy meglévő karakter pozíciója"
    - id: c
      type: System.Char
      description: "Lecseréli a meglévő karakter karaktert."
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A biztonságos karakterláncot már el lett távolítva."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A biztonságos karakterláncot csak olvasható."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>értéke nem nulla, vagy nagyobb, mint a biztonságos karakterlánc hosszának egyenlőnek."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Hiba történt a védelmét, vagy feloldása a biztonságos karakterlánc értéke."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
