### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventSourceCreationData
  id: EventSourceCreationData
  children:
  - System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  - System.Diagnostics.EventSourceCreationData.CategoryCount
  - System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  - System.Diagnostics.EventSourceCreationData.LogName
  - System.Diagnostics.EventSourceCreationData.MachineName
  - System.Diagnostics.EventSourceCreationData.MessageResourceFile
  - System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  - System.Diagnostics.EventSourceCreationData.Source
  langs:
  - csharp
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
  type: Class
  summary: "A helyi számítógépen vagy távoli számítógépen egy eseménynapló-forrás létrehozásához használt konfigurációs beállításait jelölik."
  remarks: "A EventSourceCreationData osztály használatával állítson be egy új forrás írásához honosított bejegyzéseket az eseménynaplóban talál. Nincs szükség, olvassa el az eseménynaplóból származó Ez az osztály használatával.       Ez az osztály új eseményforrás és a kapcsolódó eseménynaplójába a konfigurációs beállításokat határoz meg. A társított Eseménynapló lehet a helyi számítógépen vagy távoli számítógépen. Hozzon létre egy új vagy meglévő eseménynaplóba új forrást a helyi számítógépen, adja meg a <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>és <xref:System.Diagnostics.EventSourceCreationData.Source%2A>tulajdonságait egy EventSourceCreationData és hívás a <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>metódus.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> Ezzel a módszerrel hoz létre az eseményforrás, adja meg, ha a <xref:System.Diagnostics.EventSourceCreationData.Source%2A>tulajdonság és az a Eseménynapló <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>.</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> megadott regiszterekben</xref:System.Diagnostics.EventSourceCreationData.Source%2A> Ez a viselkedés hasonlít a <xref:System.Diagnostics.EventLogInstaller>regisztrálni az eseménynaplóhoz eseményforrást osztály</xref:System.Diagnostics.EventLogInstaller> használatával       A <xref:System.Diagnostics.EventLog.WriteEvent%2A>és <xref:System.Diagnostics.EventLog.WriteEntry%2A>módszerek beírni az eseményeket az eseménynaplóba.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> Meg kell adnia egy eseményforrás beírni az eseményeket; Hozzon létre és az eseményforrás a forrással első bejegyzés írása előtt konfigurálnia kell.       Az új eseményforrás létrehozása az alkalmazás telepítése során. Ez lehetővé teszi, hogy a regisztrált eseményforrások listája és azok a konfigurációk frissítése az operációs rendszer számára. Ha az operációs rendszer nem frissítette az esemény olyan adatforrások listáját, és megkísérli írni az új forrással rendelkező esemény az írási művelet sikertelen lesz. Egy új forrás használatával konfigurálhatja egy <xref:System.Diagnostics.EventLogInstaller>, vagy használja a <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metódus.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Új eseményforrás létrehozása a számítógépen rendszergazdai jogosultsággal kell rendelkeznie.       Az Eseménynapló meglévő vagy új Eseménynapló eseményforrást hozhat létre. Amikor létrehoz egy új új Eseménynapló forrása, a rendszer regisztrálja, amellyel bejelentkezik a forrást, de a napló nem jön létre, csak az első bejegyzés beíródik azt.       Minden forrás csak írhat egy eseménynapló egyszerre; azonban az alkalmazás segítségével több forrásból több eseménynaplók írni. Például az alkalmazás módosítania kell a különböző eseménynaplók vagy a különböző erőforrás-fájlok több forrásból.       Módosítsa a konfigurációs adatait egy meglévő forrás-, törölje az adatforrást, és akkor hozza létre az új konfigurációval. Ha egyéb alkalmazások és összetevők a meglévő forrást használja, hozzon létre egy új forrásból a meglévő forrás törlése helyett a frissített konfigurációt.       Az esemény kategória és üzenet karakterláncok regisztrálhatja az eseményforrás honosított erőforrásokkal. Az alkalmazás eseménynapló-bejegyzések erőforrás-azonosítók használata helyett a tényleges karakterlánc megadása lehet írni. Az Eseménynapló használatával keresse meg és a megfelelő karakterlánc a honosított erőforrás fájlból aktuális nyelvi beállításai alapján jeleníti meg az erőforrás-azonosító használatával. Regisztrálhatja az esemény kategóriák, az üzenetek és a paraméter behelyettesítendő karakterláncok külön fájlt, vagy regisztrálhatja az azonos erőforrásfájl karakterláncok három típusú. Használja a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, és <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>konfigurálásához írása honosított bejegyzés az eseménynaplóba a forrás tulajdonságait</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Ha az alkalmazás karakterlánc-értékek közvetlenül ír az eseménynaplóba, nem kell a beállításokat.       A forrás honosított bejegyzések írásra vagy közvetlen karakterláncok írásra kell konfigurálni. A <xref:System.Diagnostics.EventLog.WriteEntry%2A>metódust a megadott karakterlánc közvetlenül ír az eseménynaplóba, akkor használja a honosítható üzenet erőforrásfájl.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Használja a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus beírni az eseményeket honosított üzenet erőforrás-fájllal.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Ha az alkalmazás erőforrás-azonosítók és karakterlánc-értékek bejegyzést ír, akkor regisztrálnia kell a két külön forrásból. Például konfigurálja egy forrás erőforrásfájlokat, majd használja a forrást a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus írása az eseménynaplóba az erőforrás-azonosítók használatával bejegyzések</xref:System.Diagnostics.EventLog.WriteEvent%2A> Ezután hozzon létre egy eltérő forrást erőforrás fájlok nélkül, és, amelyeket az adatforrás a <xref:System.Diagnostics.EventLog.WriteEntry%2A>metódus írni karakterláncok közvetlenül az eseménynaplót az, hogy az adatforrás.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. The code example verifies that the source does not conflict with an existing event source, and then creates the new event source for the specified event log.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_7_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_7_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_7_1.cs)]"
  syntax:
    content: public class EventSourceCreationData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Diagnostics.EventSourceCreationData&quot;> </xref> egy adott esemény forrás- és Eseménynapló nevű osztályt."
  remarks: "Az eseménynapló bejegyzéseinek írni, először létre kell hoznia egy eseményforrás a következőhöz az eseménynaplóban talál. Új adatforrás regisztrálása, inicializálni egy <xref:System.Diagnostics.EventSourceCreationData>példány, az alkalmazáshoz, majd hívja a példány tulajdonságainak konfigurálása a <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>metódus.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData> A forrás regisztrálása után írhat a forrás a bejegyzéseket a <xref:System.Diagnostics.EventLog.WriteEvent%2A>vagy <xref:System.Diagnostics.EventLog.WriteEntry%2A>módszerek.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A>       Az esemény kategória és üzenet karakterláncok regisztrálhatja az eseményforrás honosított erőforrásokkal. Az alkalmazás eseménynapló-bejegyzések erőforrás-azonosítók használata helyett a tényleges karakterlánc megadása lehet írni. Az Eseménynapló használatával keresse meg és a megfelelő karakterlánc a honosított erőforrás fájlból aktuális nyelvi beállításai alapján jeleníti meg az erőforrás-azonosító használatával. Regisztrálhatja az esemény kategóriák, az üzenetek és a paraméter behelyettesítendő karakterláncok külön fájlt, vagy regisztrálhatja az azonos erőforrásfájl karakterláncok három típusú. Használja a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, és <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>konfigurálásához írása honosított bejegyzés az eseménynaplóba a forrás tulajdonságait</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Ha az alkalmazás karakterlánc-értékek közvetlenül ír az eseménynaplóba, nem kell a beállításokat.       A forrás honosított bejegyzések írásra vagy közvetlen karakterláncok írásra kell konfigurálni. Ha az alkalmazás erőforrás-azonosítók és karakterlánc-értékek bejegyzést ír, akkor regisztrálnia kell a két külön forrásból. Például konfigurálja egy forrás erőforrásfájlokat, majd használja a forrást a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus írása az eseménynaplóba az erőforrás-azonosítók használatával bejegyzések</xref:System.Diagnostics.EventLog.WriteEvent%2A> Ezután hozzon létre egy eltérő forrást erőforrás fájlok nélkül, és használja a forrást a <xref:System.Diagnostics.EventLog.WriteEntry%2A>metódus írási karakterláncok közvetlenül az eseménynaplóba.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Az alábbi táblázat egy <xref:System.Diagnostics.EventSourceCreationData>.</xref:System.Diagnostics.EventSourceCreationData> kezdeti tulajdonságértékek      | Tulajdonság |} A kezdeti érték |}   |--------------|-------------------|   | <xref:System.Diagnostics.EventSourceCreationData.Source%2A>| A `source` paraméter. |}   | <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>| A `logName` paraméter. |}   | <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>| A helyi számítógépen (&quot;.&quot;). |}   | <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>| Nulla |}   | <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>| `null` (`Nothing` a Visual Basic nyelvben). |}   | <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>| `null` (`Nothing` a Visual Basic nyelvben). |}   | <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>| `null` (`Nothing` in Visual Basic).|</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A></xref:System.Diagnostics.EventSourceCreationData.MachineName%2A></xref:System.Diagnostics.EventSourceCreationData.LogName%2A></xref:System.Diagnostics.EventSourceCreationData.Source%2A>"
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/80a35863-8201-4059-9f79-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/80a35863-8201-4059-9f79-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/80a35863-8201-4059-9f79-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventSourceCreationData (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "A bejegyzések forrásként regisztrálni az Eseménynapló neve."
    - id: logName
      type: System.String
      description: "A napló, amelyhez az adatforrás bejegyzéseit írt neve."
  overload: System.Diagnostics.EventSourceCreationData.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a kategóriák száma a kategória erőforrás fájlban."
  remarks: "Használja a CategoryCount és <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>beírni az eseményeket a Tulajdonságok honosított karakterláncok kategória.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> Az Eseménynapló esemény bejegyzése kategóriájának jeleníti meg, ha az esemény írásakor adjon meg egy kategóriát. Eseménynapló kategóriák érhetők karakterláncokat alkalmazás által meghatározott események szűrése, vagy további információt nyújtanak az esemény. Az alkalmazás például a különböző összetevők vagy különböző műveleteket külön kategóriák adhat meg.       Kategóriák opcionálisak; Ha az alkalmazás nem használja a kategóriák, ne adja meg a CategoryCount és <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>Tulajdonságok.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       A Platform SDK dokumentációját a &quot;Üzenet fordító&quot; című részleteket eseményüzeneteket definiálása és felépítése esemény erőforrásfájlokat, [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "A kategória erőforrásfájl kategóriák száma. Az alapértelmezett értéke nulla."
  overload: System.Diagnostics.EventSourceCreationData.CategoryCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A tulajdonság értéke negatív érték, vagy egy érték nagyobb, mint &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja az erőforrás-fájlt, amely tartalmazza a kategória karakterláncok a forrás elérési útját."
  remarks: "Használja a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>és CategoryResourceFile tulajdonságok beírni az eseményeket a honosított karakterláncok kategória.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Az Eseménynapló esemény bejegyzése kategóriájának jeleníti meg, ha az esemény írásakor adjon meg egy kategóriát. Eseménynapló kategóriák érhetők karakterláncokat alkalmazás által meghatározott események szűrése, vagy további információt nyújtanak az esemény. Az alkalmazás például a különböző összetevők vagy különböző műveleteket külön kategóriák adhat meg.       Az esemény-kategóriák érhetők kötelező megadni. Ha az alkalmazás nem használja a kategóriák, ne adja meg a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>és CategoryResourceFile tulajdonságait.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       A Platform SDK dokumentációját a &quot;Üzenet fordító&quot; című részleteket eseményüzeneteket definiálása és felépítése esemény erőforrásfájlokat, [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_10_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_10_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_10_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "A kategória erőforrás elérési útja. Az alapértelmezett érték egy üres karakterlánc (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.LogName
  id: LogName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a nevét, amelyhez a forrás bejegyzést ír az eseménynaplóba."
  remarks: "Use the LogName property to identify the event log that your application writes entries to using the new source. The event log can be a new log or an existing log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not explicitly set the LogName property, the event log defaults to the Application log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n To target an existing log for the new source, set the LogName property to the existing event log name. To create a new event log for the source, you must set the LogName property. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'. The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the LogName property with the \".evt\" file name extension."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_19_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_19_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_19_1.cs)]"
  syntax:
    content: public string LogName { get; set; }
    return:
      type: System.String
      description: "Az Eseménynapló neve. Ez lehet alkalmazást, a rendszer vagy az egyéni naplófájlok nevének. Az alapértelmezett érték: &quot;Application.&quot;"
  overload: System.Diagnostics.EventSourceCreationData.LogName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  id: MachineName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja annak a számítógépnek, amelyre regisztrálni az eseményforrás a nevét."
  remarks: "A számítógépnév érték nem lehet üres karakterlánc. Ha a számítógép neve nincs megadva, alapértelmezés szerint a helyi számítógépen (&quot;.&quot;).       A forrás egy távoli számítógépen regisztrálásakor írni a beállításjegyzék-értékek megfelelő engedélyekkel a számítógépen rendszergazdai jogosultságokkal kell rendelkeznie."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_21_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_21_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_21_1.cs)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "A rendszer, amelyre regisztrálni a forrás neve. Az alapértelmezett érték a helyi számítógépen (&quot;.&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A számítógép neve érvénytelen."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a formázási karakterláncok a forrás üzenetet tartalmazó üzenet erőforrás fájl elérési útját."
  remarks: "A MessageResourceFile tulajdonság segítségével konfigurálhatja a honosított eseményüzeneteket írni egy eseménynapló-forrás. Eseményüzenetek olyan alkalmazás által meghatározott karakterláncok, amelyek ismertetik az eseményt a felhasználó számára.       Az alkalmazás eseménynapló-bejegyzések erőforrás-azonosítók segítségével lehet írni. Egy erőforrás-azonosító található, a MessageResourceFile üzenet indexeket. Az Eseménynapló használatával keresse meg és a megfelelő karakterlánc a honosított üzenet erőforrás fájlból aktuális nyelvi beállításai alapján jeleníti meg az erőforrás-azonosító használatával.       A következő eseményforrás honosított bejegyzések írásra vagy közvetlen karakterláncok írásra kell konfigurálni. Használja a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus a forrást, egy üzenet erőforrás a fájllal konfigurált honosított bejegyzést írni.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Ha az alkalmazás közvetlenül írja az esemény üzenet karakterláncok, ahelyett, hogy az erőforrás-azonosítója egy lokalizált erőforrást fájlban ne adja meg a MessageResourceFile tulajdonság.       A Platform SDK dokumentációját a &quot;Üzenet fordító&quot; című részleteket eseményüzeneteket definiálása és felépítése esemény erőforrásfájlokat, [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_3_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_3_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_3_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "Az üzenet erőforrás elérési útja. Az alapértelmezett érték egy üres karakterlánc (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a paraméter-karakterláncai üzenet a következő adatforrás tartalmazó erőforrás-fájl elérési útját."
  remarks: "A ParameterResourceFile tulajdonsággal konfigurálása egy eseménynapló-forrás honosított eseményüzeneteket beszúrt paraméter karakterláncok írni. Minden egyes megadott honosított eseményüzenet a <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>tulajdonság tartalmazhat behelyettesítendő karakterláncok helyőrzőit.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> A helyőrzők segítségével adja meg a pozíció és erőforrás-azonosítója egy nyelvtől független karakterlánc az eseményüzenet belül. Az Eseménynapló kitölti a helyőrzőket a ParameterResourceFile a megfelelő karakterláncok használatával, és formázza az eseménynapló-üzenet a következő honosított esemény bejegyzés.       Például az alábbi szakasz üzenet szövegfájl meghatározása egy karakterlánc paraméter helyőrzővel: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` paraméter erőforrás fájlon belül a behelyettesítendő karakterlánc definiálni kell az erőforrás-azonosító, amely megfelel a helyőrző a lent látható módon: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` az eseményforrás honosított bejegyzések írásra vagy közvetlen karakterláncok írásra kell konfigurálni. Használja a <xref:System.Diagnostics.EventLog.WriteEvent%2A>metódus a forrást, egy üzenet erőforrás a fájllal konfigurált honosított bejegyzést írni.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Ha az alkalmazás esemény üzenet karakterláncok közvetlenül ír az eseménynaplóba, vagy ha a <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>tulajdonság nem tartalmaz üzenetek paraméter beszúrási helyőrzőkkel, a ParameterResourceFile tulajdonság nem állítható be.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>       A Platform SDK dokumentációját a &quot;Üzenet fordító&quot; című részleteket eseményüzeneteket definiálása és felépítése esemény erőforrásfájlokat, [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_31_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_31_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_31_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "A paraméter erőforrás-fájl elérési útját. Az alapértelmezett érték egy üres karakterlánc (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.Source
  id: Source
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja az eseménynaplóban, mint egy eseményforrás regisztrálására nevét."
  remarks: "A forrás nevét legtöbbször az alkalmazás nevét, vagy egy nagy alkalmazáson belül egy összetevő nevére. A <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>metódust használja a forrás <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, és <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>az új forrás és a kapcsolódó eseménynaplóba. a cél számítógépen beállításazonosítókat létrehozásához tulajdonságok</xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> Egy új adatforrás neve nem egyezhet meg, egy meglévő adatforrás neve, vagy egy meglévő esemény naplójának neve a célszámítógépen.       A beállításkulcs-értékeket a következő adatforrás létrehozása után az alkalmazás használatával a forrás bejegyzéseket a konfigurált eseménynaplójába írhatja.       Minden forrás csak írhat egy eseménynapló egyszerre; azonban az alkalmazás segítségével több forrásból több eseménynaplók írni. Az alkalmazás például szükség lehet a különböző eseménynaplók vagy a különböző erőforrás-fájlok több forrásból."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_13_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_13_1.cs)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "A bejegyzések forrásként regisztrálni az Eseménynapló neve. Az alapértelmezett érték egy üres karakterlánc (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
- uid: System.Diagnostics.EventSourceCreationData.#ctor*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData.EventSourceCreationData
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
