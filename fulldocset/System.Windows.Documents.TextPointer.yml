### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Egy helyen belül jelöli egy <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> vagy <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "A textpointer elem osztály vezet be a következő kifejezésekkel: - pozíció - eredendően, a textpointer elem mindig mutat egy *pozíció* a tartalmat.  Ilyen pozíciók vagy tartoznak folyamata és a tartalom karakter között tartalom elem címkéket, amely a tartalom-szerkezet határozza meg.      -Jelenlegi elhelyezése – mivel a textpointer elem mindig jelzi a pozíció, és mivel a TextPointer keresztül végezhető műveletek számos jelenleg a textpointer elem által hivatkozott helyétől függően, érdemes egy, a TextPointer pozíciójától egyszerűen csak tekintse meg a *aktuális pozíció*.      -Beszúrási pozíciója – az *beszúrási pozíciója* egy pozíció, ahol új tartalom társított tartalom szemantikai szabályok megszüntetése nélkül adhatók hozzá.  A gyakorlatban egy beszúrási pozíciója nem bárhol tartalom, ahol kalap is kell elhelyezni.  Egy érvényes textpointer elem pozícióját, amely nem egy beszúrási pozíciója például két egymás között a pozíció <xref:System.Windows.Documents.Paragraph>címkék (Ez azt jelenti, hogy az előző bekezdésben záró címkéjének és a következő bekezdés nyitó címkéje között).</xref:System.Windows.Documents.Paragraph>      -Szimbólum - a textpointer elem műveletek, például a következő szimbólumok tekinthető egy *szimbólum*: - nyitó vagy záró címkéjének egy <xref:System.Windows.Documents.TextElement>elem.</xref:System.Windows.Documents.TextElement>          -A <xref:System.Windows.UIElement>elem egy <xref:System.Windows.Documents.InlineUIContainer>vagy <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> belül található</xref:System.Windows.UIElement>  Vegye figyelembe, hogy az ilyen egy <xref:System.Windows.UIElement>mindig egynek pontosan egy szimbólumot; minden további tartalmat vagy által tárolt elemeket a <xref:System.Windows.UIElement>nem számítanak szimbólumok.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Minden egyes 16 bites [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] karakter egy szöveges belül <xref:System.Windows.Documents.Run>elem.</xref:System.Windows.Documents.Run>      -Szöveg tároló – egy *szövegtároló* elemhez tartozó űrlap-folyamat a tartalomhoz az elvégzendő végső szegély; pozíciójától a textpointer elem mindig visszatér a szövegtároló belül van.  Jelenleg a szövegtároló kell lennie vagy <xref:System.Windows.Documents.FlowDocument>vagy <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  Általánosságban véve különböző szöveg tárolókban lévő TextPointer példányai között műveletek nem támogatottak.      -Dokumentum - szövegben a tartalmat tároló nevezzük egy *dokumentum*, mint a <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>metódus és a <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>és <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>Tulajdonságok.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       A TextPointer osztály olyan átjárás és módosítását. által jelölt tartalom megkönnyítése érdekében [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] tartalmi elemekre flow; általában a hasonló elemek <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> származik  A műveletek, amely elősegíti a textpointer elem többek között a következők:-végrehajtani egy második megadott pozíció az aktuális pozíciót sorszám összehasonlítása.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.CompareTo%2A>metódus.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      -Határozza meg az aktuális pozíciót a megadott irányban szomszédos tartalom típusát.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>metódus és <xref:System.Windows.Documents.TextPointerContext>számbavételi.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -Beolvasása a <xref:System.Windows.Documents.TextElement>, amely hatóköröket annak megfelelően, vagy az aktuális pozíció szomszédos.</xref:System.Windows.Documents.TextElement>  Lásd: <xref:System.Windows.Documents.Paragraph>és a <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>metódus.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      – A szöveg tároló, amely az aktuális dokumentumon hatóköröket beolvasása.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.Parent%2A>tulajdonság.</xref:System.Windows.Documents.TextPointer.Parent%2A>      -A megadott számú karaktert megelőző vagy követő az aktuális pozíció beolvasása.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>metódus.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Karakterlánc beszúrása az aktuális helyén.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>metódus.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -A sor határok található tartalmat.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>metódus és <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>tulajdonság.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -Lefordítása TextPointer pozíciók és szimbólum eltolások közötti tartalom.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>és <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>módszerek.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      -Visual találati tesztek végrehajtása a textpointer elem pozíciója fordításával és a <xref:System.Windows.Point>képviselő relatív koordinátákban megadott távolságot.</xref:System.Windows.Point>      -A közeli beszúrási pozíciója található, vagy ellenőrizze, hogy az aktuális pozíció egy beszúrási pozíciója.  Tekintse meg a <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>és <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>módszerek és a <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>tulajdonság.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       A pozíció és <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>jelölik a textpointer elem objektumok nem módosíthatók.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  Tartalom szerkeszthető vagy módosításakor a textpointer elem pozíciójától nem módosítja a környező szöveg; viszonyítva Ahelyett, hogy az adott pozícióban az elejétől tartalom eltolását módosul ennek megfelelően az új relatív helyzetben lévő tartalom.  Például a textpointer elem, amely jelzi az adott bekezdés elején pozíció továbbra is fennáll, hogy a bekezdés elejére mutassanak, még akkor is, amikor tartalmat beszúrni vagy előtt vagy után a bekezdés törölve van.       A TextPointer osztály nem biztosít semmilyen nyilvános konstruktor.  A TextPointer példánya hozta létre tulajdonságok vagy más objektumok (beleértve más TextPointer objektumok) módszert használ. Az alábbiakban néhány példa a metódusok és tulajdonságok létrehozása, és térjen vissza a textpointer elemmel.  A lista nem teljes körű létrehozási: – a egy <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A>és <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> </xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -A egy <xref:System.Windows.Controls.TextBlock>(szövegtároló): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, és <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -A egy <xref:System.Windows.Documents.FlowDocument>(szövegtároló): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, és <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>– a egy meglévő textpointer elemmel: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, és <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hajt végre egy sorszám összehasonlítása az aktuális által megadott pozíciók <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> és egy második megadott <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "–&1; érték azt jelzi, hogy a helyzetét megadja az aktuális <xref:System.Windows.Documents.TextPointer>megelőzi a megadott pozíció `position`.</xref:System.Windows.Documents.TextPointer>  A 0 érték azt jelzi, hogy a megadott pozíciók egyenlő.  Pozitív +&1; érték azt jelzi, hogy a helyzetét megadja az aktuális <xref:System.Windows.Documents.TextPointer>által megadott pozícióját a következő `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , amely megadja, hogy hasonlítsa össze az aktuális pozíció."
    return:
      type: System.Int32
      description: "– 1 Ha az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> megelőzi <code> position </code>; 0, ha a helyek azonos; + 1 Ha az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> követi <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Megadja az aktuális pozíció társított szövegtároló kívül egy pozícióját."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A megadott számú karaktert törli az aktuális pozíciójától <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Adjon meg egy pozitív értéket az aktuális pozíció az alábbi karakterek törlése (mint a <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); törli az aktuális pozíció alkalmazza negatív értéket adjon meg (és a <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Valóban törölni karakterek lehet kisebb, mint a megadott `count`.  Ez akkor fordul elő, azokban az esetekben, ahol `count` határozza meg a törlendő számánál több karaktert."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Karakterek törlése, a jelenlegi pozíciótól kezdődően. Adjon meg egy pozitív értéket az aktuális pozíció; az alábbi karakterek törlése törli az aktuális pozíció alkalmazza negatív értéket adjon meg."
    return:
      type: System.Int32
      description: "Valóban törölni karakterek száma."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A metódus meghívható egy helyen, ahol a szöveg nem engedélyezett."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi a <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a szövegtároló az aktuális pozíció társított tartalom végén."
  remarks: "A <xref:System.Windows.Documents.TextPointer.Parent%2A>a visszaadott a <xref:System.Windows.Documents.TextPointer>mindig van kapcsolva a szövegtároló (<xref:System.Windows.Controls.TextBlock> vagy <xref:System.Windows.Documents.FlowDocument>), ahelyett, hogy egy <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a szövegtároló az aktuális pozíció társított tartalom végén."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi a <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a szövegtároló az aktuális pozíció társított tartalom elején."
  remarks: "Használja az eredeti pozíció, amelyből más helyre relatív eltolások dolgozni, ez a tulajdonság által visszaadott pozícióját.  A <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>és <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>módszerek közötti pozíciók megjelenítése és elhelyezése lefordítani hardvermódosításainak tolódnak.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       A <xref:System.Windows.Documents.TextPointer.Parent%2A>a visszaadott a <xref:System.Windows.Documents.TextPointer>mindig van kapcsolva a szövegtároló (<xref:System.Windows.Controls.TextBlock> vagy <xref:System.Windows.Documents.FlowDocument>), ahelyett, hogy egy <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a szövegtároló az aktuális pozíció társított tartalom elején."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Az elemet adja vissza, ha vannak ilyenek, amely az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a megadott logikai irányban."
  remarks: "A visszaadott elem általában egy <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  A <xref:System.Windows.UIElement>is adható vissza, ha a <xref:System.Windows.Documents.TextPointer>belülre jelzi egy <xref:System.Windows.Documents.BlockUIContainer>elem vagy egy <xref:System.Windows.Documents.InlineUIContainer>elem.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> érték, amely meghatározza a keresendő szomszédos elem logikai irányát."
    return:
      type: System.Windows.DependencyObject
      description: "A megadott szomszédos elem <code> direction </code>, vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha szomszédos elem nem létezik."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A határolókeret adja vissza (<xref href=&quot;System.Windows.Rect&quot;></xref>) a tartalom, amely az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a megadott logikai irányban."
  remarks: "<xref:System.Windows.Documents.TextElement>Ez a módszer alkalmazásában szélek nem tekinthetők tartalom.</xref:System.Windows.Documents.TextElement>  Ha a <xref:System.Windows.Documents.TextPointer>előtt elhelyezve egy <xref:System.Windows.Documents.TextElement>él, az eredményül kapott értéket a következő határolókeret nem -<xref:System.Windows.Documents.TextElement> tartalom a megadott irányban.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Ha nincs tartalom a megadott irányban, nulla szélességű <xref:System.Windows.Rect>magasságának minden megelőző tartalom megfelelő magasságú lett visszaadva.</xref:System.Windows.Rect>       Ez a metódus által végrehajtott műveletet egy érvényes elrendezés függ.  Ha szükséges, ez a módszer megpróbálja automatikusan generálja újra egy érvényes elrendezést a művelet folytatása előtt.  Egy elrendezés újragenerálása lehet egy viszonylag drága művelet.  Használja a <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>tulajdonsága egy érvényes elrendezés kereséséhez, előfordulhat, hogy újragenerálja a elrendezés műveletek végrehajtása előtt.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  További információkért lásd: [elrendezés](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékeket, amelyeket egy tartalom határolókeret található logikai irányát határozza meg."
    return:
      type: System.Windows.Rect
      description: "A tartalom, amely az aktuális határolókeret <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a megadott irányban vagy &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; aktuális, ha érvényes elrendezési információ nem érhető el."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Értéket ad vissza egy <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a legközelebbi beszúrási pozícióba a megadott logikai irányban."
  remarks: "Egy beszúrási pozíciója egy helyen, ahol új tartalom társított tartalom szemantikai szabályok megszüntetése nélkül adhatók hozzá.  A gyakorlatban egy beszúrási pozíciója nem bárhol tartalom, ahol kalap is kell elhelyezni.  Egy érvényes <xref:System.Windows.Documents.TextPointer>pozíció, amely nem egy beszúrási pozíciója azt két egymás között <xref:System.Windows.Documents.Paragraph>címkék (Ez azt jelenti, hogy az előző bekezdésben záró címkéjének és a következő bekezdés nyitó címkéje között).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Ha a <xref:System.Windows.Documents.TextPointer>már mutat egy érvényes beszúrási pozíciója, de a záró címke esetében egy nem üres formázási feladatütemezési közvetlenül követi, hogy a megadott irányban pozíciója a <xref:System.Windows.Documents.TextPointer>által visszaadott metódus mutasson a beszúrási pozíciója a formázási feladatütemezési lezárása után módosul.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Vegyük példaként a jelölés során `<Bold>``a``</Bold>``b`.  Vegye figyelembe, hogy vannak-e a betűk között két beszúrási helyek `a` és `b`– egyet, amely megelőzi a záró `Bold` címkét, és közvetlenül a záró követő egy `Bold` címke.  GetInsertionPosition hívása esetén a egy <xref:System.Windows.Documents.TextPointer>közvetlenül a felszólítás utáni pozícióba `a` és előtt a zárás `Bold` címkét, és egy `direction` a <xref:System.Windows.Documents.LogicalDirection>, a visszaadott <xref:System.Windows.Documents.TextPointer>módosul a levél előtt a helyre mutasson `b`, a Bezárás után `Bold` címke.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  Egy hasonló igazítani formázási címkék nyithatók meg az ellenkező logikai irányba használatakor.  Ez a módszer olyan nyújthat Egyértelműsítő hasonló esetekben beszúrási helyek között.       Ez a módszer is használható beszúrási pontok mérlegelni kell, ha egy feladatütemezési strukturális címkék van szó. Például ha pozícióban egy záró és nyitó bekezdéscímkék között, a irányban paraméter segítségével válassza ki a legközelebbi kurzort elején a következő bekezdés (megadásával <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) vagy az előző bekezdésben végén (megadásával <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Ha a mutató már beszúrási helyén, és nincsenek a megadott szomszédos formázási címkék `direction`, a visszaadott <xref:System.Windows.Documents.TextPointer>megegyezik a hívó <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> mutat</xref:System.Windows.Documents.TextPointer>       Lehetséges, hogy létezik-e nem érvényes beszúrási pozíciója <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> által hivatkozott helyétől függően  Ez akkor fordulhat elő, ha a hivatkozott tartalom nem szerkezetileg fejeződött be, mint egy üres táblát, vagy a lista.  Ebben az esetben, ez a metódus egyszerűen adja vissza egy <xref:System.Windows.Documents.TextPointer>való megegyezik a <xref:System.Windows.Documents.TextPointer>Ez a metódus hívása történt a.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Ez a metódus mindig adja meg egy érvényes <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékeket, amelyeket a legközelebbi beszúrási pozíciója keresése logikai irányát határozza meg."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a legközelebbi beszúrási pozícióba a megadott irányban."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Értéket ad vissza egy <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> megadott viszonyítva az aktuális sor elejére <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Ha a <xref:System.Windows.Documents.TextPointer>mutat egyértelmű helyzetbe, például között két sort a sor által megadott irányban <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>a relatív kezdő sor választotta.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       Ez a metódus által végrehajtott műveletet egy érvényes elrendezés függ.  Ha szükséges, ez a módszer megpróbálja automatikusan generálja újra egy érvényes elrendezést a művelet folytatása előtt.  Egy elrendezés újragenerálása lehet egy viszonylag drága művelet.  Használjon <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>Előfordulhat, hogy újragenerálja a elrendezés műveletek végrehajtása előtt egy érvényes elrendezés kereséséhez.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  További információkért lásd: [elrendezés](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "A start külön jelölők, amelyek esetében szeretne kezdőpozícióját adja vissza a sor számának meghatározásakor kihagyását száma. Negatív értékeket adja meg az előző sorok, 0, adja meg az aktuális sor, és pozitív értéket adja meg a következő sorokat."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> mutat a megadott sor elejére (az a <xref:System.Windows.Documents.TextPointer.LogicalDirection*>beállítása <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha a megadott sor kívül esik a tartományon vagy más módon nem található.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Értéket ad vissza egy <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> megadott viszonyítva az aktuális sor elejére <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>, és hány sorok ki lettek hagyva a jelentéseket."
  remarks: "Ha a <xref:System.Windows.Documents.TextPointer>mutat egyértelmű helyzetbe, például között két sort a sor által megadott irányban a <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>tulajdonság a relatív kezdő sor legyen kijelölve.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "A start külön jelölők, amelyek esetében szeretne kezdőpozícióját adja vissza a sor számának meghatározásakor kihagyását száma. Negatív értékeket adja meg az előző sorok, 0, adja meg az aktuális sor, és pozitív értéket adja meg a következő sorokat."
    - id: actualCount
      type: System.Int32
      description: "Ez a módszer adja vissza, ha kezdő külön jelölők, amelyek ki lettek hagyva a, amelyek esetében szeretne kezdőpozícióját adja vissza a sor számának meghatározásakor tényleges számát tartalmazza.  Ez az érték lehet kisebb, mint `count` Ha elején vagy végén a tartalmat a rendszer észlelt előtt a megadott számú sort kimarad. Ez a paraméter lett átadva nem inicializált."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> mutat a megadott sor elejére (az a <xref:System.Windows.Documents.TextPointer.LogicalDirection*>beállítása <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), vagy a legközelebbi a megadott sor, ha az engedélyezett tartományon kívül esik a megadott sor sor elejére.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Visszaad egy mutatót a következő jellel a megadott logikai irányban."
  remarks: "Az alábbi tekinthető szimbólum: - nyitó vagy záró címkéjének egy <xref:System.Windows.Documents.TextElement>elem.</xref:System.Windows.Documents.TextElement>      -A <xref:System.Windows.UIElement>elem szerepel egy <xref:System.Windows.Documents.InlineUIContainer>vagy <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Vegye figyelembe, hogy az ilyen egy <xref:System.Windows.UIElement>mindig egynek pontosan egy szimbólumot; minden további tartalmat vagy által tárolt elemeket a <xref:System.Windows.UIElement>nem számítanak szimbólumok.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bites [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] karakter egy szöveges belül <xref:System.Windows.Documents.Run>elem.</xref:System.Windows.Documents.Run>       A következő szimbólum van kategóriába sorolt, ha <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, vagy <xref:System.Windows.Documents.TextPointerContext>(által meghatározott a <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>metódus), akkor a <xref:System.Windows.Documents.TextPointer>által visszaadott módszer az aktuális pozícióban pontosan egy szimbólum a kiemelt.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       A következő szimbólum van kategóriába sorolt, ha <xref:System.Windows.Documents.TextPointerContext>, majd a <xref:System.Windows.Documents.TextPointer>által visszaadott módszer a kiemelt túli a szöveg a következő nem szöveges jellel (Ez azt jelenti, hogy a következő elhelyezése where a <xref:System.Windows.Documents.TextPointerContext>nem <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  A pontos szimbólum száma átlépte kerülhet sor, előre meghívásával a <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>metódus.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékeket, amelyeket a következő szimbólum keresése logikai irányát határozza meg."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a következő jellel a kért irányban vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> szegélyek a kezdő vagy a tartalom végét."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Értéket ad vissza egy <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a következő beszúrási pozícióba a megadott logikai irányban."
  remarks: "Egy *beszúrási pozíciója* egy pozíció, ahol új tartalom társított tartalom szemantikai szabályok megszüntetése nélkül adhatók hozzá.  A gyakorlatban egy beszúrási pozíciója nem bárhol tartalom, ahol kalap is kell elhelyezni.  Egy érvényes <xref:System.Windows.Documents.TextPointer>pozíció, amely nem egy beszúrási pozíciója azt két egymás között <xref:System.Windows.Documents.Paragraph>címkék (Ez azt jelenti, hogy az előző bekezdésben záró címkéjének és a következő bekezdés nyitó címkéje között).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékek, amelyek keresse meg a következő beszúrási pozíciója a logikai irányát határozza meg."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , amely azonosítja a következő beszúrási pozíciója a kért irányban vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha nincs következő beszúrási pozíciója található."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Szimbólumok számát adja meg az aktuális közötti <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> és egy második megadott <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Az alábbi tekinthető szimbólum: - nyitó vagy záró címkéjének egy <xref:System.Windows.Documents.TextElement>elem.</xref:System.Windows.Documents.TextElement>      -A <xref:System.Windows.UIElement>elem szerepel egy <xref:System.Windows.Documents.InlineUIContainer>vagy <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Vegye figyelembe, hogy az ilyen egy <xref:System.Windows.UIElement>mindig egynek pontosan egy szimbólumot; minden további tartalmat vagy által tárolt elemeket a <xref:System.Windows.UIElement>nem számítanak szimbólumok.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bites [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] karakter egy szöveges belül <xref:System.Windows.Documents.Run>elem.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , amely megadja, hogy a pozíció (a szimbólumok) távolság keresésére."
    return:
      type: System.Int32
      description: "Az aktuális közötti szimbólumok relatív száma <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> és <code> position </code>.  Negatív érték azt jelzi, hogy az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> által megadott pozícióját a következő <code> position </code>, 0 azt jelenti, hogy a pozíció egyenlő, és pozitív érték azt jelzi, hogy az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> megelőzi a megadott pozíció <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Megadja az aktuális pozíció társított szövegtároló kívül egy pozícióját."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Az aktuális szomszédos adja vissza a tartalom kategória mutató <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a megadott logikai irányban."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékeket, amelyeket a szomszédos tartalom kategória határozza meg a logikai irányát határozza meg."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "Egy a <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> értékek, amelyek a megadott logikai irányban szomszédos tartalom kategória jelzi."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Értéket ad vissza egy <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> által a megadott eltolás, a szimbólumok, az aktuális kezdetétől pozíciójától <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Az alábbi tekinthető szimbólum: - nyitó vagy záró címkéjének a <xref:System.Windows.Documents.TextElement>elem.</xref:System.Windows.Documents.TextElement>      -A <xref:System.Windows.UIElement>elem szerepel egy <xref:System.Windows.Documents.InlineUIContainer>vagy <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Vegye figyelembe, hogy az ilyen egy <xref:System.Windows.UIElement>mindig egynek pontosan egy szimbólumot; minden további tartalmat vagy által tárolt elemeket a <xref:System.Windows.UIElement>nem számítanak szimbólumok.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bites [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] karakter egy szöveges belül <xref:System.Windows.Documents.Run>elem.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Az eltolás a szimbólumok, amelynek alapján számítja ki, és visszaadja.  Az eltolás értéke negatív, ha a pozíció kiszámítása logikai irányában szemben, amelyet a <xref:System.Windows.Documents.TextPointer.LogicalDirection*>tulajdonság.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pozíciójától által a megadott eltolás vagy<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>Ha nincs megfelelő pozícióban található."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Értéket ad vissza egy <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> által a megadott eltolás, a szimbólumok, az aktuális kezdetétől pozíciójától <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> és a megadott irányban."
  remarks: "Az alábbi tekinthető szimbólum: - nyitó vagy záró címkéjének a <xref:System.Windows.Documents.TextElement>elem.</xref:System.Windows.Documents.TextElement>      -A <xref:System.Windows.UIElement>elem szerepel egy <xref:System.Windows.Documents.InlineUIContainer>vagy <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Vegye figyelembe, hogy az ilyen egy <xref:System.Windows.UIElement>mindig egynek pontosan egy szimbólumot; minden további tartalmat vagy által tárolt elemeket a <xref:System.Windows.UIElement>nem számítanak szimbólumok.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bites [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] karakter egy szöveges belül <xref:System.Windows.Documents.Run>elem.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "Az eltolás a szimbólumok, amelynek alapján számítja ki, és visszaadja.  Ha az eltolás negatív, a visszaadott <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> megelőzi az aktuális <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>; ellenkező esetben ez azt jelenti."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékek, amelyek a logikai iránya a visszaadott <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pozíciójától által a megadott eltolás vagy<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>Ha eltolás túlnyúlik a tartalom végét."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Az aktuális szomszédos szöveget tartalmazó karakterlánc visszaadása <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> a megadott logikai irányban."
  remarks: "Ez a módszer csak folyamatos frissítési kísérletei során szöveget adja vissza.  Ha bármelyik szimbólumának típusa eltérő semmit <xref:System.Windows.Documents.TextPointerContext>az aktuális szomszédos <xref:System.Windows.Documents.TextPointer>a megadott irányban.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Hasonlóképpen szöveg csak a következő nem szöveges szimbólum legfeljebb adja vissza."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> , amely meghatározza a logikai irányát megkeresi és visszaadja a szomszédos szöveges értékeket."
    return:
      type: System.String
      description: "A megadott logikai irányban szomszédos szöveget tartalmazó karakterláncot vagy &lt;xref:System.String?displayProperty=fullName&gt; Ha nincs mellette található."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A hívó által megadott karaktertömbnek a megadott irányban szomszédos szöveg másolja át a megadott maximális karakterszámot."
  remarks: "Ez a módszer csak folyamatos frissítési kísérletei során szöveget adja vissza.  Ha bármelyik szimbólumának típusa eltérő semmit <xref:System.Windows.Documents.TextPointerContext>az aktuális szomszédos <xref:System.Windows.Documents.TextPointer>a megadott irányban.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Hasonlóképpen szöveg csak a következő nem szöveges szimbólum legfeljebb adja vissza."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékek, amelyek található, és másolja a szomszédos szöveg logikai irányát határozza meg."
    - id: textBuffer
      type: System.Char[]
      description: "A puffer, amelybe szöveg másolódik."
    - id: startIndex
      type: System.Int32
      description: "Az index `textBuffer` kezdőpontját írás másolt szöveget."
    - id: count
      type: System.Int32
      description: "A másolandó karakterek maximális száma."
    return:
      type: System.Int32
      description: "A ténylegesen másolta, a karakterek számát <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>kisebb, mint 0 vagy nagyobb, mint a <xref:System.Array.Length*> tulajdonsága <code>textBuffer</code>.       – vagy – <code>count</code> kisebb, mint 0 vagy nagyobb, mint a fennmaradó terület <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> mínusz <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Unicode karakterek számát adja vissza az aktuális közötti <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> és a következő nem szöveges szimbólumok, a megadott logikai irányban."
  remarks: "Az alábbi tekinthető szimbólum: - nyitó vagy záró címkéjének a <xref:System.Windows.Documents.TextElement>elem.</xref:System.Windows.Documents.TextElement>      -A <xref:System.Windows.UIElement>elem szerepel egy <xref:System.Windows.Documents.InlineUIContainer>vagy <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Vegye figyelembe, hogy az ilyen egy <xref:System.Windows.UIElement>mindig egynek pontosan egy szimbólumot; minden további tartalmat vagy által tárolt elemeket a <xref:System.Windows.UIElement>nem számítanak szimbólumok.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bites [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] karakter egy szöveges belül <xref:System.Windows.Documents.Run>elem.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Egy a <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> értékek, amelyek a logikai irányát a karakterek számát határozza meg."
    return:
      type: System.Int32
      description: "Az aktuális közötti Unicode karakterek <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> és a következő nem szöveges szimbólum.  Ez a szám 0 lehet, ha nincs szomszédos szöveg."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Egy érték, amely jelzi, hogy az aktuális pozíció társított szövegtároló van-e egy érvényes (naprakész) elrendezés lekérdezi."
  remarks: "Szükség esetén egy érvényes elrendezés függő műveletek (például a <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>metódus, <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>metódust, és <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>tulajdonság) megpróbálja automatikusan generálja újra a művelet folytatása előtt érvényes elrendezést.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  Egy elrendezés újragenerálása lehet egy viszonylag drága művelet.  Ez a tulajdonság használatával, előfordulhat, hogy újragenerálja a elrendezés műveletek végrehajtása előtt ellenőrizni, hogy érvényes elrendezést.  További információkért lásd: [elrendezés](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a elrendezése aktuális és érvényes; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Szúrja be sortörés a jelenlegi állapotában."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> elhelyezett után azonnal a <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> elem szúrhat be ezt a módszert."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Szúrja be a bekezdés megszakítás a jelenlegi állapotában."
  remarks: "Ha ezt a módszert nevezik, ha az aktuális pozíció belül egy meglévő <xref:System.Windows.Documents.Paragraph>elem, a meglévő bekezdés és a benne található tartalmat felosztása két bekezdés a jelenlegi állapotában.</xref:System.Windows.Documents.Paragraph>  Ez a metódus hívása esetén, ha az aktuális pozíció nem egy meglévő bekezdés belül, egy új, üres részének.  Ha ezt a módszert nevezik pozíciójában felosztásával, vagy egy bekezdés beszúrása alkalmatlan (például, ha az aktuális pozíció belül egy <xref:System.Windows.Documents.Hyperlink>elem), kivételt vált ki.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> elején (<xref:System.Windows.Documents.TextElement.ContentStart*>) az új bekezdés.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ezt a módszert nevezik, amely nem osztható fel olyan új bekezdés, például hatókörében pozíció az egy <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> vagy <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A megadott szöveg szúr be a szöveget <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> a jelenlegi állapotában."
  remarks: "Ha a <xref:System.Windows.Documents.TextPointer>által hatóköre nem a <xref:System.Windows.Documents.Run>elem, egy <xref:System.Windows.Documents.Run>kerül beillesztésre, valamint a `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "Helyezze be a szöveg."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Az aktuális pozíció nem szerepel a következőben egy <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> elemet."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy az aktuális pozíció egy beszúrási pozíciója."
  remarks: "Egy beszúrási pozíciója egy helyen, ahol új tartalom társított tartalom szemantikai szabályok megszüntetése nélkül adhatók hozzá.  A gyakorlatban egy beszúrási pozíciója nem bárhol tartalom, ahol kalap is kell elhelyezni.  Egy érvényes <xref:System.Windows.Documents.TextPointer>pozíció, amely nem egy beszúrási pozíciója azt két egymás között <xref:System.Windows.Documents.Paragraph>címkék (Ez azt jelenti, hogy az előző bekezdésben záró címkéjének és a következő bekezdés nyitó címkéje között).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az aktuális pozíció egy beszúrási pozíciója; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy az aktuális pozíció egy sor elején."
  remarks: "Ha a <xref:System.Windows.Documents.TextPointer>mutat egyértelmű helyzetbe, például között két sort a sor által megadott irányban a <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>tulajdonság a relatív kezdő sor legyen kijelölve.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       Ez a tulajdonság által végrehajtott műveletet egy érvényes elrendezés függ.  Ha szükséges, ez a módszer megpróbálja automatikusan generálja újra egy érvényes elrendezést a művelet folytatása előtt.  Egy elrendezés újragenerálása lehet egy viszonylag drága művelet.  Használja a <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>tulajdonsága egy érvényes elrendezés kereséséhez, előfordulhat, hogy újragenerálja a elrendezés műveletek végrehajtása előtt.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  További információkért lásd: [elrendezés](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az aktuális pozíció; sor elejére Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Azt jelzi, hogy a megadott pozíciónál az aktuális pozíció azonos szöveg tárolóban."
  remarks: "A legtöbb műveletek, például több <xref:System.Windows.Documents.TextPointer>példányok csak akkor érvényes, ha a szóban forgó példányok jelzi a azonos szöveg tároló hatókörébe pozíciók.</xref:System.Windows.Documents.TextPointer>  Például a <xref:System.Windows.Documents.TextPointer.CompareTo%2A>és <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>metódusok nem használható egy <xref:System.Windows.Documents.TextPointer>az aktuális pozíció társított szövegtároló kívüli helyre.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Ezt a módszert használja, ha annak ellenőrzésére, hogy a megadott <xref:System.Windows.Documents.TextPointer>kompatibilis az aktuális pozíció az ilyen műveleteket.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , amely megadja, hogy hasonlítsa össze az aktuális pozíció."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <code> textPosition </code> pozíció, amely ugyanabban a szöveg tárolóban az aktuális pozíció; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi az aktuális pozíció, amely a tartalom társítva a jelenlegi állapotában a félreérthetőség megszüntetéséhez társított logikai irányát."
  remarks: "Példa bemutatja, hogyan ezzel a tulajdonsággal a <xref:System.Windows.Documents.LogicalDirection>, a <xref:System.Windows.Documents.TextPointer>visszaadott találati teszt által módszert biztosít két karakterek a szöveg közötti találat.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> A logikai irányát határozza meg, ami a két karakter ténylegesen korlátját – balra vagy jobbra."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "A <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> érték, amely az aktuális pozíció társított."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi az aktuális pozíció hatóköröket bekezdés, ha van ilyen."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "A <xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> , amely az aktuális pozíció hatóköröket vagy<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>Ha nincs ilyen bekezdés már létezik."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Lekérdezi a logikai szülője, amely az aktuális pozíció hatóköröket."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "Az aktuális pozíció hatóköröket logikai szülője."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ez a típus vagy tag támogatja a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastruktúra és nem javasolt közvetlenül a kódból használni."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A karakterlánc, amely az objektumot határozza meg."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
