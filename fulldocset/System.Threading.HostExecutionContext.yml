### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "Magában foglalja, és továbbítsa a gazdagép végrehajtási környezet szálak között."
  remarks: "A HostExecutionContext nagyobb <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> részét képezi. A gazdagép-környezetben áttelepíti, vagy a forgalmat, a végrehajtási környezet."
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> osztály."
  remarks: "Az alapértelmezett konstruktor létrehoz egy gazdagépet a végrehajtási környezet amelynek <xref:System.Threading.HostExecutionContext.State%2A>tulajdonság értéke `null`.</xref:System.Threading.HostExecutionContext.State%2A>"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> osztály adott használatával."
  remarks: "A <xref:System.Threading.HostExecutionContext>mellékelt a <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> </xref:System.Threading.HostExecutionContext> A `state` jelöli a biztonságos leíró, amely tartalmazza a `IUnknown` mutató ahhoz, hogy a gazdagép."
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "A gazdagép végrehajtási környezet állapota képviselő objektum."
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Másolat készítése az aktuális állomás végrehajtási környezetet."
  remarks: "A példány használható a paraméter egy <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>metódus hívása.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "A <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> a gazdagép-környezetben az aktuális szál képviselő objektum."
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Feloldja a jelenlegi példány által használt erőforrások a <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> osztály."
  remarks: "Hívás `Dispose` amikor elkészült, a <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> használatával A `Dispose` metódus leaves a <xref:System.Threading.HostExecutionContext>használhatatlan állapotban.</xref:System.Threading.HostExecutionContext> Hívása után `Dispose`, fel kell szabadítania mutató összes hivatkozást az <xref:System.Threading.HostExecutionContext>, a szemétgyűjtő is visszaszerezni a memória, amely a <xref:System.Threading.HostExecutionContext>lett elfoglaló.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext>       További információkért lásd: [nem felügyelt erőforrások tisztítás](~/add/includes/ajax-current-ext-md.md) és [eldobásakor metódusának](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Mindig hívás `Dispose` az <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> utolsó referenciaként a engedélyezés előtt Ellenkező esetben az erőforrásoknak nem szabadul szemétgyűjtő hívást csak a <xref:System.Threading.HostExecutionContext>objektum `Finalize` metódus.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Felülbírálja a származtatott osztály, ha feloldja a által használt nem felügyelt erőforrások a <xref:System.Threading.WaitHandle>, és opcionálisan kiadja a felügyelt erőforrások.</xref:System.Threading.WaitHandle>"
  remarks: "Ezt a metódust a <xref:System.Threading.HostExecutionContext.Dispose>metódus túlterhelési és a véglegesítőt.</xref:System.Threading.HostExecutionContext.Dispose> <xref:System.Threading.HostExecutionContext.Dispose>a védett metódushoz meghívja a `disposing` paraméter `true`.</xref:System.Threading.HostExecutionContext.Dispose> A véglegesítőt hívja meg a metódushoz `disposing` beállítása `false`.       Ha a `disposing` paraméter `true`, ez a módszer minden felügyelt objektum által tárolt összes erőforrás kiadja, amelyhez a <xref:System.Threading.HostExecutionContext>hivatkozik.</xref:System.Threading.HostExecutionContext> Ez a metódus meghívja a `Dispose` minden hivatkozott metódusa.       Ez a metódus nem hívható többször más objektumok által. Ez a módszer felülbírálásához ügyeljen arra, hogy egy korábbi hívás a korábban használaton objektumok hivatkoznak."
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a kibocsátási felügyelt és a nem felügyelt erőforrások; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> csak a nem felügyelt erőforrások kijelölése."
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Lekérdezi vagy beállítja a gazdagép végrehajtási környezet állapotát."
  remarks: "Az állapot tulajdonság érték azt jelenti, hogy a biztonságos leíró tartalmazó a `IUnknown` mutató ahhoz, hogy a gazdagép."
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "A gazdagép végrehajtási környezet állapota képviselő objektum."
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
