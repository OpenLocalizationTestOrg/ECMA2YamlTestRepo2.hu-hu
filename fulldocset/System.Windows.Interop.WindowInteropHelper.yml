### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "Segít közötti való együttműködés [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] és [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] kódot."
  remarks: "Ez az osztály tagjai lehetővé teszi, hogy a hívó belső eléréséhez a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND és a szülő HWND, egy [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</xref:System.Windows.Window>  A megfelelő biztonsági ellenőrzéseket hajtja végre ezekhez a tagokhoz.       A HWND alapján több adott objektumokat kell használni, ez az osztály.       Egy példán keresztül, ha szeretné-e a gazdagép egy [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] párbeszédpanelén egy [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] alkalmazás. A WindowInteropHelper inicializálni egy [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] ablak objektum a párbeszédpanel. Ezután a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] ablak leíróját (HWND) az a <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>tulajdonság, és adja meg a tulajdonosát a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] -ablakot a <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>tulajdonság.</xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Az alábbi példakód bemutatja, hogyan WindowInteropHelper használata esetén egy [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] párbeszédpanelén egy [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] alkalmazás.       [!code-cs[CorePseudocode #WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)][!code-vb[CorePseudocode #WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper) ] az osztály támogatja egy másik helyzet lehet megszerezni a <xref:System.Windows.Interop.HwndSource>objektum egy [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>objektum.</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource>   A <xref:System.Windows.Interop.HwndSource>lehetővé teszi, hogy közvetlen feldolgozása [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] keresztül küldött üzenetek a <xref:System.Windows.Interop.HwndSource.AddHook%2A>metódus.</xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> A <xref:System.Windows.Interop.HwndSource>és <xref:System.Windows.Interop.HwndSource.AddHook%2A>helyett egy <xref:System.Windows.Window>továbbra is kezelheti, amelyek nem egyenértékű vagy a kezelési üzenetek [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> Hozzon létre egy WindowInteropHelper a <xref:System.Windows.Window>forráskiszolgálón, majd hívja <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>a WindowInteropHelper <xref:System.Windows.Interop.HwndSource>.</xref:System.Windows.Interop.HwndSource> HWND lekérése a</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> </xref:System.Windows.Window>"
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref> egy meghatározott osztály [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] ablak."
  remarks: "Az ablak egy párbeszédpanel, vagy egy ablak, amely más módon nem alkalmas határain belül üzemeltetett lehet egy [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] alkalmazás."
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] ablak objektum."
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "A az ablak HWND hoz létre, ha a HWND még nem lett létrehozva."
  remarks: "A EnsureHandle módszert használja, ha el szeretné különíteni az ablak leíró (HWND) létrehozását a tényleges ábrázoló a felügyelt <xref:System.Windows.Window>.</xref:System.Windows.Window> Ez akkor hasznos, ha egy automatizálási ügyfél, amely a feladatok ablak megjelenítése nélkül érhető el.       A natív ablak még nem hozott létre, ha ezzel a módszerrel hoz létre a natív ablakban beállítása a <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>tulajdonság, és csak a HWND.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Ha a natív ablak már létrejött, a meglévő natív ablak leíróját adja vissza.       Ha a natív ablak jön létre a metódus hívása miatt a <xref:System.Windows.Window.SourceInitialized>egy esemény jelenik meg.</xref:System.Windows.Window.SourceInitialized>       Lekérdezi a <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>tulajdonság után a EnsureHandle metódus lehívásra kerül a meglévő ablakleíró adja vissza.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> A vizuális fában azonban nem kapcsolódik az ablak addig után a <xref:System.Windows.Window.Show%2A>metódust.</xref:System.Windows.Window.Show%2A>       A metódus hívása a EnsureHandle egynél többször nem hoz létre új ablak kezeli. A EnsureHandle metódus hívása, ha a leíró már létrejött hívásával a <xref:System.Windows.Window.Show%2A>metódus nem hoz létre egy új ablak leíróját.</xref:System.Windows.Window.Show%2A> Egy natív ablak csak jön létre, ha nincs leíró létezik EnsureHandle metódus hívásakor.       Natív ablakában API-k segítségével p/invoke beállított ablak tulajdonságok nem szerepelhet a felügyelt API-k ablakban. Ha megadta az időszak legfelső a natív MS_EX_TOPMOST jelző használatával, miután a EnsureHandle metódus lehívásra kerül, például a <xref:System.Windows.Window.Topmost%2A>tulajdonság nem biztos, hogy tükrözze a natív beállítás.</xref:System.Windows.Window.Topmost%2A>"
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "Egy <xref:System.IntPtr>, amely jelzi, hogy a HWND.</xref:System.IntPtr>"
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Lekérdezi a ablakleírója egy [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] , amelyen a létrehozásához használt <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref>."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "A [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] ablakleíró (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Lekérdezi vagy beállítja a leíróját a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] tulajdonos ablakkal."
  remarks: "Windows is Fölérendelés úgy, hogy ezt a tulajdonságot. Ez igaz az általános [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] programozási, nem Fölérendelés windows, amely már használatban van."
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "A tulajdonos ablakleíró (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
