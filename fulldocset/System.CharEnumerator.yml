### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "Léptetés keresztül támogatja a <xref:System.String>objektum és az egyes karakterek olvasásakor.</xref:System.String> Ez az osztály nem örökölhető."
  remarks: "Egy CharEnumerator biztosít a csak olvasási hozzáféréssel a hivatkozott karakter <xref:System.String>objektum.</xref:System.String> Például a `foreach` a Microsoft Visual Basic és a C# programozási nyelven, kimutatásban, amely a gyűjtemény elemeinek telepítéseket, lekéri a egy CharEnumerator egy <xref:System.String>objektum ahhoz, hogy az a karakter, hogy az objektum iterációt.</xref:System.String>       Nincs a CharEnumerator nyilvános konstruktor. Ehelyett hívja a <xref:System.String>objektum <xref:System.String.GetEnumerator%2A>egy hivatkozást a karakterlánc inicializált CharEnumerator beszerzéséhez.</xref:System.String.GetEnumerator%2A> </xref:System.String>       Egy CharEnumerator tart fenn a karakterláncban szereplő karakterek belső index a CharEnumerator hivatkozik. Az index állapota érvénytelen, amikor egy Karakterpozíció logikailag az első karakternek előtt vagy után utolsó karaktere a karakterláncban hivatkozik, és érvényes, ha a karakterláncon belüli karaktert hivatkozik. Az index egy logikailag előtt az első karakter pozíciója az inicializálása, és van állítva egy pozíciójára után utolsó karaktere ismétléseinek befejezésekor. Kivételt vált ki, ha úgy próbálja elérni a karaktert, amíg az index érvénytelen.       A <xref:System.CharEnumerator.MoveNext%2A>metódus egy, az index növeli a, az első és az ezt követő karakterek pedig elért.</xref:System.CharEnumerator.MoveNext%2A> A <xref:System.CharEnumerator.Reset%2A>módszert állítja be az index egy logikailag előtt az első karakter pozíciója.</xref:System.CharEnumerator.Reset%2A> A <xref:System.CharEnumerator.Current%2A>tulajdonság lekéri a karakter, index jelenleg hivatkozik.</xref:System.CharEnumerator.Current%2A> A <xref:System.CharEnumerator.Clone%2A>metódus másolatot hoz létre a CharEnumerator.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > CharEnumerator keresztül egy vagy több független több példányát is hozzáférhet <xref:System.String>.</xref:System.String> egyetlen példánya Ez az osztály van megvalósítva támogatásához a <xref:System.Collections.IEnumerator>felületet.</xref:System.Collections.IEnumerator> A számbavevő használatával kapcsolatos további információkért lásd: a <xref:System.Collections.IEnumerator>témakörre.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Másolat készítése az aktuális <xref href=&quot;System.CharEnumerator&quot;> </xref> objektum."
  remarks: "A visszatérési értéke ezen példányának másolatát <xref:System.CharEnumerator>és a jelenlegi állapotában.</xref:System.CharEnumerator> Ez akkor hasznos, ha az állapotmentést iteráció során egy <xref:System.String>objektum.</xref:System.String>       Tegyük fel például, az alkalmazás <xref:System.CharEnumerator>a <xref:System.String>.</xref:System.String> az egyes karakterek iterációt az</xref:System.CharEnumerator> eredeti példányát használja. Amikor a rendszer észlelt egy egyedi karaktert, az alkalmazás felfüggeszti a feldolgozási, és hívja meg a Klónozási módszert. Érvényben van ez menti <xref:System.CharEnumerator>a <xref:System.String>.</xref:System.String> objektum indexe</xref:System.CharEnumerator>       Az alkalmazás által a klón egy másik navigáljon a `String` egyes feldolgozási végrehajtásához. A navigációs mellékhatása, a Klónozás elveszti a nyomon követése a pozíció, ahol a feldolgozás leállt. Azonban ha a feldolgozási segédcsomópont befejeződött, az alkalmazás elveti a Klónozás és használja az eredeti <xref:System.CharEnumerator>példány folytatja a munkát a <xref:System.String>ahol eredeti feldolgozása leállt.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > Ez a metódus támogatja megvalósítva a <xref:System.ICloneable>felületet.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Egy <xref:System.Object>, amely az aktuális másolatát <xref href=&quot;System.CharEnumerator&quot;> </xref> objektum.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "A jelenleg hivatkozott karakter lekérdezi a karakterláncban számba veszi a <xref href=&quot;System.CharEnumerator&quot;> </xref> objektum."
  remarks: "A <xref:System.CharEnumerator>osztály kezeli a számozott karakterlánc belső index, és az aktuális tulajdonság visszaadja a karakter, amely jelenleg hivatkozik az index.</xref:System.CharEnumerator> Ez a tulajdonság akkor szabadna meghívni, csak akkor, ha az index érvényes; Ellenkező esetben a rendszer kivételt hoz létre.       Az index érvénytelen mindig az üres karakterlánc (&quot;&quot;). Az index érvénytelen is után a <xref:System.String.GetEnumerator%2A?displayProperty=fullName>vagy <xref:System.CharEnumerator.Reset%2A>metódust.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> Meghívása után egyik módszert sem neve, a <xref:System.CharEnumerator.MoveNext%2A>metódus úgy, hogy a felsorolt karakterlánc első karaktere indexe.</xref:System.CharEnumerator.MoveNext%2A> Az index érvénytelen, amikor a <xref:System.CharEnumerator.MoveNext%2A>metódus beolvasása `true`.</xref:System.CharEnumerator.MoveNext%2A>       Aktuális nem helyezi át az index, és egymást követő hívások aktuális térjen vissza az adott karakter, amíg <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, vagy <xref:System.String.GetEnumerator%2A?displayProperty=fullName>nevezik.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "A jelenleg hivatkozik a Unicode-karakter <xref href=&quot;System.CharEnumerator&quot;> </xref> objektum."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Az index érvénytelen; Ez azt jelenti akkor az első előtt vagy után utolsó karaktere a felsorolt karakterlánc."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Feloldja a jelenlegi példány által használt erőforrások a <xref href=&quot;System.CharEnumerator&quot;> </xref> osztály."
  remarks: "Dispose hívható, amikor végzett a <xref:System.CharEnumerator>.</xref:System.CharEnumerator> használatával A Dispose metódus elhagyja a <xref:System.CharEnumerator>használhatatlan állapotban.</xref:System.CharEnumerator> Hívása Dispose, után fel kell szabadítania mutató összes hivatkozást az <xref:System.CharEnumerator>, a szemétgyűjtő is visszaszerezni a memória, amely a <xref:System.CharEnumerator>lett elfoglaló.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       További információkért lásd: [nem felügyelt erőforrások tisztítás](~/add/includes/ajax-current-ext-md.md) és [eldobásakor metódusának](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Mindig hívás eldobásakor az <xref:System.CharEnumerator>.</xref:System.CharEnumerator> utolsó referenciaként a engedélyezés előtt Ellenkező esetben az erőforrásoknak nem szabadul szemétgyűjtő hívást csak a <xref:System.CharEnumerator>objektum `Finalize` metódus.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Az aktuális belső indexe-os <xref href=&quot;System.CharEnumerator&quot;> </xref> a következő karakter a felsorolt karakterlánc-objektum."
  remarks: "A <xref:System.CharEnumerator>osztály kezeli a számozott karakterlánc belső index, és a MoveNext metódust eggyel növeli a az index.</xref:System.CharEnumerator> Hívása után a MoveNext meghívása <xref:System.String.GetEnumerator%2A>vagy <xref:System.CharEnumerator.Reset%2A>választva növelheti az aktuális Karakterpozíció első karakterének a felsorolt karakterláncban.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> Ellenőrizze, hogy a visszatérési érték `true` annak megállapításához, hogy az aktuális Karakterpozíció érvényes.       Az index már az utolsó karakter a felsorolt karakterlánc túl, ha az index nem változik és `false` adja vissza.       Figyelje meg, hogy ha a felsorolt karakterlánc üres (&quot;&quot;), az állapota a <xref:System.CharEnumerator>mindig érvénytelen.</xref:System.CharEnumerator> Ennek oka, hogy a belső indexe a <xref:System.CharEnumerator>kezdetben a számozott karakterlánc első karaktere előtt, és ezért érvénytelen.</xref:System.CharEnumerator> Meg a MoveNext metódust logikailag beállítja a felsorolt karakterlánc, amely egyben érvénytelen utolsó (nem létező) karakter után."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az index sikeresen értéke akkor növekszik, és a számozott karakterlánc; belül Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inicializálja az index logikailag előtt a számozott karakterlánc első karaktere helyre."
  remarks: "A <xref:System.CharEnumerator>osztály kezeli a számozott karakterlánc belső index, és a visszaállítási módszert állítja be az index állapota érvénytelen.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "A jelenleg hivatkozott karakter lekérdezi a karakterláncban számba veszi a <xref href=&quot;System.CharEnumerator&quot;> </xref> objektum. Ez a tag ismertetését lásd: &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;."
  remarks: "Ez a tag egy explicit illesztőfelületet tag megvalósítása. Használat csak akkor, ha a <xref:System.CharEnumerator>példány típusúvá egy <xref:System.Collections.IEnumerator>felületet.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "A becsomagolt Unicode-karakter, jelenleg hivatkozik a <xref href=&quot;System.CharEnumerator&quot;> </xref> objektum."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Számbavétel még nem kezdődött meg.       – vagy – számbavétel befejeződött."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
