### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.DirectorySecurity
  id: DirectorySecurity
  children:
  - System.Security.AccessControl.DirectorySecurity.#ctor
  - System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  langs:
  - csharp
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
  type: Class
  summary: "Jelenti. a hozzáférés-vezérlés és a naplózási könyvtár biztonsági. Ez az osztály nem örökölhető."
  remarks: "A DirectorySecurity osztály adja meg egy rendszerkönyvtárban, és hogyan hozzáférések naplóz hozzáférési jogosultságokat. Ez az osztály a szabálykészlet, hozzáférési és naplózási jogosultságok jelenti. Minden hozzáférési szabály által képviselt egy <xref:System.Security.AccessControl.FileSystemAccessRule>objektum, amíg minden naplózási szabály által képviselt egy <xref:System.Security.AccessControl.FileSystemAuditRule>objektum.</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       A DirectorySecurity osztály Windows fájlt a biztonsági rendszer absztrakciós. Ez a rendszer minden directory tartozik egy tulajdonosi hozzáférés-szabályozási listához (DACL), amely szabályozza a hozzáférést a könyvtárhoz, és a rendszer hozzáférési szabálygyűjtemény (Rendszerszintű), amely megadja a vezérlő hozzáférések naplóz. A <xref:System.Security.AccessControl.FileSystemAccessRule>és <xref:System.Security.AccessControl.FileSystemAuditRule>osztályokat absztrakt entitással egészült ki, a hozzáférés-vezérlő bejegyzések (ACE-k) DACL-EK és rendszerszintű alkotó.</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       A DirectorySecurity osztály egyedi hozzáférés-szabályozási és rendszerszintű; részleteit számos elrejtése Nincs hozzáférés-vezérlő bejegyzések rendezése vagy null DACL foglalkoznia.       Használja a <xref:System.Security.AccessControl.FileSecurity>osztály beolvasni, hozzáadása vagy módosítása a hozzáférési szabályok, amelyek megfelelnek a hozzáférés-vezérlési lista és a fájl Rendszerszintű.</xref:System.Security.AccessControl.FileSecurity>       A következő táblázat felsorolja a a módszerrel is megvalósítható eléréséhez, és a címtár biztonságának fenntartása érdekében.      | A feladat |} Módszerek |}   |----------|-------------|   | Adjon hozzá szabályokat |}<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|   | Távolítsa el a szabályok |}<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|   | A hozzáférés-vezérlés könyvtárra beolvasása |}<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|   | A hozzáférés-vezérlés könyvtárra megőrzéséhez |}<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName></xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName></xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|</xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>"
  example:
  - "The following code example uses the DirectorySecurity class to add and then remove an access control list (ACL) entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/t-system.security.access_1_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/t-system.security.access_1_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/t-system.security.access_1_1.vb)]"
  syntax:
    content: 'public sealed class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  - System.Security.AccessControl.FileSystemSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AccessRightType
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.DirectorySecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.DirectorySecurity
  langs:
  - csharp
  name: DirectorySecurity()
  nameWithType: DirectorySecurity.DirectorySecurity()
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> osztály."
  remarks: "Ez a konstruktor használja, ha azt szeretné, hogy hozzon létre egy üres <xref:System.Security.AccessControl.DirectorySecurity>objektum, amely nem egy létező könyvtár alapul.</xref:System.Security.AccessControl.DirectorySecurity> Ezután a hozzáférés-vezérlési adatokat objektum feltöltése és alkalmazza azt a könyvtárat."
  syntax:
    content: public DirectorySecurity ();
    parameters: []
  overload: System.Security.AccessControl.DirectorySecurity.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Microsoft Windows 2000 vagy újabb."
  platform:
  - net462
- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.DirectorySecurity
  langs:
  - csharp
  name: DirectorySecurity(String,AccessControlSections)
  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> osztály egy adott könyvtárból a megadott értékek használata a <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> enumerálása."
  remarks: "Ez a konstruktor kéri le a hozzáférési adatokat az adott könyvtár, és létrehoz egy <xref:System.Security.AccessControl.DirectorySecurity>adatokat beágyazó objektum.</xref:System.Security.AccessControl.DirectorySecurity> Ezután vizsgálja meg, adja hozzá, vagy a hozzáférési adatokat az adott könyvtár törlése."
  syntax:
    content: public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "A könyvtár létrehozása helye egy <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objektum."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Egy a <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> értékek, amelyek határozza meg a hozzáférés szabályozásához lista (ACL) adatokat beolvasni."
  overload: System.Security.AccessControl.DirectorySecurity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> name </code> paraméter egy nulla hosszúságú karakterlánc, csak szóközt tartalmaz, vagy egy vagy több érvénytelen karaktereket tartalmaz. meghatározottak szerint <xref:System.IO.Path.InvalidPathChars>.</xref:System.IO.Path.InvalidPathChars>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "A megadott elérési út érvénytelen, (például egy le nem képezett meghajtón)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "A megadott fájl a <code> name </code> paraméter nem található."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/o-hiba történt a könyvtár megnyitása közben."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <code> name </code> paraméter formátuma érvénytelen."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Az aktuális operációs rendszer nem Microsoft Windows 2000 vagy újabb."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "A megadott elérési út vagy fájlnév meghaladja a rendszerben meghatározott maximális hosszúság. Például a Windows-alapú platformokon elérési utak legfeljebb 248 karakterből kell állnia, és a fájl nevének 260 karakternél rövidebbnek kell lennie."
  - type: System.Security.AccessControl.PrivilegeNotHeldException
    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException
    description: "A jelenlegi rendszer-fiók nem rendelkezik rendszergazdai jogosultságokkal."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "A könyvtár nem található."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A <code> name </code> paraméter megadott könyvtár nem csak olvasható.       – vagy – ez a művelet nem támogatott a jelenlegi platformon.       – vagy – a hívó nem rendelkezik a szükséges engedéllyel."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.FileSystemSecurity
  isExternal: false
  name: System.Security.AccessControl.FileSystemSecurity
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.Security.AccessControl.PrivilegeNotHeldException
  parent: System.Security.AccessControl
  isExternal: false
  name: PrivilegeNotHeldException
  nameWithType: PrivilegeNotHeldException
  fullName: System.Security.AccessControl.PrivilegeNotHeldException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.Security.AccessControl.DirectorySecurity.#ctor
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity()
  nameWithType: DirectorySecurity.DirectorySecurity()
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()
- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity(String,AccessControlSections)
  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.DirectorySecurity.#ctor*
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity.DirectorySecurity
