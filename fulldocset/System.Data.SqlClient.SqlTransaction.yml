### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  summary: "Jelöli egy [!INCLUDE[tsql](~/add/includes/tsql-md.md)] tranzakció el lehessen végezni a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] adatbázis. Ez az osztály nem örökölhető."
  remarks: "The application creates a SqlTransaction object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the SqlTransaction object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a SqlTransaction. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a SqlTransaction. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbTransaction
  implements: []
  inheritedMembers:
  - System.Data.Common.DbTransaction.Dispose
  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Az adatbázis-tranzakció érvényesítése."
  remarks: "A Transact-SQL COMMIT TRANSACTION utasítás a Commit módszer megegyezik. Nem állítható vissza egy tranzakció után azt véglegesítve, mivel minden módosítás végleges tartozik az adatbázis váltak. További információkért lásd: SQL Server Books Online webhelyen.      > [!NOTE]  >   `Try` / `Catch` kivételkezelést mindig kell használni, amikor véglegesítése vagy <xref:System.Data.SqlClient.SqlTransaction>.</xref:System.Data.SqlClient.SqlTransaction> visszaállítása Mindkét `Commit` és <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>hoz létre egy <xref:System.InvalidOperationException>Ha a kapcsolat megszakad, vagy ha a tranzakció már vissza lett állítva a kiszolgálón.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       Az SQL Server tranzakciók további információkért lásd: &quot;Explicit&quot; és &quot;Kódolási hatékony tranzakciók&quot; az SQL Server Online könyvekben."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the Commit, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public override void Commit ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Commit*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Hiba történt a tranzakció véglegesítése közben."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tranzakció már véglegesítés vagy visszaállítás.       – vagy – a kapcsolat megszakad."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Lekérdezi a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> a tranzakcióhoz tartozó objektum vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha a tranzakció már nem érvényes."
  remarks: "Az egyetlen alkalmazást az nulla vagy több tranzakció több adatbázis kapcsolat lehet. Ez a tulajdonság lehetővé teszi, hogy meghatározhatja, hogy egy adott <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> által létrehozott tranzakcióhoz tartozó kapcsolati objektum"
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "A <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> a tranzakcióhoz rendelt objektumot."
  overload: System.Data.SqlClient.SqlTransaction.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Data.SqlClient.SqlTransaction.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Data.SqlClient.SqlTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Megadja a <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> ebben a tranzakcióban."
  remarks: "A párhuzamos tranzakciók nem támogatottak. Ezért a <xref:System.Data.IsolationLevel>a teljes tranzakció vonatkozik.</xref:System.Data.IsolationLevel>       SQL Server elkülönítési szinten további információkért lásd: &quot;Elkülönítési szint a az adatbázismotor&quot; az SQL Server Online könyvekben."
  syntax:
    content: public override System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: "A <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> ebben a tranzakcióban. Az alapértelmezett érték <xref uid=&quot;langword_csharp_ReadCommitted&quot; name=&quot;ReadCommitted&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Visszaállítja a tranzakció egy függőben lévő állapot."
  remarks: "A Transact-SQL ROLLBACK TRANSACTION utasítás a Rollback módszer megegyezik. További információkért lásd: SQL Server Books Online webhelyen.       A tranzakció is csak állítható vissza egy függőben lévő állapot (után <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>hívása történt, de előtte <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>nevezik).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> A tranzakció vissza abban az esetben az eldobása előtt visszaállítanak `Commit` vagy `Rollback` nevezik.      > [!NOTE]  >   `Try` / `Catch` kivételkezelést mindig kell használni, amikor egy tranzakció visszaállítása. A `Rollback` hoz létre egy <xref:System.InvalidOperationException>Ha a kapcsolat megszakad, vagy ha a tranzakció már vissza lett állítva a kiszolgálón.</xref:System.InvalidOperationException>       Az SQL Server tranzakciók további információkért lásd: &quot;Explicit&quot; és &quot;Kódolási hatékony tranzakciók&quot; az SQL Server Online könyvekben."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and Rollback methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._8_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._8_1.vb)]"
  syntax:
    content: public override void Rollback ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Hiba történt a tranzakció véglegesítése közben."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tranzakció már véglegesítés vagy visszaállítás.       – vagy – a kapcsolat megszakad."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Visszaállítja a tranzakció egy függőben lévő állapotból, és adja meg a tranzakció vagy mentési pont neve."
  remarks: "A <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>módszer megegyezik a Transact-SQL ROLLBACK TRANSACTION utasítást.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> További információkért lásd: &quot;Az Explicit tranzakciók&quot; és &quot;tranzakció visszaállítási&quot; az SQL Server Online könyvek pontok.       A tranzakció is csak állítható vissza egy függőben lévő állapot (után <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>hívása történt, de előtte <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>nevezik).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> A tranzakció meg lesz állítva, ha az eldobása előtt `Commit` vagy `Rollback` nevezik.      > [!NOTE]  >   `Try` / `Catch` kivételkezelést mindig kell használni, amikor egy tranzakció visszaállítása. A `Rollback` hoz létre egy <xref:System.InvalidOperationException>Ha a kapcsolat megszakad, vagy ha a tranzakció már vissza lett állítva a kiszolgálón.</xref:System.InvalidOperationException>       Az SQL Server tranzakciók további információkért lásd: &quot;Explicit&quot; és &quot;Kódolási hatékony tranzakciók&quot; az SQL Server Online könyvekben."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._40_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._40_1.vb)]"
  syntax:
    content: public void Rollback (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "A tranzakció vissza tudják állítani, vagy, amelyre szeretné visszaállítani a mentési pont neve."
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nincs tranzakció név megadva."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tranzakció már véglegesítés vagy visszaállítás.       – vagy – a kapcsolat megszakad."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Létrehoz egy mentési pontra a tranzakció vissza tudják állítani a tranzakció része használható, és adja meg a mentési pont neve."
  remarks: "Mentés módszer megegyezik a Transact-SQL a SAVE TRANSACTION utasítást.       Az értéknek a `savePoint` paraméter lehet ugyanazt az értéket a használt a `transactionName` egyes paraméterének a <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>metódus.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>       Visszaállítási pontok biztosít lehetőséget a kijelzők tranzakciók visszaállítása. A Mentés metódussal mentési pont létrehozása és majd később hívás a <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>metódus visszaállítása a mentési pont helyett a Start a tranzakció visszaállítása folyamatban.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>"
  syntax:
    content: public void Save (string savePointName);
    parameters:
    - id: savePointName
      type: System.String
      description: "A mentési pont neve."
  overload: System.Data.SqlClient.SqlTransaction.Save*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Hiba történt a tranzakció véglegesítése közben."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tranzakció már véglegesítés vagy visszaállítás.       – vagy – a kapcsolat megszakad."
  platform:
  - net462
references:
- uid: System.Data.Common.DbTransaction
  isExternal: false
  name: System.Data.Common.DbTransaction
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlTransaction.Commit
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
- uid: System.Data.SqlClient.SqlTransaction.Connection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
- uid: System.Data.SqlClient.SqlTransaction.Commit*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit
  nameWithType: SqlTransaction.Commit
- uid: System.Data.SqlClient.SqlTransaction.Connection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose
  nameWithType: SqlTransaction.Dispose
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback
  nameWithType: SqlTransaction.Rollback
- uid: System.Data.SqlClient.SqlTransaction.Save*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save
  nameWithType: SqlTransaction.Save
