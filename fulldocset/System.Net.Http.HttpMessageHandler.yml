### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageHandler
  id: HttpMessageHandler
  children:
  - System.Net.Http.HttpMessageHandler.#ctor
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
  type: Class
  summary: "A HTTP-üzenet kezelők alaptípusa."
  remarks: "Hiba a rendszer különböző HTTP üzenet használható. Ezek közé tartoznak a következők.      1.  <xref:System.Net.Http.DelegatingHandler>-Az osztály használatával egy kezelő csatlakoztassa egy kezelő lánc.</xref:System.Net.Http.DelegatingHandler>      2.  HttpMessageHandler - egy egyszerű osztály célosztályából származik, amely a legtöbb alkalmazás támogatja a leggyakoribb követelményeit.      3.  <xref:System.Net.Http.HttpClientHandler>– Egy osztály, amely a kezelő lánc ténylegesen kezeli a HTTP szállítási művelet alján működik.</xref:System.Net.Http.HttpClientHandler>      4.  <xref:System.Net.Http.WebRequestHandler>– Egy speciális osztály, amely működik, a kezelő lánc osztály kezeli a HTTP szállítási műveletek vonatkozó beállításokkal alján a <xref:System.Net.HttpWebRequest?displayProperty=fullName>objektum.</xref:System.Net.HttpWebRequest?displayProperty=fullName></xref:System.Net.Http.WebRequestHandler>       Ha fejlesztők származik osztályok HttpMessageHandler és felülbírálás a <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>metódust, akkor győződjön meg arról, hogy <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>is lett meghívva egyidejűleg eltérő szál által.</xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>       Erre akkor szükség a módszerek óta <xref:System.Net.Http.HttpClient>egyidejűleg meghívható legyen, és garantálja az szál biztonsági kell.</xref:System.Net.Http.HttpClient> Igen, ha a kezelő hozzá van rendelve egy <xref:System.Net.Http.HttpClient>példány, a <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>metódus a kezelő által egyidejűleg meghívva előfordulhat, hogy a <xref:System.Net.Http.HttpClient>példány és a vonatkozó igényeket alkalmasak a többszálú futtatásra.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpClient>"
  syntax:
    content: 'public abstract class HttpMessageHandler : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> osztály."
  syntax:
    content: protected HttpMessageHandler ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A nem felügyelt erőforrások és a felügyelt erőforrások megválik által használt kiadásokban a <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A nem felügyelt által használt erőforrások kiadja a <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> és a felügyelt erőforrások opcionálisan értékesít."
  remarks: "Ezt a módszert nevezik nyilvános `Dispose()` metódus és a <xref:System.Object.Finalize%2A>metódus.</xref:System.Object.Finalize%2A> `Dispose()`meghívja a védett `Dispose(Boolean)` metódust a `disposing` paraméter `true`. <xref:System.Object.Finalize%2A>Elindítja a `Dispose` rendelkező `disposing` beállítása `false`. Ha a `disposing` paraméter `true`, ez a módszer minden felügyelt objektum által tárolt összes erőforrás kiadja, amelyhez a <xref:System.Net.Http.HttpMessageHandler>hivatkozik.</xref:System.Net.Http.HttpMessageHandler></xref:System.Object.Finalize%2A> Ez a metódus meghívja a `Dispose()` minden hivatkozott metódusa."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a kibocsátási felügyelt és a nem felügyelt erőforrások; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> kiadásokban csak a nem felügyelt erőforrások."
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Egy aszinkron művelet HTTP-kérelem küldése."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum befejezi, miután a teljes válasz tartalom olvasható.</xref:System.Threading.Tasks.Task%601>       A sendasync metódusok párhuzamosan metódus elsősorban a rendszer használja. Ezt a módszert nevezik, a rendszer egy a <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName>módszert nevezik.</xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> A legtöbb alkalmazás soha nem fog ez a metódus meghívható."
  syntax:
    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A HTTP felderítéskérelmi üzenetet küldeni."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A megszakítási token megszakítja a műveletet."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpMessageHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageHandler.#ctor
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageHandler.#ctor*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler.HttpMessageHandler
- uid: System.Net.Http.HttpMessageHandler.Dispose*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageHandler.Dispose
- uid: System.Net.Http.HttpMessageHandler.SendAsync*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageHandler.SendAsync
