### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  id: IDispatchMessageInspector
  children:
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  langs:
  - csharp
  name: IDispatchMessageInspector
  nameWithType: IDispatchMessageInspector
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  type: Interface
  summary: "Meghatározza a módszereket, amelyek lehetővé teszik egyéni vizsgálat vagy a bejövő és kimenő üzenetek szolgáltatásalkalmazások módosítása."
  remarks: "Vizsgálja meg, vagy módosítsa a bejövő vagy kimenő üzenetek vagy egy kérelem üzenet művelethez, vagy a válaszüzenet visszatér a hívó elküldése előtt IDispatchMessageInspector megvalósításához. Nincsenek számos forgatókönyv esetén van szükség, elfogja üzenetek, amelynek célja a művelet meghívása előtt. Például a bejövő kérelem üzenetek naplózása, vagy hajtsa végre az egyes szolgáltatások egy fejléce alapján.       Általában egy szolgáltatás-viselkedéshez üzenet ellenőrök szúrja be (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), egy végpontviselkedéshez (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), vagy egy szerződés viselkedés (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>).</xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName> A viselkedés hozzáadja az üzenet inspector, hogy a <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName>gyűjtemény.</xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> Kiterjesztése a futtatókörnyezet parancsfájlokkal kapcsolatos további információkért lásd: [ServiceHost kiterjesztése és a Service Model réteg](~/add/includes/ajax-current-ext-md.md).      -A <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>módszer lehetővé teszi, hogy egyéni viselkedését az üzenetet kapta, de az azt a kívánt művelet indítása előtt.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>      -A <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>módszer lehetővé teszi egyéni viselkedés, a művelet visszatérése után, de a válasz elküldése előtt.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!NOTE] > IDispatchMessageInspector mindig objektumok ugyanabban függetlenül attól, hogy egy művelet egyirányú vagy kérelem-válasz üzenet küldése során."
  example:
  - "The following code example shows a basic IDispatchMessageInspector that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`IDispatchMessageInspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`IDispatchMessageInspector.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IDispatchMessageInspector
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  id: AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Hívása után egy bejövő üzenet érkezett előtt azonban az üzenet indít a kívánt műveletet."
  remarks: "A AfterReceiveRequest módszerrel ellenőrizze vagy módosítsa a bejövő üzenetet, az ügyfél csatornán, és az aktuális szolgáltatáspéldányt. A visszatérési értéke lehet bármely objektum korrelációs célokra; használni kívánt az Ön mint visszakerül a `correlationState` paramétere a <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>metódus.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!IMPORTANT] > Nem használhatja az üzenet törzsét, kivéve, ha a teljes üzenet puffer, és készítsen egy másolatot. Ha ezt a megoldást választja, meg kell győződnie két példányban, az üzenet: egy vizsgálata, míg a másik felülírja a `request` paraméter."
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: request
      type: System.ServiceModel.Channels.Message
      description: "A kérelemüzenetet."
    - id: channel
      type: System.ServiceModel.IClientChannel
      description: "A bejövő csatorna."
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Az aktuális szolgáltatáspéldányt."
    return:
      type: System.Object
      description: "Az objektum állapota összefüggést. Ez az objektum átadott vissza a <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>metódus.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  id: BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Hívása után a művelet adott vissza, de a válasz előtt üzenetet küld."
  remarks: "A BeforeSendReply módszer segítségével hajtsa végre a visszatérési üzenet küldése előtt egyéni viselkedését. A `correlationState` az objektum által visszaadott a <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>módszer, amelynek segítségével hajtsa végre a viselkedés támogatásához a bejövő és kimenő hívások közötti összefüggést.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>"
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);
    parameters:
    - id: reply
      type: System.ServiceModel.Channels.Message
      description: "A válaszüzenet. Ez az érték null, ha a műveletet az egyik módja."
    - id: correlationState
      type: System.Object
      description: "A korrelációs objektumot adott vissza a <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>metódus.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IClientChannel
  parent: System.ServiceModel
  isExternal: true
  name: IClientChannel
  nameWithType: IClientChannel
  fullName: System.ServiceModel.IClientChannel
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply
  nameWithType: IDispatchMessageInspector.BeforeSendReply
