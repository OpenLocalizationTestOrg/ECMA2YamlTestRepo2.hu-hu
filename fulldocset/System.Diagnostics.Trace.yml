### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Trace
  id: Trace
  children:
  - System.Diagnostics.Trace.Assert(System.Boolean)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.AutoFlush
  - System.Diagnostics.Trace.Close
  - System.Diagnostics.Trace.CorrelationManager
  - System.Diagnostics.Trace.Fail(System.String)
  - System.Diagnostics.Trace.Fail(System.String,System.String)
  - System.Diagnostics.Trace.Flush
  - System.Diagnostics.Trace.Indent
  - System.Diagnostics.Trace.IndentLevel
  - System.Diagnostics.Trace.IndentSize
  - System.Diagnostics.Trace.Listeners
  - System.Diagnostics.Trace.Refresh
  - System.Diagnostics.Trace.TraceError(System.String)
  - System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceInformation(System.String)
  - System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceWarning(System.String)
  - System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  - System.Diagnostics.Trace.Unindent
  - System.Diagnostics.Trace.UseGlobalLock
  - System.Diagnostics.Trace.Write(System.Object)
  - System.Diagnostics.Trace.Write(System.String)
  - System.Diagnostics.Trace.Write(System.Object,System.String)
  - System.Diagnostics.Trace.Write(System.String,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object)
  - System.Diagnostics.Trace.WriteLine(System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  - System.Diagnostics.Trace.WriteLine(System.String,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  langs:
  - csharp
  name: Trace
  nameWithType: Trace
  fullName: System.Diagnostics.Trace
  type: Class
  summary: "Különböző módszereket biztosít és tulajdonságait, amelyek segítenek a kód végrehajtásának nyomon követni. Ez az osztály nem örökölhető."
  remarks: "A tulajdonságok használhatók, és az eszköz nyomkövetési osztályt metódusokon kiadási buildek. Instrumentation az alkalmazást a valós beállítások állapotának figyelését teszi lehetővé. Nyomkövetés megkönnyíti, probléma azonosítása és javítsa ki a futó rendszer megzavarása nélkül.       Ez az osztály metódusokat megjelenítendő biztosít egy <xref:System.Diagnostics.Trace.Assert%2A>párbeszédpanel, és egy helyességi feltétel, amely mindig kibocsátás <xref:System.Diagnostics.Trace.Fail%2A>.</xref:System.Diagnostics.Trace.Fail%2A> </xref:System.Diagnostics.Trace.Assert%2A> Ez az osztály biztosít írási metódusokat a következő eltéréseket: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>, és <xref:System.Diagnostics.Trace.WriteLineIf%2A>.</xref:System.Diagnostics.Trace.WriteLineIf%2A> </xref:System.Diagnostics.Trace.WriteIf%2A> </xref:System.Diagnostics.Trace.WriteLine%2A> </xref:System.Diagnostics.Trace.Write%2A>       A <xref:System.Diagnostics.BooleanSwitch>és <xref:System.Diagnostics.TraceSwitch>osztályok biztosít a nyomkövetési kimeneti dinamikusan szabályozására.</xref:System.Diagnostics.TraceSwitch> </xref:System.Diagnostics.BooleanSwitch> Az alkalmazás újrafordítás módosíthatja az értékeket, a kapcsolók. A konfigurációs fájl használatával egy kapcsoló információkért lásd: a <xref:System.Diagnostics.Switch>osztály és a [hogyan: hozzon létre, inicializálása és nyomkövetési kapcsolók konfigurálása](~/add/includes/ajax-current-ext-md.md) témakörben.</xref:System.Diagnostics.Switch>       A nyomkövetési kimeneti cél hozzáadásával testre szabható <xref:System.Diagnostics.TraceListener>a példányok, vagy távolítsa el a példányt a <xref:System.Diagnostics.Trace.Listeners%2A>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners%2A> </xref:System.Diagnostics.TraceListener> A <xref:System.Diagnostics.Trace.Listeners%2A>gyűjtemény megosztott is a <xref:System.Diagnostics.Debug>és a nyomkövetési osztályok; a nyomkövetés-figyelő hozzáadása vagy osztály ad hozzá a figyelő mindkét.</xref:System.Diagnostics.Debug> </xref:System.Diagnostics.Trace.Listeners%2A> Alapértelmezés szerint a nyomkövetési kimeneti kibocsátott <xref:System.Diagnostics.DefaultTraceListener>osztály</xref:System.Diagnostics.DefaultTraceListener> használatával      > [!NOTE] > Nyomkövetés-figyelő való hozzáadásával a <xref:System.Diagnostics.Trace.Listeners%2A>gyűjtemény okozhat kivételt jelezni, miközben a nyomkövetés, ha nem érhető el a nyomkövetés-figyelő által használt erőforrások.</xref:System.Diagnostics.Trace.Listeners%2A> A feltételek és a kivétel lépett fel a nyomkövetés-figyelő függenek, ezért nem vehető száma ebben a témakörben. A nyomkövetési módszerekhez hívások hasznos lehet `try` / `catch` észlelése és nyomkövetésfigyelők a kivételek kezelése érdekében.      > [!NOTE] > Nyomkövetésfigyelők részlegesen megbízható kód hozzáadásakor elérhetővé válik egy <xref:System.Security.SecurityException>kivétel, mivel az hozzáadása nyomkövetési figyelők kell <xref:System.Security.Permissions.SecurityPermissionFlag>engedély.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.SecurityException> A Visual Studio védőfal mögött futó részlegesen megbízható kód nyomkövetéséhez, ne vegyen fel nyomkövetésfigyelők. Ehelyett a nyomkövetés megtekintése és <xref:System.Diagnostics.Debug>állapotüzenetek a **kimeneti** ablak.</xref:System.Diagnostics.Debug>       A nyomkövetési osztály biztosít lekérése vagy beállítása szintjét tulajdonságok <xref:System.Diagnostics.Trace.Indent%2A>, a <xref:System.Diagnostics.Trace.IndentSize%2A>, valamint <xref:System.Diagnostics.Trace.AutoFlush%2A>után minden egyes írási.</xref:System.Diagnostics.Trace.AutoFlush%2A> </xref:System.Diagnostics.Trace.IndentSize%2A> </xref:System.Diagnostics.Trace.Indent%2A>       Beállítása a <xref:System.Diagnostics.Trace.AutoFlush%2A>és <xref:System.Diagnostics.Trace.IndentSize%2A>nyomkövetés, szerkesztheti a konfigurációs fájl, amely megfelel az alkalmazás nevét.</xref:System.Diagnostics.Trace.IndentSize%2A> </xref:System.Diagnostics.Trace.AutoFlush%2A> A konfigurációs fájl az alábbi példához hasonló formátumban kell lennie: ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ``` a <xref:System.Diagnostics.ConditionalAttribute>nyomkövetési módszerek alkalmazva van attribútum.</xref:System.Diagnostics.ConditionalAttribute> Támogató <xref:System.Diagnostics.ConditionalAttribute>figyelmen kívül hagyja ezeket a metódusok, kivéve, ha a &quot;TRACE&quot; feltételes fordítási szimbólum típusúként van definiálva.</xref:System.Diagnostics.ConditionalAttribute> A fordítóprogram dokumentációja határozza meg hogy <xref:System.Diagnostics.ConditionalAttribute>támogatott és a feltételes fordítási szimbólum definiálása szintaxisa.</xref:System.Diagnostics.ConditionalAttribute>      > [!NOTE] > A Visual Studio-projektek, alapértelmezés szerint a &quot;DEBUG&quot; feltételes fordítási szimbólum hibakeresési buildekben van definiálva, és a &quot;TRACE&quot; szimbólum van definiálva, mind a hibakeresési és kiadás alkot. Ez a viselkedés letiltásához a Visual Studio dokumentációjában olvashat.       Adja meg a &quot;TRACE&quot; feltételes fordítási szimbólum C# nyelven íródtak, vegye fel a `/d:TRACE` a parancssor használatával a kód fordítása a fordító parancssorhoz lehetőséget, vagy vegye fel `#define TRACE` a fájl elejéhez. A Visual Basic, adja hozzá a `/d:TRACE=True` a fordító parancssori kapcsolóval, vagy adja hozzá `#Const TRACE=True` a fájlhoz.       <xref:System.Diagnostics.ConditionalAttribute>a C++ fordítóprogram által nem támogatott.</xref:System.Diagnostics.ConditionalAttribute> Egyenértékű funkcionalitással közé kell tenni a nyomkövetés metódusok egy `#if defined(TRACE) ... #endif` letiltása, majd adja meg a `/DTRACE` fordítóprogram parancssori kapcsolóval, vagy adja hozzá `#define TRACE` a fájlhoz."
  example:
  - "The following example uses Trace to indicate the beginning and the end of a program's execution. The example also uses the <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=fullName> methods to distinguish the tracing output. For a more complete example of the use of Trace, see [How to: Add Trace Statements to Application Code](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cpp[Classic Trace Example#1](~/add/codesnippet/cpp/t-system.diagnostics.trace_1.cpp)]\n [!code-cs[Classic Trace Example#1](~/add/codesnippet/csharp/t-system.diagnostics.trace_1.cs)]\n [!code-vb[Classic Trace Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.trace_1.vb)]"
  syntax:
    content: public sealed class Trace
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ellenőrzi a feltétel; Ha a feltétel <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, egy üzenetet jelenít meg, amely tartalmazza a hívási verem."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example creates an index for an array. Then some action is performed that sets the value of the index. Next the code calls Assert to verify the index value is valid. If it is not valid, the Assert outputs the call stack.  \n  \n [!code-cs[Classic Trace.Assert Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_23_1.cs)]\n [!code-cpp[Classic Trace.Assert Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_23_1.cpp)]\n [!code-vb[Classic Trace.Assert Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_23_1.vb)]"
  syntax:
    content: public static void Assert (bool condition);
    parameters:
    - id: condition
      type: System.Boolean
      description: "A feltételes kifejezés kiértékeléséhez. Ha a feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, egy hibaüzenet nem küldi el, és nem jelenik meg az üzenet mezőbe."
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ellenőrzi a feltétel; Ha a feltétel <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, a megadott üzenet kimenete, és bemutatja a hívásverem üzenetpanel megjelenítése."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_20_1.cs)]\n [!code-cpp[Classic Trace.Assert1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_20_1.cpp)]\n [!code-vb[Classic Trace.Assert1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_20_1.vb)]"
  syntax:
    content: public static void Assert (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "A feltételes kifejezés kiértékeléséhez. Ha a feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, a megadott üzenet nem küldi el, és nem jelenik meg az üzenet mezőbe."
    - id: message
      type: System.String
      description: "Az üzenetet a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  id: Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ellenőrzi a feltétel; Ha a feltétel <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, két megadott üzenetek kimenete, és bemutatja a hívásverem üzenetpanel megjelenítése."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_24_1.cs)]\n [!code-vb[Classic Trace.Assert2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_24_1.vb)]\n [!code-cpp[Classic Trace.Assert2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_24_1.cpp)]"
  syntax:
    content: public static void Assert (bool condition, string message, string detailMessage);
    parameters:
    - id: condition
      type: System.Boolean
      description: "A feltételes kifejezés kiértékeléséhez. Ha a feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, a megadott üzenetek nem, és nem jelenik meg az üzenet mezőbe."
    - id: message
      type: System.String
      description: "Az üzenetet a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
    - id: detailMessage
      type: System.String
      description: "A részletes üzenetet a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.AutoFlush
  id: AutoFlush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja az e <> </> *> meg kell hívni a <> </> *> után minden egyes."
  remarks: "Az alapértelmezett érték `false`.       Az adatfolyam könyvelési nem az alapul szolgáló kódoló kiüríti azokat a csak akkor hívható explicit módon <xref:System.Diagnostics.Trace.Flush%2A>vagy <xref:System.Diagnostics.Trace.Close%2A>.</xref:System.Diagnostics.Trace.Close%2A> </xref:System.Diagnostics.Trace.Flush%2A> Beállítás AutoFlush `true` azt jelenti, hogy az adatok az adatfolyam a pufferből Igen, de állapota kódoló nem Igen. Ez lehetővé teszi a kódoló állapotában (részleges karakter) tartani, hogy azt megfelelően kódolja a következő blokkot karaktereket. Ebben a forgatókönyvben a UTF8 és amikor bizonyos karaktereket csak kódolható után a kódoló megkapja a szomszédos karaktert vagy karaktereket UTF7 érinti.       A AutoFlush beállítása és <xref:System.Diagnostics.Trace.IndentSize%2A>a <xref:System.Diagnostics.Trace>, szerkesztheti a konfigurációs fájl, amely megfelel az alkalmazás nevét is.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Trace.IndentSize%2A> A konfigurációs fájl az alábbi példához hasonló formátumban kell lennie:```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <> </> *> metódust a <> </> *> után minden írási; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.Trace.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Close
  id: Close
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kimeneti puffer kiürítése, és majd bezárja a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Ezt a módszert használja, ha a kimeneti érintetlen fájlba, például a <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener>       Könyvelési az adatfolyam nem kiüríteni az alapul szolgáló kódoló, kivéve, ha explicit módon hívja <xref:System.Diagnostics.Trace.Flush%2A>vagy Bezárás.</xref:System.Diagnostics.Trace.Flush%2A> Beállítás <xref:System.Diagnostics.Trace.AutoFlush%2A>való `true` azt jelenti, hogy az adatok az adatfolyam a pufferből Igen, de állapota kódoló nem Igen.</xref:System.Diagnostics.Trace.AutoFlush%2A> Ez lehetővé teszi a kódoló állapotában (részleges karakter) tartani, hogy azt megfelelően kódolja a következő blokkot karaktereket. Ebben a forgatókönyvben a UTF8 és amikor bizonyos karaktereket csak kódolható után a kódoló megkapja a szomszédos karaktert vagy karaktereket UTF7 érinti."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_9_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_9_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public static void Close ();
    parameters: []
  overload: System.Diagnostics.Trace.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.CorrelationManager
  id: CorrelationManager
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A korrelációs manager lekéri a nyomkövetési szálat."
  remarks: "> [!NOTE]> Ez a legtöbb alkalmazást nem lehet használni alkalommal, amikor egy speciális tulajdonsággal.       A <xref:System.Diagnostics.CorrelationManager>osztály egy logikai műveletet identitás adattárolásra szál adathoz kötött környezetben, és automatikusan felcímkézik az egyes tárolt identitással a szál által előállított nyomkövetési esemény használt metódusokat biztosít.</xref:System.Diagnostics.CorrelationManager>"
  syntax:
    content: public static System.Diagnostics.CorrelationManager CorrelationManager { get; }
    return:
      type: System.Diagnostics.CorrelationManager
      description: "A <xref href=&quot;System.Diagnostics.CorrelationManager&quot;> </xref> a nyomkövetés a szál rendelt objektumot."
  overload: System.Diagnostics.Trace.CorrelationManager*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A megadott hibaüzenet bocsát ki."
  remarks: "The default behavior for the default trace listener is to output the `message` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the Fail method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_1.cs)]\n [!code-cpp[Classic Trace.Fail Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_1.cpp)]\n [!code-vb[Classic Trace.Fail Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_1.vb)]  \n  \n You can also use the Fail method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_2.cs)]\n [!code-cpp[Classic Trace.Fail Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_2.cpp)]\n [!code-vb[Classic Trace.Fail Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_2.vb)]"
  syntax:
    content: public static void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "Egy üzenet hozható létre."
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Megfelelően kibocsát egy hibaüzenet, és a részletes hibaüzenet."
  remarks: "The default behavior is for the default trace listener to output the `message` parameter and the `detailedMessage` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_1.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_1.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_1.vb)]  \n  \n You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail1 Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_2.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_2.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_2.vb)]"
  syntax:
    content: public static void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "Egy üzenet hozható létre."
    - id: detailMessage
      type: System.String
      description: "Kibocsátás részletes üzenetet."
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Flush
  id: Flush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kimeneti puffer kiürítése, és leállítja a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> írandó pufferelt adatok"
  remarks: "Az adatfolyam könyvelési nem az alapul szolgáló kódoló kiüríti azokat a csak akkor hívható explicit módon kiürítése vagy <xref:System.Diagnostics.Trace.Close%2A>.</xref:System.Diagnostics.Trace.Close%2A> Beállítás <xref:System.Diagnostics.Trace.AutoFlush%2A>való `true` azt jelenti, hogy az adatok az adatfolyam a pufferből Igen, de állapota kódoló nem Igen.</xref:System.Diagnostics.Trace.AutoFlush%2A> Ez lehetővé teszi a kódoló állapotában (részleges karakter) tartani, hogy azt megfelelően kódolja a következő blokkot karaktereket. Ebben a forgatókönyvben a UTF8 és amikor bizonyos karaktereket csak kódolható után a kódoló megkapja a szomszédos karaktert vagy karaktereket UTF7 érinti."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_17_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_17_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_17_1.vb)]"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Diagnostics.Trace.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Indent
  id: Indent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Növeli az aktuális <xref:System.Diagnostics.Trace.IndentLevel*>egy.</xref:System.Diagnostics.Trace.IndentLevel*>"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_6_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_6_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_6_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n```"
  syntax:
    content: public static void Indent ();
    parameters: []
  overload: System.Diagnostics.Trace.Indent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a behúzását."
  remarks: "A IndentLevel tulajdonság adja meg a szám, ahányszor a francia méretű <xref:System.Diagnostics.Trace.IndentSize%2A>alkalmazzák.</xref:System.Diagnostics.Trace.IndentSize%2A> Ez a tulajdonság /-szál/kérelmenkénti alapon tárolja."
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_10_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_10_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_10_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "A behúzását. Az alapértelmezett érték nulla."
  overload: System.Diagnostics.Trace.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentSize
  id: IndentSize
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a számú egy francia."
  remarks: "A <xref:System.Diagnostics.TextWriterTraceListener>Ez a szám értelmezi szóközöket.</xref:System.Diagnostics.TextWriterTraceListener> Egy <xref:System.Diagnostics.EventLogTraceListener>figyelmen kívül hagyja ezt az értéket.</xref:System.Diagnostics.EventLogTraceListener>       Ez a tulajdonság /-szál/kérelmenkénti alapon tárolja.       Beállítása a <xref:System.Diagnostics.Trace.AutoFlush%2A>és az IndentSize <xref:System.Diagnostics.Trace>, szerkesztheti a konfigurációs fájl, amely megfelel az alkalmazás nevét is.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Trace.AutoFlush%2A> A konfigurációs fájl az alábbi példához hasonló formátumban kell lennie:```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "A behúzás szóközöket száma. Az alapértelmezett érték négy."
  overload: System.Diagnostics.Trace.IndentSize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Listeners
  id: Listeners
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi a gyűjtemény figyelők által figyelt nyomkövetési kimenetét."
  remarks: "A figyelők formázott kimenetét a nyomkövetési kimenetet eredményez. Alapértelmezés szerint a gyűjteményben szereplő <xref:System.Diagnostics.DefaultTraceListener>osztály</xref:System.Diagnostics.DefaultTraceListener> példánya Ha el szeretné távolítani az alapértelmezett figyelő, a <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>metódust, és adja át a <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példányának</xref:System.Diagnostics.TraceListenerCollection.Remove%2A> A konzolablakban kimenet átirányítása, adjon hozzá egy <xref:System.Diagnostics.ConsoleTraceListener>osztályhoz.</xref:System.Diagnostics.ConsoleTraceListener>      > [!NOTE] > A figyelők gyűjtemény is van osztva a <xref:System.Diagnostics.Debug>és a <xref:System.Diagnostics.Trace>osztályok; hozzáadása a nyomkövetés-figyelő vagy osztályhoz ad hozzá a figyelő mindkét.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>"
  example:
  - "The following example creates a <xref:System.Diagnostics.ConsoleTraceListener> that outputs to the console screen. The code then adds the new listener to the Listeners.  \n  \n [!code-cs[Classic Trace.Listeners Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_2_1.cs)]\n [!code-vb[Classic Trace.Listeners Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_2_1.vb)]\n [!code-cpp[Classic Trace.Listeners Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_2_1.cpp)]"
  syntax:
    content: public static System.Diagnostics.TraceListenerCollection Listeners { get; }
    return:
      type: System.Diagnostics.TraceListenerCollection
      description: "A <xref href=&quot;System.Diagnostics.TraceListenerCollection&quot;> </xref> típus gyűjteményét jelképezi, amely <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> figyelési nyomkövetési kimenetét."
  overload: System.Diagnostics.Trace.Listeners*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Refresh
  id: Refresh
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetési adatok frissítése."
  remarks: "Nyomkövetési konfigurációs adatok rögzítése az alkalmazás indításakor. Ha a konfigurációs adatokat az alkalmazás indítása után módosul, a frissítési metódushívás nyomkövetési konfigurációs adatok frissítéséhez."
  syntax:
    content: public static void Refresh ();
    parameters: []
  overload: System.Diagnostics.Trace.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String)
  id: TraceError(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Egy hibaüzenetet ír a nyomkövetésfigyelők a a <xref:System.Diagnostics.Trace.Listeners*>adatgyűjtést, a megadott üzenet.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceError hívások a `TraceEvent` minden nyomkövetési figyelő, a nyomkövetési esemény típusú módszer <xref:System.Diagnostics.TraceEventType>, átadja a tájékoztató üzenet üzenet karakterláncként kell beállítani.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceError (string message);
    parameters:
    - id: message
      type: System.String
      description: "A írási tájékoztató üzenet."
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  id: TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Egy hibaüzenetet ír a nyomkövetésfigyelők a a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény az objektumok megadott köréről és formázást.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceError hívások a `TraceEvent` a nyomkövetési esemény típusú nyomkövetésfigyelők metódusokon <xref:System.Diagnostics.TraceEventType>, az üzenet tartalma és a formázási információkat objektum tömbként átadásakor.</xref:System.Diagnostics.TraceEventType> Tekintse meg a <xref:System.String.Format%2A>módszerrel kapcsolatos további információk a `format` és `args` paraméterek.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceError (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "A formázó karakterlánc, amely nulla vagy több formátum olyan elemeket tartalmaz, amelyek megfelelnek az objektumok a `args` tömb."
    - id: args
      type: System.Object[]
      description: "Egy <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> formázásához nulla vagy több objektumot tartalmazó tömb."
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  id: TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők, a tájékoztató üzenet ír a <xref:System.Diagnostics.Trace.Listeners*>adatgyűjtést, a megadott üzenet.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceInformation hívások a `TraceEvent` minden nyomkövetési figyelő, a nyomkövetési esemény típusú módszer <xref:System.Diagnostics.TraceEventType>, átadja a tájékoztató üzenet üzenet karakterláncként kell beállítani.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceInformation (string message);
    parameters:
    - id: message
      type: System.String
      description: "A írási tájékoztató üzenet."
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  id: TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők, a tájékoztató üzenet ír a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény az objektumok megadott köréről és formázást.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceInformation hívások a `TraceEvent` a nyomkövetési esemény típusú nyomkövetésfigyelők metódusokon <xref:System.Diagnostics.TraceEventType>, az üzenet tartalma és a formázási információkat objektum tömbként átadásakor.</xref:System.Diagnostics.TraceEventType> Tekintse meg a <xref:System.String.Format%2A>módszerrel kapcsolatos további információk a `format` és `args` paraméterek.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceInformation (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "A formázó karakterlánc, amely nulla vagy több formátum olyan elemeket tartalmaz, amelyek megfelelnek az objektumok a `args` tömb."
    - id: args
      type: System.Object[]
      description: "Egy <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> formázásához nulla vagy több objektumot tartalmazó tömb."
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  id: TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők a figyelmeztető üzenetet ír a <xref:System.Diagnostics.Trace.Listeners*>adatgyűjtést, a megadott üzenet.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceWarning hívások a `TraceEvent` minden nyomkövetési figyelő, amelynek a nyomkövetést eseménytípust módszer <xref:System.Diagnostics.TraceEventType>, átadja a tájékoztató üzenet üzenet karakterláncként kell beállítani.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceWarning (string message);
    parameters:
    - id: message
      type: System.String
      description: "A írási tájékoztató üzenet."
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  id: TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők a figyelmeztető üzenetet ír a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény a megadott tömb objektumok használatával, és formázást.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceWarning hívások a `TraceEvent` a nyomkövetési esemény típusú nyomkövetésfigyelők metódusokon <xref:System.Diagnostics.TraceEventType>, az üzenet tartalma és a formázási információkat objektum tömbként átadásakor.</xref:System.Diagnostics.TraceEventType> Tekintse meg a <xref:System.String.Format%2A>módszerrel kapcsolatos további információk a `format` és `args` paraméterek.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceWarning (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "A formázó karakterlánc, amely nulla vagy több formátum olyan elemeket tartalmaz, amelyek megfelelnek az objektumok a `args` tömb."
    - id: args
      type: System.Object[]
      description: "Egy <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> formázásához nulla vagy több objektumot tartalmazó tömb."
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Unindent
  id: Unindent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Csökkenti az aktuális <xref:System.Diagnostics.Trace.IndentLevel*>egy.</xref:System.Diagnostics.Trace.IndentLevel*>"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_14_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_14_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_14_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static void Unindent ();
    parameters: []
  overload: System.Diagnostics.Trace.Unindent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.UseGlobalLock
  id: UseGlobalLock
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Lekérdezi vagy beállítja a érték azt jelzi, hogy van-e a globális lock használni."
  remarks: "A globális zárolási mindig akkor használatos, ha a nyomkövetés-figyelő nem szálbiztos, UseGlobalLock értékétől függetlenül. A <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>tulajdonság használható annak megállapítása, hogy a figyelő többszálú futtatásra.</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> A globális zárolást csak akkor, ha a UseGlobalLock értéke nem használatos `false` és értékének <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>van `true`.</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> Az alapértelmezett viselkedést, hogy a globális zárolási használja.       A UseGlobalLock beállításához <xref:System.Diagnostics.Trace>, szerkesztheti a konfigurációs fájl, amely megfelel az alkalmazás nevét is.</xref:System.Diagnostics.Trace> A konfigurációs fájl az alábbi példához hasonló formátumban kell lennie:```   <configuration>     <system.diagnostics>       <trace useGlobalLock=&quot;false&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool UseGlobalLock { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a globális zárolási használni; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.Trace.UseGlobalLock*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjtemény."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET webes igazított nyomkövetési funkció választékát kínálja. ASP.NET-lapok nyomkövetési üzenetet írni, használja a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Alapértelmezés szerint a kódban az ASP.NET weblap, az utasítás társított `Trace.Write(&quot;...&quot;)` a hívás a <xref:System.Web.TraceContext.Write%2A>metódusában a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Használatához a <xref:System.Diagnostics.Trace?displayProperty=fullName>osztály a weblapok, meg kell adni a névteret, például `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the `value` parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_26_1.cpp)]\n [!code-vb[Classic Trace.Write1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_26_1.vb)]\n [!code-cs[Classic Trace.Write1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_26_1.cs)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők az üzenetet ír a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET webes igazított nyomkövetési funkció választékát kínálja. ASP.NET-lapok nyomkövetési üzenetet írni, használja a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Alapértelmezés szerint a kódban az ASP.NET weblap, az utasítás társított `Trace.Write(&quot;...&quot;)` a hívás a <xref:System.Web.TraceContext.Write%2A>metódusában a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Használatához a <xref:System.Diagnostics.Trace?displayProperty=fullName>osztály a weblapok, meg kell adni a névteret, például `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_12_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_12_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_12_1.vb)]"
  syntax:
    content: public static void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjtemény."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET webes igazított nyomkövetési funkció választékát kínálja. ASP.NET-lapok nyomkövetési üzenetet írni, használja a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Alapértelmezés szerint a kódban az ASP.NET weblap, az utasítás társított `Trace.Write(&quot;...&quot;)` a hívás a <xref:System.Web.TraceContext.Write%2A>metódusában a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Használatához a <xref:System.Diagnostics.Trace?displayProperty=fullName>osztály a weblapok, meg kell adni a névteret, például `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_16_1.cpp)]\n [!code-cs[Classic Trace.Write3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_16_1.cs)]\n [!code-vb[Classic Trace.Write3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_16_1.vb)]"
  syntax:
    content: public static void Write (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "Egy <xref:System.Object>nevet a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Folyamatkategória-név és egy üzenetet ír a nyomkövetésfigyelők a a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET webes igazított nyomkövetési funkció választékát kínálja. ASP.NET-lapok nyomkövetési üzenetet írni, használja a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Alapértelmezés szerint a kódban az ASP.NET weblap, az utasítás társított `Trace.Write(&quot;...&quot;)` a hívás a <xref:System.Web.TraceContext.Write%2A>metódusában a <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>tulajdonság.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Használatához a <xref:System.Diagnostics.Trace?displayProperty=fullName>osztály a weblapok, meg kell adni a névteret, például `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_4_1.cpp)]\n [!code-vb[Classic Trace.Write2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_4_1.vb)]\n [!code-cs[Classic Trace.Write2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_4_1.cs)]"
  syntax:
    content: public static void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  id: WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_2_1.cpp)]\n [!code-vb[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_2_1.vb)]\n [!code-cs[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_2_1.cs)]"
  syntax:
    content: public static void WriteIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  id: WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők a üzenetet ír a <xref:System.Diagnostics.Trace.Listeners*>gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_10_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_10_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_10_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  id: WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_8_1.cs)]\n [!code-vb[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_8_1.vb)]\n [!code-cpp[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_8_1.cpp)]"
  syntax:
    content: public static void WriteIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  id: WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és üzenetet ír a nyomkövetésfigyelők a a <xref:System.Diagnostics.Trace.Listeners*>gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.Write%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_7_1.cs)]\n [!code-cpp[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_7_1.cpp)]\n [!code-vb[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_7_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjtemény."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_18_1.cpp)]\n [!code-cs[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_18_1.cs)]\n [!code-vb[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_18_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők az üzenetet ír a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_3_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_3_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_3_1.vb)]"
  syntax:
    content: public static void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjtemény."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_19_1.cpp)]\n [!code-vb[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_19_1.vb)]\n [!code-cs[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_19_1.cs)]"
  syntax:
    content: public static void WriteLine (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és üzenetet ír a nyomkövetésfigyelők a a <xref:System.Diagnostics.Trace.Listeners*>gyűjtemény.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_25_1.cpp)]\n [!code-vb[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_25_1.vb)]\n [!code-cs[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_25_1.cs)]"
  syntax:
    content: public static void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  id: WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_5_1.cpp)]\n [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_5_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_5_1.cs)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  id: WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A nyomkövetésfigyelők a üzenetet ír a <xref:System.Diagnostics.Trace.Listeners*>gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_11_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_11_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_11_1.vb)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  id: WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és az objektum értékének ír <> </> *> a nyomkövetésfigyelők a metódust a <> </> *> gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/csharp/96a954ed-2f0b-4ec7-91f9-_1.cs)]\n [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/visualbasic/96a954ed-2f0b-4ec7-91f9-_1.vb)]\n [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/cpp/96a954ed-2f0b-4ec7-91f9-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Egy, <xref:System.Object>amelynek a nevét a rendszer elküldi a <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  id: WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "A kategória neve és üzenetet ír a nyomkövetésfigyelők a a <xref:System.Diagnostics.Trace.Listeners*>gyűjteményt, ha egy feltétel <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Alapértelmezés szerint a kimeneti beíródik <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> példánya       A `category` paramétert a kimeneti üzenetek csoportosításához használható.       Ez a metódus meghívja a <xref:System.Diagnostics.TraceListener.WriteLine%2A>a nyomkövetés-figyelő metódusában.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/visualbasic/7f54460b-5f74-4be1-a3dd-_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/csharp/7f54460b-5f74-4be1-a3dd-_1.cs)]\n [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/cpp/7f54460b-5f74-4be1-a3dd-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>egy üzenet írandó; okoz Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Egy üzenetet írni."
    - id: category
      type: System.String
      description: "A kimeneti szervezésére szolgáló kategórianevet."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
- uid: System.Diagnostics.Trace.AutoFlush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
- uid: System.Diagnostics.Trace.CorrelationManager
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
- uid: System.Diagnostics.CorrelationManager
  parent: System.Diagnostics
  isExternal: false
  name: CorrelationManager
  nameWithType: CorrelationManager
  fullName: System.Diagnostics.CorrelationManager
- uid: System.Diagnostics.Trace.Fail(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
- uid: System.Diagnostics.Trace.Flush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
- uid: System.Diagnostics.Trace.Indent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
- uid: System.Diagnostics.Trace.IndentLevel
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Trace.IndentSize
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
- uid: System.Diagnostics.TraceListenerCollection
  parent: System.Diagnostics
  isExternal: false
  name: TraceListenerCollection
  nameWithType: TraceListenerCollection
  fullName: System.Diagnostics.TraceListenerCollection
- uid: System.Diagnostics.Trace.Refresh
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
- uid: System.Diagnostics.Trace.TraceError(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
- uid: System.Diagnostics.Trace.Unindent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
- uid: System.Diagnostics.Trace.UseGlobalLock
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
- uid: System.Diagnostics.Trace.Write(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.Assert*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert
  nameWithType: Trace.Assert
- uid: System.Diagnostics.Trace.AutoFlush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close
  nameWithType: Trace.Close
- uid: System.Diagnostics.Trace.CorrelationManager*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
- uid: System.Diagnostics.Trace.Fail*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail
  nameWithType: Trace.Fail
- uid: System.Diagnostics.Trace.Flush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush
  nameWithType: Trace.Flush
- uid: System.Diagnostics.Trace.Indent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent
  nameWithType: Trace.Indent
- uid: System.Diagnostics.Trace.IndentLevel*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
- uid: System.Diagnostics.Trace.IndentSize*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
- uid: System.Diagnostics.Trace.Refresh*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh
  nameWithType: Trace.Refresh
- uid: System.Diagnostics.Trace.TraceError*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError
  nameWithType: Trace.TraceError
- uid: System.Diagnostics.Trace.TraceInformation*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation
  nameWithType: Trace.TraceInformation
- uid: System.Diagnostics.Trace.TraceWarning*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning
  nameWithType: Trace.TraceWarning
- uid: System.Diagnostics.Trace.Unindent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent
  nameWithType: Trace.Unindent
- uid: System.Diagnostics.Trace.UseGlobalLock*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write
  nameWithType: Trace.Write
- uid: System.Diagnostics.Trace.WriteIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf
  nameWithType: Trace.WriteIf
- uid: System.Diagnostics.Trace.WriteLine*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine
  nameWithType: Trace.WriteLine
- uid: System.Diagnostics.Trace.WriteLineIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf
  nameWithType: Trace.WriteLineIf
