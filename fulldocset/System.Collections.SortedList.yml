### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "A kulcs/érték párok, a kulcsok alapján vannak rendezve, és elérhető-e gombot, és az index szerinti gyűjteményét képviseli."
  remarks: "Ez a gyűjtemény általános verzióját lásd: <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       A kulcs, például egy elem sem hozzáfér egy SortedList elem <xref:System.Collections.IDictionary>végrehajtása, vagy induló indexével, például egy elem sem <xref:System.Collections.IList>végrehajtása.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       Egy SortedList objektumot belsőleg kezeli a lista; az elemek tárolására két tömb Ez azt jelenti, hogy egy tömb a kulcsok és a hozzájuk társított értékeket egy másik tömb. Minden eleme egy kulcs/érték pár, amelyek férhetnek hozzá a <xref:System.Collections.DictionaryEntry>objektum.</xref:System.Collections.DictionaryEntry> A kulcs nem lehet `null`, de érték lehet.       Egy SortedList objektumot kapacitása a SortedList tárolására képes elemek száma. Elemek hozzáadása a egy SortedList, automatikusan nagyobb-e a kapacitás szükség szerint keresztül foglalásainak módosítása. A kapacitás csökkenthetők meghívásával <xref:System.Collections.SortedList.TrimToSize%2A>, illetve a <xref:System.Collections.SortedList.Capacity%2A>tulajdonság explicit módon.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       A nagyon nagy SortedList objektumot is növelheti a maximális 2 milliárd elemek egy 64 bites rendszeren úgy, hogy a `enabled` attribútumot a konfigurációs elem `true` a futásidejű környezetben.       Egy SortedList objektumot elemei a kulcsok vannak rendezve vagy egy adott megfelelően <xref:System.Collections.IComparer>megvalósítása a SortedList létrehozásakor, illetve a következők szerint megadva a <xref:System.IComparable>végrehajtása biztosítja a kulcsokat.</xref:System.IComparable> </xref:System.Collections.IComparer> Mindkét esetben egy SortedList nem teszi lehetővé ismétlődő kulcsok.       Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elemet ad hozzá, a helyes sorrendben történő SortedList csatlakoztatva van, és ennek megfelelően az indexelő módosíthatja. Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét előfordulhat, hogy módosítható, mert elemek hozzáadásakor vagy eltávolításakor a SortedList objektumból.       Egy SortedList objektumot műveletek lassabb, mint a műveletek általában egy <xref:System.Collections.Hashtable>objektum miatt a rendezést.</xref:System.Collections.Hashtable> Azonban a SortedList nagyobb rugalmasságot biztosít, engedélyezi a hozzáférést a értékekre, a hozzájuk tartozó kulcsokat vagy az indexek keresztül.       A gyűjtemény elemszámának segítségével férhetők el az egész szám típusú index.  A gyűjtemény indexek nulla alapú.       A `foreach` utasítás a C# nyelv (`for each` a Visual Basic nyelvben) a gyűjtemény elemeinek típusú objektum beolvasása. Mivel egyes elemeinek a SortedList objektumot egy kulcs/érték pár, az elem típusa nincs a kulcs vagy érték típusú. Ehelyett a elemtípusa <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Például: [!code-cpp [klasszikus SortedList&#2;. példa](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[klasszikus SortedList&#2;. példa](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[klasszikus SortedList&#2;. példa](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] a `foreach` az enumeráló modulja, amely lehetővé teszi a, nem írása, a gyűjtemény csak olvasásakor csomagolásának utasítás.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> osztály, amely üres, az alapértelmezett kezdeti kapacitása, és a következők szerint van rendezve a <xref:System.IComparable>minden hozzáadott kulccsal által megvalósított illesztőfelület a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.IComparable>"
  remarks: "Meg kell valósítania az egyes kulcsok a <xref:System.IComparable>interface lévő minden egyéb kulccsal rendelkező összehasonlítást képes a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.IComparable> Az elemek rendezi a rendszer <xref:System.IComparable>minden hozzáadott a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> kulccsal végrehajtásának</xref:System.IComparable> megfelelően       A kapacitása egy <xref:System.Collections.SortedList>objektum az elemek száma, amelyek a <xref:System.Collections.SortedList>tárolására képes.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Az elemek hozzáadása egy <xref:System.Collections.SortedList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.SortedList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi számos elemek hozzáadása során átméretezési műveletek végrehajtásához a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a konstruktor O(1) során."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> osztály, amely üres, az alapértelmezett kezdeti kapacitása, és van rendezve szerint a megadott <xref:System.Collections.IComparer>felületet.</xref:System.Collections.IComparer>"
  remarks: "Rendezi a rendszer az elemek a megadott megfelelően <xref:System.Collections.IComparer>végrehajtása.</xref:System.Collections.IComparer> Ha a `comparer` paraméter `null`, a <xref:System.IComparable>Minden kulcs végrehajtására szolgál; Emiatt minden kulcsot meg kell valósítania a <xref:System.IComparable>interface lévő minden egyéb kulccsal rendelkező összehasonlítást képes a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A kapacitása egy <xref:System.Collections.SortedList>objektum az elemek száma, amelyek a <xref:System.Collections.SortedList>tárolására képes.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Az elemek hozzáadása egy <xref:System.Collections.SortedList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.SortedList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi számos elemek hozzáadása során átméretezési műveletek végrehajtásához a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a konstruktor O(1) során."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>megvalósítását, hogy használja a kulcsok összehasonlításakor.</xref:System.Collections.IComparer>       – vagy – <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> használata a <xref:System.IComparable>Minden kulcs végrehajtásának.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> osztály, amely a megadott szótár átmásolva elemeket tartalmaz a ugyanazon kezdeti kapacitása a másolt elemek számának és a következők szerint van rendezve a <xref:System.IComparable>Minden kulcs által megvalósított illesztőfelület.</xref:System.IComparable>"
  remarks: "Meg kell valósítania az egyes kulcsok a <xref:System.IComparable>interface lévő minden egyéb kulccsal rendelkező összehasonlítást képes a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.IComparable> Az elemek rendezi a rendszer <xref:System.IComparable>minden hozzáadott a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> kulccsal végrehajtásának</xref:System.IComparable> megfelelően       A <xref:System.Collections.Hashtable>objektum egyik példája egy <xref:System.Collections.IDictionary>végrehajtását, amelyek átadhatók konstruktornak.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Az új <xref:System.Collections.SortedList>objektum tartalmazza a kulcsok és értékek a <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> tárolva</xref:System.Collections.SortedList>       A kapacitása egy <xref:System.Collections.SortedList>objektum az elemek száma, amelyek a <xref:System.Collections.SortedList>tárolására képes.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Az elemek hozzáadása egy <xref:System.Collections.SortedList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.SortedList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi számos elemek hozzáadása során átméretezési műveletek végrehajtásához a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a konstruktor egy O (`n`) műveletet, ahol `n` lévő elemek száma `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "A <xref:System.Collections.IDictionary>megvalósítását, hogy egy új másolása <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Egy vagy több eleme <code> d </code> nem valósítja meg a <xref:System.IComparable>felületet.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> osztály, amely üres, a megadott kezdeti kapacitása, és a következők szerint van rendezve a <xref:System.IComparable>minden hozzáadott kulccsal által megvalósított illesztőfelület a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.IComparable>"
  remarks: "Meg kell valósítania az egyes kulcsok a <xref:System.IComparable>interface lévő minden egyéb kulccsal rendelkező összehasonlítást képes a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.IComparable> Az elemek rendezi a rendszer <xref:System.IComparable>minden hozzáadott a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> kulccsal végrehajtásának</xref:System.IComparable> megfelelően       A kapacitása egy <xref:System.Collections.SortedList>objektum az elemek száma, amelyek a <xref:System.Collections.SortedList>tárolására képes.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Az elemek hozzáadása egy <xref:System.Collections.SortedList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.SortedList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi számos elemek hozzáadása során átméretezési műveletek végrehajtásához a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a konstruktor egy O (`n`) műveletet, ahol `n` van `initialCapacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "A kezdeti elemek száma, amelyek a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektumot tartalmazhat."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>kisebb, mint nulla."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elég szabad memória a hozzon létre egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> és a megadott objektum <code> initialCapacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> osztály, amely üres, a megadott kezdeti kapacitása, és van rendezve szerint a megadott <xref:System.Collections.IComparer>felületet.</xref:System.Collections.IComparer>"
  remarks: "Rendezi a rendszer az elemek a megadott megfelelően <xref:System.Collections.IComparer>végrehajtása.</xref:System.Collections.IComparer> Ha a `comparer` paraméter `null`, a <xref:System.IComparable>Minden kulcs végrehajtására szolgál; Emiatt minden kulcsot meg kell valósítania a <xref:System.IComparable>interface lévő minden egyéb kulccsal rendelkező összehasonlítást képes a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A kapacitása egy <xref:System.Collections.SortedList>objektum az elemek száma, amelyek a <xref:System.Collections.SortedList>tárolására képes.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Az elemek hozzáadása egy <xref:System.Collections.SortedList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.SortedList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi számos elemek hozzáadása során átméretezési műveletek végrehajtásához a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a konstruktor egy O (`n`) műveletet, ahol `n` van `capacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>megvalósítását, hogy használja a kulcsok összehasonlításakor.</xref:System.Collections.IComparer>       – vagy – <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> használata a <xref:System.IComparable>Minden kulcs végrehajtásának.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "A kezdeti elemek száma, amelyek a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektumot tartalmazhat."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>kisebb, mint nulla."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elég szabad memória a hozzon létre egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> és a megadott objektum <code> capacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> osztály, amely a megadott szótár átmásolva elemeket tartalmaz a azonos kezdeti kapacitása a másolt elemek számának, és van rendezve szerint a megadott <xref:System.Collections.IComparer>felületet.</xref:System.Collections.IComparer>"
  remarks: "Rendezi a rendszer az elemek a megadott megfelelően <xref:System.Collections.IComparer>végrehajtása.</xref:System.Collections.IComparer> Ha a `comparer` paraméter `null`, a <xref:System.IComparable>Minden kulcs végrehajtására szolgál; Emiatt minden kulcsot meg kell valósítania a <xref:System.IComparable>interface lévő minden egyéb kulccsal rendelkező összehasonlítást képes a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A <xref:System.Collections.Hashtable>objektum egyik példája egy <xref:System.Collections.IDictionary>végrehajtását, amelyek átadhatók konstruktornak.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Az új <xref:System.Collections.SortedList>objektum tartalmazza a kulcsok és értékek a <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> tárolva</xref:System.Collections.SortedList>       A kapacitása egy <xref:System.Collections.SortedList>objektum az elemek száma, amelyek a <xref:System.Collections.SortedList>tárolására képes.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Az elemek hozzáadása egy <xref:System.Collections.SortedList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.SortedList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi számos elemek hozzáadása során átméretezési műveletek végrehajtásához a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a konstruktor egy O (`n`) műveletet, ahol `n` lévő elemek száma `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "A <xref:System.Collections.IDictionary>megvalósítását, hogy egy új másolása <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>megvalósítását, hogy használja a kulcsok összehasonlításakor.</xref:System.Collections.IComparer>       – vagy – <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> használata a <xref:System.IComparable>Minden kulcs végrehajtásának.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, és egy vagy több eleme <code>d</code> nem valósítja meg a <xref:System.IComparable> felületet."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hozzáadja a megadott kulcs és az érték egy elem egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A kurzor határozza meg a összehasonlító kiválasztva, vagy explicit módon, vagy alapértelmezés szerint amikor a <xref:System.Collections.SortedList>objektumot létrehozták.</xref:System.Collections.SortedList>       Ha <xref:System.Collections.SortedList.Count%2A>már megegyezik <xref:System.Collections.SortedList.Capacity%2A>, a kapacitása a <xref:System.Collections.SortedList>objektum automatikusan újra-hozzárendelése a belső tömbnek növekszik, és a meglévő elemeket történő átmásolása az új tömb az új elem hozzáadása előtt.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       Használhatja a <xref:System.Collections.SortedList.Item%2A>tulajdonság új elemek hozzáadásához úgy, hogy a kulcs értékét, amely nem szerepel a <xref:System.Collections.SortedList>objektum (például `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> Azonban ha a megadott kulcs már létezik a <xref:System.Collections.SortedList>beállításánál a <xref:System.Collections.SortedList.Item%2A>tulajdonság felülírja a régi értéket.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> Az Add metódus ellentétben nem módosítja a meglévő elemeket.       Elemei egy <xref:System.Collections.SortedList>objektum a kulcsok vannak rendezve vagy egy adott megfelelően <xref:System.Collections.IComparer>végrehajtása megadott, amikor a <xref:System.Collections.SortedList>létrehozott vagy függően, hogy a <xref:System.IComparable>a kulcsok által biztosított végrehajtása.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       A kulcs nem lehet `null`, de érték lehet.       Ez a módszer egy O (`n`) műveletet a nem rendezett adatok, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> O (napló `n`) műveletet, ha az új elem a lista végére kerül. Ha beszúrási egy átméretezési okoz,-e a művelet O (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "Adja hozzá az elem kulcsa."
    - id: value
      type: System.Object
      description: "Az elem hozzáadása a értékét. Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A megadott elem <code> key </code> már szerepel a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.       – vagy – a <xref href=&quot;System.Collections.SortedList&quot;> </xref> használatára van beállítva a <xref:System.IComparable>felületet, és <code> key </code> nem valósítja meg a <xref:System.IComparable>felületet.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.SortedList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.SortedList&quot;> </xref> rögzített méretű rendelkezik."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elegendő elérhető memória az elem hozzáadása a <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A összehasonlító kivételt okozott."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi vagy beállítja a kapacitása egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Kapacitása elemek száma, amelyek a <xref:System.Collections.SortedList>objektum tárolhatja.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>elemek, amelyek ténylegesen az <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> száma</xref:System.Collections.SortedList.Count%2A>       Kapacitása mindig nagyobb vagy egyenlő a <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Ha <xref:System.Collections.SortedList.Count%2A>meghaladja a kapacitását elem hozzáadása közben, a kapacitás automatikusan növekszik a belső tömbnek újra-hozzárendelése előtt másolja a régi és az új elemekkel.</xref:System.Collections.SortedList.Count%2A>       A kapacitás csökkenthetők meghívásával <xref:System.Collections.SortedList.TrimToSize%2A>vagy explicit módon a kapacitás tulajdonság beállításával.</xref:System.Collections.SortedList.TrimToSize%2A> A kapacitás értéke explicit módon, ha a belső tömbnek is a megadott kapacitás alkalmazásához újra felhasználni.       Ez a tulajdonság értékének beolvasása során O(1); O a következő tulajdonság beállítása (`n`) műveletet, ahol `n` új kapacitás."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Az elemek száma, amelyek a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektumot tartalmazhat."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A hozzárendelt érték kevesebb lévő elemek száma a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elég memória érhető el a rendszer."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Eltávolítja az összes elem egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "<xref:System.Collections.SortedList.Count%2A>nullára van állítva, és a gyűjtemény elemeinek más objektumokra mutató hivatkozásokat is kiadásakor.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>változatlan marad.</xref:System.Collections.SortedList.Capacity%2A> Alaphelyzetbe állítja a kapacitása a <xref:System.Collections.SortedList>objektumazonosító, hívja <xref:System.Collections.SortedList.TrimToSize%2A>, vagy állítsa be a <xref:System.Collections.SortedList.Capacity%2A>közvetlenül tulajdonság.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> Egy üres díszítésre <xref:System.Collections.SortedList>kapacitásának beállítja a <xref:System.Collections.SortedList>alapértelmezett kapacitással.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum csak olvasható.       – vagy – a <xref href=&quot;System.Collections.SortedList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sekély másolatot készít egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Egy gyűjtemény sekély másolatát másolja át a gyűjtemény csak azokat az elemeket,-e a referencia típusoknak, vagy értéket meg kell adnia, de nem másolja át az objektumokat, amely hivatkozik a hivatkozásokat. Az új gyűjtemény elemben található hivatkozások az azonos objektumok, amelyek az eredeti gyűjtemény elemben található hivatkozások mutasson.       Ezzel szemben egy gyűjtemény mély másolatát másolja át az elemeket, és minden közvetlenül vagy közvetetten hivatkozik az elemeket.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Sekély másolatát a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Meghatározza, hogy egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum tartalmaz egy adott kulcs."
  remarks: "Elemei egy <xref:System.Collections.SortedList>objektum a kulcsok vannak rendezve vagy egy adott megfelelően <xref:System.Collections.IComparer>végrehajtása megadott, amikor a <xref:System.Collections.SortedList>létrehozott vagy függően, hogy a <xref:System.IComparable>a kulcsok által biztosított végrehajtása.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Megvalósítja <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> tartalmaz Hasonlóan viselkednek, mint a <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A> pontosan       Ezt a módszert használja egy bináris keresési algoritmus; Ez a módszer ezért O (napló `n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A kulcsot, keresse meg a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum a megadott rendelkező elemet tartalmaz <code> key </code>; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A összehasonlító kivételt okozott."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Meghatározza, hogy egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum tartalmaz egy adott kulcs."
  remarks: "Elemei egy <xref:System.Collections.SortedList>objektum a kulcsok vannak rendezve vagy egy adott megfelelően <xref:System.Collections.IComparer>végrehajtása megadott, amikor a <xref:System.Collections.SortedList>létrehozott vagy függően, hogy a <xref:System.IComparable>a kulcsok által biztosított végrehajtása.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Ez a módszer pontosan a viselkedik a <xref:System.Collections.SortedList.Contains%2A>metódus.</xref:System.Collections.SortedList.Contains%2A>       Ezt a módszert használja egy bináris keresési algoritmus; Ez a módszer ezért O (napló `n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A kulcsot, keresse meg a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum a megadott rendelkező elemet tartalmaz <code> key </code>; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A összehasonlító kivételt okozott."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Meghatározza, hogy egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum tartalmaz egy adott értéket."
  remarks: "A elemeinek értékei a <xref:System.Collections.SortedList>objektum a megadott értékkel történő összehasonlítja a <xref:System.Object.Equals%2A>metódus.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Ez a módszer egy lineáris keresést; hajt végre. az átlagos végrehajtási idő ezért <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> arányos Ez azt jelenti, hogy ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Keresse meg az értéket a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum. Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum a megadott rendelkező elemet tartalmaz <code> value </code>; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Másolatot <xref href=&quot;System.Collections.SortedList&quot;> </xref> elemek egy egydimenziós <xref:System.Array>objektum, a tömb a megadott indextől kezdődő.</xref:System.Array>"
  remarks: "A kulcs/érték párok kerülnek a <xref:System.Array>objektum ugyanabban a sorrendben, amelyben a számbavevő telepítéseket a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.Array>       Csak a kulcsok másolása a <xref:System.Collections.SortedList>, használjon `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       A csak azok az értékek másolásához a <xref:System.Collections.SortedList>, használjon `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Az egydimenziós <xref:System.Array>objektum, amely az a hely a <xref:System.Collections.DictionaryEntry>átmásolva objektumok <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> A <xref:System.Array>kell rendelkeznie a nulla alapú indexelést.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "A nulla alapú indexét `array` mely másolása megkezdődik."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>kisebb, mint nulla."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>többdimenziós.       – vagy – a forrás elemeinek száma <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum érték nagyobb, mint a rendelkezésre álló terület <code>arrayIndex</code> a cél végére <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref href=&quot;System.Collections.SortedList&quot;> </xref> nem konvertálható automatikusan a cél típusa <code> array </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi a levő elemek száma a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Minden eleme egy kulcs/érték pár, amelyek férhetnek hozzá a <xref:System.Collections.DictionaryEntry>objektum.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>azon elemek száma, amelyek a <xref:System.Collections.SortedList>objektum tárolhatja.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Leképezésszáma, amelyek ténylegesen az <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> elemeinek száma       <xref:System.Collections.SortedList.Capacity%2A>nagyobb vagy egyenlő számnak mindig.</xref:System.Collections.SortedList.Capacity%2A> Ha a számláló értéke meghaladja a <xref:System.Collections.SortedList.Capacity%2A>elemek való hozzáadása közben a kapacitás automatikusan növekszik a belső tömbnek újra-hozzárendelése előtt másolja a régi és az új elemekkel.</xref:System.Collections.SortedList.Capacity%2A>       Ez a tulajdonság értékének beolvasása során O(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Levő elemek száma a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi az értéket a megadott indexű egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elem ad hozzá, akkor bekerülnek <xref:System.Collections.SortedList>a megfelelő rendezési sorrendjét és az indexelő ennek megfelelően módosíthatja.</xref:System.Collections.SortedList> Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét változhatnak, elemek hozzáadásakor vagy eltávolításakor a a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "A beolvasandó érték nulla alapú indexét."
    return:
      type: System.Object
      description: "A megadott index az értékét a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref:System.Collections.IDictionaryEnumerator>objektum, amely telepítéseket egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "A `foreach` utasítás a C# nyelv (`for each` a Visual Basic nyelvben) elrejti a enumerálók összetettsége.  Ezért használatával `foreach` ajánlott, az adatbázis közvetlen módosítása az enumerátor helyett.       Enumerálók beolvasni az adatokat a gyűjtemény használható, de nem használható az alapul szolgáló gyűjtemény módosításához.       Kezdetben a számbavevő a gyűjtemény első eleme elé. <xref:System.Collections.IEnumerator.Reset%2A>is jelent a számbavevő vissza az ebben a helyzetben.</xref:System.Collections.IEnumerator.Reset%2A>  Ennél a pozíciónál <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> Ezért meg kell hívnia <xref:System.Collections.IEnumerator.MoveNext%2A>ahhoz, hogy a számbavevő a <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> értékének olvasása előtt a gyűjtemény első eleme</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>az azonos objektumot ad vissza, amíg újra nem indítják <xref:System.Collections.IEnumerator.MoveNext%2A>vagy <xref:System.Collections.IEnumerator.Reset%2A>nevezik.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Beállítja a <xref:System.Collections.IEnumerator.Current%2A>átállítása.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Ha <xref:System.Collections.IEnumerator.MoveNext%2A>gyűjteményének, a számbavevő a gyűjtemény utolsó eleme mögé van elhelyezve fázisok és <xref:System.Collections.IEnumerator.MoveNext%2A>adja vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> A számbavevő ezen a helyen, az ezt követő hívások esetén <xref:System.Collections.IEnumerator.MoveNext%2A>is vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Ha az utolsó irányuló hívás <xref:System.Collections.IEnumerator.MoveNext%2A>visszaadott `false`, <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>Ebben az esetben a gyűjtemény első eleme a hívása <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> követ</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> beállítása       Enumerátor érvényes marad mindaddig, amíg a gyűjtemény változatlan marad. Ha módosítják a gyűjteményhez, hozzáadása, módosítása vagy törlése elemek, például a számbavevő visszavonhatatlanul érvénytelenített és annak viselkedését nincs definiálva.       A számbavevő nem rendelkezik kizárólagos hozzáférése a gyűjteményhez; egy gyűjtemény számbavétele ezért alapvetően nem szálbiztos verziójának eljárást.  Szál biztonsági felsorolásakor biztosításához zárolhatja a teljes számbavételi művelet során a gyűjteményben.  A gyűjteményt, amelyben több szál olvasására vagy írására érhető el, hogy meg kell valósítani a saját szinkronizálási.       Ez a módszer O(1) során."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Egy <xref:System.Collections.IDictionaryEnumerator>esetében a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A kulcs lekérdezi a megadott indexű egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elem ad hozzá, akkor bekerülnek <xref:System.Collections.SortedList>a megfelelő rendezési sorrendjét és az indexelő ennek megfelelően módosíthatja.</xref:System.Collections.SortedList> Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét változhatnak, elemek hozzáadásakor vagy eltávolításakor a a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "A kulcs eléréséhez nulla alapú indexét."
    return:
      type: System.Object
      description: "A megadott indexpozíciónál a kulcs a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A kulcsok beolvasása a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A visszaadott <xref:System.Collections.IList>célja a kulcsok a csak olvasható nézetét a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Az alapul szolgáló <xref:System.Collections.SortedList>azonnal megjelennek a <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList> végrehajtott módosítások       A visszaadott <xref:System.Collections.IList>rendezi a rendszer a kulcsokat a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> ugyanabban a sorrendben</xref:System.Collections.IList> elemei       Ez a módszer hasonlít a <xref:System.Collections.SortedList.Keys%2A>tulajdonságot, de értéket ad vissza egy <xref:System.Collections.IList>objektum helyett egy <xref:System.Collections.ICollection>objektum.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Egy <xref:System.Collections.IList>a kulcsokat a tartalmazó objektum a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Az értékek beolvasása a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A visszaadott <xref:System.Collections.IList>célja egy csak olvasható nézetű értékének a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Az alapul szolgáló <xref:System.Collections.SortedList>azonnal megjelennek a <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList> végrehajtott módosítások       Az elemek, a visszaadott <xref:System.Collections.IList>a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> értékei ugyanabban a sorrendben rendezve</xref:System.Collections.IList>       Ez a módszer hasonlít a <xref:System.Collections.SortedList.Values%2A>tulajdonságot, de értéket ad vissza egy <xref:System.Collections.IList>objektum helyett egy <xref:System.Collections.ICollection>objektum.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Egy <xref:System.Collections.IList>az értékeket tartalmazó objektum a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott kulcs, a nulla alapú indexét adja vissza egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Elemei egy <xref:System.Collections.SortedList>objektum a kulcsok vannak rendezve vagy egy adott megfelelően <xref:System.Collections.IComparer>végrehajtása megadott, amikor a <xref:System.Collections.SortedList>létrehozott vagy függően, hogy a <xref:System.IComparable>a kulcsok által biztosított végrehajtása.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elem ad hozzá, akkor bekerülnek <xref:System.Collections.SortedList>a megfelelő rendezési sorrendjét és az indexelő ennek megfelelően módosíthatja.</xref:System.Collections.SortedList> Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét változhatnak, elemek hozzáadásakor vagy eltávolításakor a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       Ezt a módszert használja egy bináris keresési algoritmus; Ez a módszer ezért O (napló `n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A kulcsot, keresse meg a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
    return:
      type: System.Int32
      description: "A nulla alapú indexét a <code> key </code> paramétert, ha <code> key </code> megtalálható a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum; ellenkező esetben -1."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A összehasonlító kivételt okozott."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A első előfordulása a megadott érték nulla alapú indexét adja vissza egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elem ad hozzá, akkor bekerülnek <xref:System.Collections.SortedList>a megfelelő rendezési sorrendjét és az indexelő ennek megfelelően módosíthatja.</xref:System.Collections.SortedList> Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét változhatnak, elemek hozzáadásakor vagy eltávolításakor a a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       A elemeinek értékei a <xref:System.Collections.SortedList>a megadott érték használatával összehasonlítja a <xref:System.Object.Equals%2A>metódus.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Ezt a módszert használja egy lineáris keresést. Ez a módszer ezért O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Keresse meg az értéket a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum. Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "A első előfordulása nulla alapú indexét a <code> value </code> paramétert, ha <code> value </code> megtalálható a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum; ellenkező esetben -1."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektumnak egy rögzített méretű."
  remarks: "Rögzített méretű gyűjtemény nem teszi lehetővé hozzáadását és eltávolítását, az elem után a gyűjtemény létrejött, de lehetővé teszi, hogy a meglévő elemeket módosítása.       A gyűjtemény rögzített méretű egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a hozzáadása és eltávolítása elemek; Ezért ha módosítás történik az alapul szolgáló gyűjtemény, hozzáadását és eltávolítását, az elem, beleértve a rögzített méretű gyűjtemény tükrözi ezeket a módosításokat.       Ez a tulajdonság értékének beolvasása során O(1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum rendelkezik egy rögzített méretű; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum csak olvasható."
  remarks: "A csak olvasható gyűjtemény nem teszi lehetővé a hozzáadása, eltávolítása vagy módosítása az elem a gyűjtemény létrehozása után.       A gyűjtemény csak olvasható egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a módosítását a gyűjtemény; Ezért ha az alapul szolgáló gyűjtemény módosításai, a csak olvasható gyűjtemény tükrözi ezeket a módosításokat.       Ez a tulajdonság értékének beolvasása során O(1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum csak olvasható; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy érték, amely jelzi, hogy hozzáférést lekérdezi egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum szinkronizálása (többszálú futtatásra)."
  remarks: "A szál biztonságának szavatolása egy <xref:System.Collections.SortedList>objektum, a burkoló által visszaadott összes műveleteket kell elvégezni a <xref:System.Collections.SortedList.Synchronized%2A>metódus.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a hozzáférést a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum szinkronizálása (többszálú futtatásra); egyéb esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi vagy beállítja a rendelt érték, amely egy adott kulcs egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Az Item tulajdonság segítségével egy gyűjtemény adott eleme hozzáférni a következő szintaxist megadásával: `myCollection[key]`.       Új elem hozzáadása egy kulcsot, amely nem létezik a értékre állítja ezt a tulajdonságot is használhatja a <xref:System.Collections.SortedList>objektum (például `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> Azonban ha a megadott kulcs már létezik a <xref:System.Collections.SortedList>, a cikk tulajdonság beállítása felülírja a régi értéket.</xref:System.Collections.SortedList> Ezzel szemben a <xref:System.Collections.SortedList.Add%2A>metódus nem módosítja a meglévő elemeket.</xref:System.Collections.SortedList.Add%2A>       A kulcs nem lehet `null`, de érték lehet. Megkülönböztetésére `null` , amely ad vissza, mert a megadott kulcs nem található és `null` , amely ad vissza, mert a megadott kulcs értéke `null`, használja a <xref:System.Collections.SortedList.Contains%2A>metódust vagy a <xref:System.Collections.SortedList.ContainsKey%2A>módszer annak meghatározásához, hogy a kulcs létezik-e a listában.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       Elemei egy <xref:System.Collections.SortedList>a kulcsok alapján vannak rendezve vagy egy adott megfelelően <xref:System.Collections.IComparer>végrehajtása megadott, amikor a <xref:System.Collections.SortedList>létrehozott vagy függően, hogy a <xref:System.IComparable>megvalósítása a kulcsok által biztosított.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       A C# nyelv meghatározására az indexelők végrehajtási helyett a kulcsszó használ a <xref:System.Collections.SortedList.Keys%2A>tulajdonság.</xref:System.Collections.SortedList.Keys%2A> Visual Basic elem megvalósítja az alapértelmezett tulajdonság, amely indexelési ugyanezt a funkcionalitást biztosítja.       Ez a tulajdonság értékének egy O (napló `n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> O a következő tulajdonság beállítása (napló `n`) műveletet, ha a kulcs már szerepel a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> A kulcs nem szerepel a listában, a következő tulajdonság beállítása esetén az O (`n`) rendezett adatok, vagy O művelet (napló `n`) Ha az új elem a lista végére kerül. Ha beszúrási egy átméretezési okoz,-e a művelet O (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "Az érték lekérése vagy beállítása társított kulcs."
    return:
      type: System.Object
      description: "A rendelt érték, amely a <code> key </code> paramétere a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektumot, ha <code> key </code> talált; egyéb, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A tulajdonság értéke és az <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum csak olvasható.       – vagy – a tulajdonság értéke, <code> key </code> nem létezik a gyűjteményben, és a <xref href=&quot;System.Collections.SortedList&quot;> </xref> rögzített méretű rendelkezik."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elegendő elérhető memória az elem hozzáadása a <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A összehasonlító kivételt okozott."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A kulcsok beolvasása a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A <xref:System.Collections.ICollection>célja a kulcsok a csak olvasható nézetét a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Az alapul szolgáló <xref:System.Collections.SortedList>azonnal megjelennek a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList> végrehajtott módosítások       <xref:System.Collections.ICollection>Rendezi a rendszer a kulcsokat a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> ugyanabban a sorrendben</xref:System.Collections.ICollection> elemei       Ez a tulajdonság hasonlít a <xref:System.Collections.SortedList.GetKeyList%2A>metódust, de értéket ad vissza egy <xref:System.Collections.ICollection>objektum helyett egy <xref:System.Collections.IList>objektum.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       Ez a módszer O(1) során."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Egy <xref:System.Collections.ICollection>a kulcsokat a tartalmazó objektum a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Az elem eltávolítja a megadott kulccsal történő egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Ha a <xref:System.Collections.SortedList>objektum nem tartalmaz egy elemet a megadott kulccsal, a <xref:System.Collections.SortedList>változatlan marad.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Nincs kivétel történt.       A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Az eltávolítandó elem kulcsa."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum csak olvasható.       – vagy – a <xref href=&quot;System.Collections.SortedList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Eltávolítja a megadott indexpozíciójánál található elem a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elem ad hozzá, akkor bekerülnek <xref:System.Collections.SortedList>a megfelelő rendezési sorrendjét és az indexelő ennek megfelelően módosíthatja.</xref:System.Collections.SortedList> Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét változhatnak, elemek hozzáadásakor vagy eltávolításakor a a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Az eltávolítandó elem nulla alapú indexét."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.SortedList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.SortedList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A értéke az adott index a felváltja a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Az index feladatütemezési a rendezési sorrend alapján történik. Amikor egy elem ad hozzá, akkor bekerülnek <xref:System.Collections.SortedList>a megfelelő rendezési sorrendjét és az indexelő ennek megfelelően módosíthatja.</xref:System.Collections.SortedList> Elem eltávolítása után az indexelő is módosítja ennek megfelelően. Ezért egy adott kulcs/érték pár indexét változhatnak, elemek hozzáadásakor vagy eltávolításakor a a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét, amelyen menteni `value`."
    - id: value
      type: System.Object
      description: "A <xref:System.Object>menti azokat a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A szinkronizált (szálbiztos) burkolót adja vissza egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A szál biztonságának szavatolása egy <xref:System.Collections.SortedList>objektumot, minden műveleteket kell elvégezni a burkoló csak.</xref:System.Collections.SortedList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "A <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum szinkronizálásához."
    return:
      type: System.Collections.SortedList
      description: "A szinkronizált (szálbiztos) burkolót a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Olyan objektum, amely segítségével való hozzáférés szinkronizálása lekérdezi egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A szinkronizált verziót hoz létre a <xref:System.Collections.SortedList>objektumazonosító, használja a <xref:System.Collections.SortedList.Synchronized%2A>metódus.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> Hogy a származtatott osztályok, adja meg a saját szinkronizált verzióját a <xref:System.Collections.SortedList>a SyncRoot tulajdonság használatával.</xref:System.Collections.SortedList> A szinkronizálási kódot kell műveleteket a SyncRoot a <xref:System.Collections.SortedList>, nem közvetlenül a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> a</xref:System.Collections.SortedList> Ez biztosítja, hogy a gyűjtemények más objektumok származó megfelelő működését. Pontosabban, tart fenn a megfelelő szinkronizálási más szállal, amely előfordulhat, hogy egyidejűleg módosítása a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Olyan objektum, amely segítségével való hozzáférés szinkronizálása a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref:System.Collections.IEnumerator>keresztül, amely megismétli a <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[A Visual Basic, a C#]       A `foreach` utasítás a C# nyelv (`for each` a Visual Basic nyelvben) elrejti a enumerálók összetettsége.  Ezért használatával `foreach` ajánlott, az adatbázis közvetlen módosítása az enumerátor helyett.       Enumerálók beolvasni az adatokat a gyűjtemény használható, de nem használható az alapul szolgáló gyűjtemény módosításához.       Kezdetben a számbavevő a gyűjtemény első eleme elé. <xref:System.Collections.IEnumerator.Reset%2A>is jelent a számbavevő vissza az ebben a helyzetben.</xref:System.Collections.IEnumerator.Reset%2A> At ez elhelyezése, hívja <xref:System.Collections.IEnumerator.Current%2A>kivételt jelez.</xref:System.Collections.IEnumerator.Current%2A> Ezért meg kell hívnia <xref:System.Collections.IEnumerator.MoveNext%2A>ahhoz, hogy a számbavevő a <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> értékének olvasása előtt a gyűjtemény első eleme</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>az azonos objektumot ad vissza, amíg újra nem indítják <xref:System.Collections.IEnumerator.MoveNext%2A>vagy <xref:System.Collections.IEnumerator.Reset%2A>nevezik.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Beállítja a <xref:System.Collections.IEnumerator.Current%2A>átállítása.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Ha <xref:System.Collections.IEnumerator.MoveNext%2A>gyűjteményének, a számbavevő a gyűjtemény utolsó eleme mögé van elhelyezve fázisok és <xref:System.Collections.IEnumerator.MoveNext%2A>adja vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> A számbavevő ezen a helyen, az ezt követő hívások esetén <xref:System.Collections.IEnumerator.MoveNext%2A>is vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Ha az utolsó irányuló hívás <xref:System.Collections.IEnumerator.MoveNext%2A>visszaadott `false`, hívó <xref:System.Collections.IEnumerator.Current%2A>kivételt jelez.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>Ebben az esetben a gyűjtemény első eleme a hívása <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> követ</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> beállítása       Enumerátor érvényes marad mindaddig, amíg a gyűjtemény változatlan marad. Ha módosítják a gyűjteményhez, hozzáadása, módosítása vagy törlése elemek, például a számbavevő visszavonhatatlanul érvénytelenné válik, és <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>egy <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> jelez</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> , vagy hívja a következő Ha a gyűjtemény módosítás közötti <xref:System.Collections.IEnumerator.MoveNext%2A>és <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>adja vissza az elem, értékűre van állítva, akkor is, ha a számláló már érvénytelenné válik.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       A számbavevő nem rendelkezik kizárólagos hozzáférése a gyűjteményhez; egy gyűjtemény számbavétele ezért alapvetően nem szálbiztos verziójának eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket.       Ez a módszer O(1) során."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Az elemek tényleges száma a kapacitás állítja egy <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "Ez a módszer használható egy gyűjtemény memória terhet minimalizálhatja új elem megkapja a gyűjteményhez.       Alaphelyzetbe állítja a <xref:System.Collections.SortedList>objektum a kezdeti állapotot, a hívást a <xref:System.Collections.SortedList.Clear%2A>metódus TrimToSize hívása előtt.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> Egy üres díszítésre <xref:System.Collections.SortedList>kapacitásának beállítja a <xref:System.Collections.SortedList>alapértelmezett kapacitással.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum csak olvasható.       – vagy – a <xref href=&quot;System.Collections.SortedList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Az értékek beolvasása a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum."
  remarks: "A <xref:System.Collections.ICollection>célja egy csak olvasható nézetű értékének a <xref:System.Collections.SortedList>objektum.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Az alapul szolgáló <xref:System.Collections.SortedList>azonnal megjelennek a <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList> végrehajtott módosítások       <xref:System.Collections.ICollection>Rendezi a rendszer a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> értékei ugyanabban a sorrendben</xref:System.Collections.ICollection> elemei       Ez a tulajdonság hasonlít a <xref:System.Collections.SortedList.GetValueList%2A>metódust, de értéket ad vissza egy <xref:System.Collections.ICollection>objektum helyett egy <xref:System.Collections.IList>objektum.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       Ez a módszer O(1) során."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Egy <xref:System.Collections.ICollection>az értékeket tartalmazó objektum a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektum.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
