### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "Egy objektum, amely részt vesz a függőség tulajdonság rendszer jelöli."
  remarks: "A DependencyObject osztály lehetővé teszi, hogy [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] tulajdonság rendszerszolgáltatások a sok származtatott osztályok.       A tulajdonság rendszer elsődleges funkciója a tulajdonság értékét számítja ki, és adja meg a rendszer értesítést módosult. Egy másik fő osztály, amely részt vesz a tulajdonság rendszer <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>engedélyezi a függőségi tulajdonságok a tulajdonság rendszerbe, és azonosítása és egyes függőségi tulajdonságok biztosít, mivel a DependencyObject és az osztály alaposztálya lehetővé teszi, hogy az objektumok a függőségi tulajdonságok használata.</xref:System.Windows.DependencyProperty>       DependencyObject szolgáltatások és jellemzői a következők:-támogatás üzemeltető függőség tulajdonság. A <xref:System.Windows.DependencyProperty.Register%2A>metódust, és tárolja a metódus visszatérési értéke az a osztálytól nyilvános statikus mezőként</xref:System.Windows.DependencyProperty.Register%2A> meghívásával regisztrálja a függőség tulajdonság      -Támogatási üzemeltető csatolt tulajdonság. A <xref:System.Windows.DependencyProperty.RegisterAttached%2A>metódus, és tárolja a metódus visszatérési értéke, egy nyilvános statikus írásvédett mezőben az a osztálytól</xref:System.Windows.DependencyProperty.RegisterAttached%2A> meghívásával regisztrálja egy csatolt tulajdonság (Is további tag követelmények; a vegye figyelembe, hogy ez jelöli egy [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] csatolt tulajdonságok adott implementációja. További információkért lásd: [csatolt tulajdonságok áttekintése](~/add/includes/ajax-current-ext-md.md).) A csatolt tulajdonság majd beállítható bármely osztályt, amely a dependencyobject elemből származik.      -Get, állítsa be és törölje a DependencyObject a függőségi tulajdonságok értékek segédprogram-metódusokat.      -Metaadatok, kényszerítési érték támogatása, tulajdonság csatolt tulajdonságainak új és módosított értesítési, és a függőségi tulajdonságok felülbírálás visszahívások. A DependencyObject osztály könnyíti meg is, a tulajdonos tulajdonság metaadatai egy függőségi tulajdonság esetében.      -A közös alaposztálya származó <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, vagy <xref:System.Windows.Media.Visual>.</xref:System.Windows.Media.Visual> </xref:System.Windows.Freezable> </xref:System.Windows.ContentElement> (<xref:System.Windows.UIElement>, egy másik a(z) osztály rendelkezik tartalmazó osztály hierarchia <xref:System.Windows.Media.Visual>.)</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement>"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> osztály."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Törli a helyi tulajdonság értéke. A törlendő tulajdonság által megadott egy <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> azonosítója."
  remarks: "A tulajdonság értékének törlése ClearValue meghívásával nem szükségszerűen függőség tulajdonság az alapértelmezett érték a függőség tulajdonság metaadatai között megadott. A tulajdonság csak a külön törlésével törli bármilyen helyi érték érvényben. További információkért lásd: [függőség tulajdonság értéke sorrend](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A függőség tulajdonság törölve, által azonosított egy <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> hivatkozási objektumot."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Az egy lezárt ClearValue hívását kísérelte meg <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Törli a helyi csak olvasható tulajdonság értéke. A törlendő tulajdonság által megadott egy <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref>."
  remarks: "A <xref:System.Windows.DependencyPropertyKey>azonosítja egy csak olvasható függőség tulajdonság tulajdonság rendszer műveletekhez.</xref:System.Windows.DependencyPropertyKey> Osztályok csak olvasható függőségi tulajdonságok meghatározó kell teszi ezt a kulcsot, hozzáférésű. Egy nyilvánosan elérhetővé kulcs volna Ha adja meg a nyilvános kód végzett információküldéshez, hogy a tulajdonság csak olvasható karakter negated módszerek, például <xref:System.Windows.DependencyObject.ClearValue%2A>vagy <xref:System.Windows.DependencyObject.SetValue%2A>sikerült hívható meg az osztály vagy a szerelvény, a kulcs hivatkozó kívül.</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.ClearValue%2A>       A tulajdonság értékének törlése ClearValue meghívásával nem szükségszerűen függőség tulajdonság az alapértelmezett érték a függőség tulajdonság metaadatai között megadott. Az érték csak a külön törlésével törli bármilyen helyi érték érvényben. További információkért lásd: [függőség tulajdonság értéke sorrend](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "A kulcs törölve lesz a függőségi tulajdonság esetében."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hívását kísérelte meg <xref:System.Windows.DependencyObject.ClearValue*>az egy lezárt <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>.</xref:System.Windows.DependencyObject.ClearValue*>"
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Típusú értékké konvertál, az adott függőségi tulajdonság értékét. Ez érhető el, hogy bármely <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> megtalálható a hívó a tulajdonság metaadatai között függőség tulajdonsághoz megadott függvény <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Explicit módon hívja CoerceValue, keresztül meghívott mellett a <xref:System.Windows.CoerceValueCallback>függőséget tulajdonság is meghívták belső amikor a függőség tulajdonság értéke van folyamatban újraértékeli a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] tulajdonság system.</xref:System.Windows.CoerceValueCallback>       A CoerceValue metódus meghívásakor soron meghívott a tulajdonság, melyet a coerce érték visszahívás. Általában CoerceValue által aktivált, csak akkor, ha tudja, hogy létezik-e egy coerce érték visszahívást, és ismeri a kényszerítési a visszahívás feltételeit.       A leggyakoribb forgatókönyvet CoerceValue hívja az osztály kezelésének vagy tulajdonság módosítása visszahívások kapcsolódó tulajdonságok, amelyek befolyásolják a másik fél értékek függő módon belül van. További információkért lásd: [függőség tulajdonság visszahívások és az érvényesítés](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A függőség tulajdonság megfelelő azonosítója."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A megadott <code> dp </code> vagy annak értéke érvénytelen vagy nem létezik."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Lekérdezi a <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> , burkolja a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] Ez a példány típusú."
  remarks: "Ez a tulajdonság akkor hasznos, ha olyan objektumot, amely egy metódus által visszaadott visszatérési érték típusú <xref:System.Windows.DependencyObject>és tulajdonság rendszer adott műveleteket végezhet rajta a típusától függően.</xref:System.Windows.DependencyObject> Például sokkal hatékonyabban hívására <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>használatával a <xref:System.Windows.DependencyObjectType>helyett a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] típusa.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType>elősegíti a gyorsabb keresési.</xref:System.Windows.DependencyObjectType>"
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> , burkolja a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] Ez a példány típusú."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Meghatározza, hogy a megadott <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> felel meg az aktuális <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Ez a megvalósítás csak hivatkozási egyenlőség, és nem kísérli meg a benne lévő tulajdonságok értékét egyenlő kiértékeléséhez."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "A <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> hasonlítsa össze az aktuális példány számára."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a két példányt azonos; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Egy kivonatoló kódot lekérdezi a <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Egy aláírt 32 bites egész kivonatoló kódot."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Létrehoz egy speciális enumerátor segíthetnek meghatározni, melyik függőségi tulajdonságok helyileg állított értékek a <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "A *helyi érték* értéke függőség tulajdonság által megadott <xref:System.Windows.DependencyObject.SetValue%2A>, és nem a tulajdonság rendszer egyéb szempontjait a.</xref:System.Windows.DependencyObject.SetValue%2A>       A <xref:System.Windows.LocalValueEnumerator>hívása GetLocalValueEnumerator is használható, amelyek rendelkeznek egy helyileg beállított enumerálása által kapott értéket a <xref:System.Windows.DependencyObject>példány.</xref:System.Windows.DependencyObject> </xref:System.Windows.LocalValueEnumerator> Minden ilyen tulajdonság által a számbavevő a jelzi egy <xref:System.Windows.LocalValueEntry>objektum, amely az egyes hivatkozó tulajdonságokkal rendelkezik <xref:System.Windows.DependencyProperty>és értékei.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> Ezzel a módszerrel a helyileg beállított keresztül számbavétele az értékek használhatók optimális vagy más célból helyi értékek, például a tulajdonságértékek meghatározásához egy <xref:System.Windows.DependencyObject>abban az esetben, ha tartalma törlődött.</xref:System.Windows.DependencyObject>      > [!IMPORTANT] > A visszaadott <xref:System.Windows.LocalValueEnumerator>tartalmazhat <xref:System.Windows.LocalValueEntry>függőségi tulajdonságok esetében csak olvasható, vagy ha értékek számítják ki a tulajdonság rendszer függőségi tulajdonságok rekordjait.</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEnumerator> Például egy visual keretrendszer elem, amely rendelkezik egy meglévő szélesség keresztül elrendezés tartozik <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</xref:System.Windows.FrameworkElement.ActualWidth%2A> helyi értéket Ha helyi értéket kap ahhoz, hogy visszaállíthatja őket, ellenőrizze a <xref:System.Windows.DependencyProperty.ReadOnly%2A>az egyes tulajdonságazonosító érték <xref:System.Windows.LocalValueEntry>annak ellenőrzésére, hogy a <xref:System.Windows.DependencyProperty>a szóban forgó csak nem olvasható.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.DependencyProperty.ReadOnly%2A>"
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "Speciális helyi értékszámláló."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ezen a példányon a függőség tulajdonság jelenlegi hatékony értékét adja vissza egy <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "A *hatékony érték* bármely hívónak kérő az érték a tulajdonság rendszer által visszaadott tulajdonság értéke. Az érvényes érték a tulajdonság rendszer, hogy értékeli ki a lehetséges bemenetek, hogy a tulajdonság rendszer érték sorrend eredménye. Ez magában foglalja, kényszerítési és animáció. További információkért lásd: [függőség tulajdonság értéke sorrend](~/add/includes/ajax-current-ext-md.md).       Ez a módszer soha nem visszaadható <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> A <xref:System.Windows.DependencyProperty>sentinel érték a tulajdonság rendszerhez használt belső és alkalmanként is közzétéve az kényszerítési visszahívások különböző kapacitások.</xref:System.Windows.DependencyProperty>       Ha nem biztos abban, hogy mi a tulajdonság típusának meg kell lennie, a kért függőségi tulajdonság határozza meg, hogy van-e további konkrét azonosítója lekérdezhető <xref:System.Windows.DependencyProperty.PropertyType%2A>, amely az eredményül kapott értéket lehet formátumúvá konvertálni.</xref:System.Windows.DependencyProperty.PropertyType%2A>"
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> használatával kikeresheti az értéket a tulajdonság azonosítója."
    return:
      type: System.Object
      description: "Az aktuális hatékony értékét adja vissza."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A megadott <code> dp </code> vagy annak értéke érvénytelen, vagy a megadott <code> dp </code> nem létezik."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Értékelje ki az adott függőségi tulajdonság esetében az érvényes érték"
  remarks: "InvalidateProperty, minden vonatkozó és alkalmazható hívás esetén <xref:System.Windows.CoerceValueCallback>vagy <xref:System.Windows.PropertyChangedCallback>Funkciók regisztrálva az adott függőségi tulajdonság lehet meghívni.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       InvalidateProperty hívása olyan tulajdonságon, amely a helyi értéket hatástalan lesz, mert a helyi elsőbbséget élvez más tulajdonság rendszer bemenetek, kivéve a animációk. Azonban hívhatja <xref:System.Windows.DependencyObject.ClearValue%2A>, majd hívja a InvalidateProperty.</xref:System.Windows.DependencyObject.ClearValue%2A> További információkért lásd: [függőség tulajdonság értéke sorrend](~/add/includes/ajax-current-ext-md.md).       Nem feltétlenül alkalmazhatók a sok függőség tulajdonság forgatókönyvben InvalidateProperty hívása. A függőség tulajdonság válik Érvénytelenítve az összetevők bármelyikét érték változásai miatt, ha a tulajdonság rendszer érvénytelenné válik, és értékelje ki ismétlődően a függőség tulajdonság automatikusan. Van azonban még néhány megfelelő forgatókönyvekben, ahol InvalidateProperty hasznos. Különösen InvalidateProperty használhatja a coerce belül vagy tulajdonság megváltozott a visszahívás egy másik függőségi tulajdonság esetében. A kötés kapcsolódik egy adatforrásban, amely nem az ajánlott újraértékelése kényszerítése InvalidateProperty is használhatja <xref:System.ComponentModel.INotifyPropertyChanged>értesítési mechanizmus (lehet, hogy ha adatosztályokat, nem kell származnia, vagy ha az adatok egy statikus tag fel).</xref:System.ComponentModel.INotifyPropertyChanged>"
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> érvénytelenné válnak a tulajdonság azonosítója."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Lekérdezi egy érték, amely azt jelzi, hogy ez a példány jelenleg lezárt (csak olvasható)."
  remarks: "Az alapérték belső."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha ez a példány lezárt; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Amikor meghívott bármely függőség tulajdonság a hatékony értékének <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> frissítve lett. Az adott függőségi tulajdonság megváltozott az eseményadat-jelentésekről."
  remarks: "Ez a módszer nem célja, hogy általában észleli az egyes tulajdonságok módosítását, vagy hajtsa végre a Tulajdonságok invalidations eset alapon. Ha bizonyos adatok széles besorolások tulajdonságok kapcsolatos ismert OnPropertyChanged helyette készült általános érvénytelenítési minta a módosításokat. Például megváltozik egy <xref:System.Windows.Freezable>lehet, hogy a érték típusú változásai a <xref:System.Windows.Freezable>, vagy előfordulhat, hogy altulajdonságok, ahol a változtatások vannak más belül <xref:System.Windows.Freezable>hivatkozik.</xref:System.Windows.Freezable> </xref:System.Windows.Freezable> </xref:System.Windows.Freezable> A <xref:System.Windows.Freezable>OnPropertyChanged felülbírálás végrehajtása belső információ segítségével határozza meg, hogy a Tulajdonságok altulajdonságok, és megfelelő alaposztályból logika biztosít mindkét esetben.</xref:System.Windows.Freezable>       OnPropertyChanged potenciálisan meghívták sokszor objektum élettartama során. Ezért érhet el jobb teljesítményt nyújt az általános tulajdonság rendszer Ha tulajdonságokat metaadatainak felülírására, és csatolja majd <xref:System.Windows.CoerceValueCallback>vagy <xref:System.Windows.PropertyChangedCallback>Funkciók az egyes tulajdonságok.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> Azonban volna használni ezt a módszert, ha egy <xref:System.Windows.DependencyObject>jelentős számos olyan értéket kapcsolatban áll egymással függőségi tulajdonságok esetében, vagy ha azt logikát tartalmaz, például a viselkedés megjelenítést alkalmazni kell futtatható több kapcsolódó tulajdonság invalidations eseteit.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Esemény adatok, amelyek iránt érdeklődik, a típus tulajdonság metaadatainak és a régi és új értékeinek függőség tulajdonság azonosítóját fogja tartalmazni."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "A függőség tulajdonság helyi értékét adja vissza, ha van ilyen."
  remarks: "Használjon <xref:System.Windows.DependencyObject.GetValue%2A>műveleteihez legjellemzőbb &quot;get&quot; függőség tulajdonság.</xref:System.Windows.DependencyObject.GetValue%2A> ReadLocalValue nem ad vissza az érvényes érték a különböző körülmények között amennyiben az értéke helyileg nincs beállítva.       Stílusok, témák, sablonok által beállított értékek, a metaadatok vagy tulajdonságöröklés érték az alapértelmezett érték nem tekinthetők kell lennie a helyi értékek. Azonban kötései és egyéb kifejezéseket minősülnek helyi értékek után lehet felmérni.       Ha nincs helyi érték van beállítva, ez a metódus visszaadja-e <xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue>       Ha a visszaadott érték eltérő <xref:System.Windows.DependencyProperty.UnsetValue>, kérdezheti le a metaadatokat a kért függőségi tulajdonság határozza meg, hogy van-e az eredményül kapott értéket konvertálható pontosabb típussal.</xref:System.Windows.DependencyProperty.UnsetValue>"
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> használatával kikeresheti az értéket a tulajdonság azonosítója."
    return:
      type: System.Object
      description: "A helyi értéket ad vissza, vagy sentinel értékét adja vissza <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> nem helyi érték beállítása esetén."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "A függőség tulajdonság értékének beállítása érték forrását módosítása nélkül."
  remarks: "Ez a módszer egy összetevő, amely programozott módon állítja be a saját tulajdonságok egyikét, anélkül, hogy a tulajdonság egy alkalmazás deklarált használatával letiltása használja. A SetCurrentValue metódus megváltoztatja az érvényes érték a tulajdonság, de a meglévő eseményindítók, az adatkötéseket, és stílusok továbbra is működni fog."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A függőség tulajdonság beállítása azonosítóját."
    - id: value
      type: System.Object
      description: "Az új helyi értéket."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A csak olvasható függőség tulajdonság, vagy az egy lezárt tulajdonság módosítását kísérelte meg <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>nem megfelelő típusú volt, mivel a regisztrált a <code>dp</code> tulajdonság."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "A függőség tulajdonság, a függőség tulajdonság azonosítóval megadott helyi értékének beállítása."
  remarks: "Ha a megadott típus nem egyezik meg a típust, a függőségi tulajdonság esetében van deklarálva, mivel eredetileg regisztrálva, a rendszer kivételt hoz létre. A `value` paraméter mindig adni a megfelelő típusú.       A kivétel feltételek potenciálisan befolyásol a <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>visszahívási meglétét a függőség tulajdonság beállítása a függőség tulajdonság azonosítója.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> Ellenkező esetben a megadott érték lehet, hogy hibás általános típus-ellenőrzés feltételek (például egy karakterlánc típusra, ha a natív típusa dupla)."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A függőség tulajdonság beállítása azonosítóját."
    - id: value
      type: System.Object
      description: "Az új helyi értéket."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A csak olvasható függőség tulajdonság, vagy az egy lezárt tulajdonság módosítását kísérelte meg <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>nem megfelelő típusú volt, mivel a regisztrált a <code>dp</code> tulajdonság."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "A csak olvasható függőség tulajdonság által megadott helyi értékének beállítása a <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> a függőség tulajdonság azonosítója."
  remarks: "Az aláírás általában akkor használják, ha úgy állítja be az egyéni osztályok által definiált írásvédett függőségi tulajdonságok értékeit. A SetValue művelet általában csak a regisztrált az adott függőségi tulajdonság, a belső logika, amely a meghatározott értéket ad meg a függőség tulajdonság, amely típusból nevezik. További információkért lásd: [csak olvasási jogosultsággal rendelkező függőségi tulajdonságok](~/add/includes/ajax-current-ext-md.md).       Ha a megadott típus nem egyezik meg a típust, a függőségi tulajdonság esetében van deklarálva, mivel eredetileg regisztrálva, a rendszer kivételt hoz létre. A `value` paraméter mindig adni a megfelelő típusú. A kivétel feltételek potenciálisan befolyásol a <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>visszahívási meglétét a függőség tulajdonság beállítása a függőség tulajdonság azonosítója.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>"
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "A <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> a beállítandó tulajdonság azonosítója."
    - id: value
      type: System.Object
      description: "Az új helyi értéket."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Egy érték, amely azt jelzi, hogy szerializálási folyamatok kell szerializálni a megadott függőség tulajdonság értékét adja vissza."
  remarks: "Az alapértelmezett implementációja adja vissza `true` függőség tulajdonság kellett háttércsoport a <xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject> a helyi értéket minden esetben"
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A függőség tulajdonsághoz, amely kell szerializálni azonosítója."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a függőség tulajdonság megadott értéke szerializált; kell lennie Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
