### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultValue
  id: SemanticResultValue
  children:
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  - System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
  type: Class
  summary: "A szemantikai értékét jelöli, és opcionálisan a értéket társítja a beszédfelismerés felismerés nyelvtan összetevője."
  remarks: "A SemanticResultValue és <xref:System.Speech.Recognition.SemanticResultKey>objektumokat, <xref:System.Speech.Recognition.GrammarBuilder>és <xref:System.Speech.Recognition.Choices>, a legegyszerűbb módja a szemantikai felépítés <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> együtt</xref:System.Speech.Recognition.SemanticResultKey> Kifejezések Szemantikus információk illetéktelen példányának beszerzéséről <xref:System.Speech.Recognition.SemanticValue>, a <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>tulajdonság a <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> keresztül</xref:System.Speech.Recognition.SemanticValue>      > [!NOTE] > SemanticResultValue objektumok által kezelt értékeket <xref:System.Object>példányok átadott a konstruktorok.</xref:System.Object> Ez alapjául szolgáló típusnak <xref:System.Object>kell `bool`, `int`, `float`, vagy `string`.</xref:System.Object> Megakadályozza, hogy más építése egy <xref:System.Speech.Recognition.Grammar>a SemanticResultValue-példány.</xref:System.Speech.Recognition.Grammar>       A tipikus használati SemanticResultValue példány társítja a példány felismerhető összetevője egy <xref:System.Speech.Recognition.Grammar>, például egy kifejezést, egy szabály vagy a <xref:System.Speech.Recognition.Choices>objektum.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.Grammar> A társított összetevő egy felismerés művelet részeként használata esetén a SemanticResultValue segítségével adjon meg egy értéket a visszaadott kifejezés szemantikáját.       Nincsenek a SemanticResultValue példánya társít egy nyelvtan elem, attól függően, hogy a SemanticResultValue létrehozásához használt konstruktor két alapvető módszert.      -Ha csak az érték (egy példánya által megadott <xref:System.Object>) van egy SemanticResultValue objektum létrehozásához használt, a SemanticResultValue társítva a nyelvtan összetevő megelőző, kívül egy <xref:System.Speech.Recognition.GrammarBuilder>objektum.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object>           A Ha az alábbi kódrészlet például a egy <xref:System.Speech.Recognition.Grammar>használatával Ez <xref:System.Speech.Recognition.GrammarBuilder>példány felismeri a word &quot;Háttér&quot;, érték `true` állítható be a felismert kifejezés szemantikáját.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>          ```c#       GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);       backgroundGB.Append(new SemanticResultValue(true));       ```További információkért lásd: <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> leírása      – Ha egy karakterlánc érték kifejezés vagy a specifikus <xref:System.Speech.Recognition.GrammarBuilder>együtt, a használt példány egy <xref:System.Object>, amely megadja, hogy a érték a automatikusan hozzárendeli a karakterlánc-érték kifejezés SemanticResultValue értéket, vagy a <xref:System.Speech.Recognition.GrammarBuilder>példány.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object> </xref:System.Speech.Recognition.GrammarBuilder>  Ha a kifejezés vagy <xref:System.Speech.Recognition.GrammarBuilder>objektum felismerés során használatos, az érték lesz hozzárendelve a felismert kifejezés szemantikáját.</xref:System.Speech.Recognition.GrammarBuilder>           A következő példa ezt mutatja be, és funkcionális szempontból egyenértékű az előző példában, amellyel <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>és <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> explicit hívások Ha a felismerési logika használ-e a word &quot;Háttér&quot;, érték `true` nem kerülnek be a felismert szemantikáját.          ```c#       fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;, true));       ```További információkért lásd: <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>és <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29> </xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> leírása       Egy <xref:System.Speech.Recognition.Grammar>felismerése, példányainak SemanticResultValue kell rendelni egy <xref:System.Speech.Recognition.SemanticValue>adott <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> által használt objektumok</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.Grammar> által használható A szemantikai kulcs társít a SemanticResultValue ehhez.       Szemantikai kulcsok explicit módon lehet rendelni egy SemanticResultValue használatával egy <xref:System.Speech.Recognition.SemanticResultKey>objektum.</xref:System.Speech.Recognition.SemanticResultKey>  SemanticResultValue példányai nem kifejezetten csatolva egy kulcsot a legfelső szintű kulcsot az alapértelmezett <xref:System.Speech.Recognition.SemanticValue>.</xref:System.Speech.Recognition.SemanticValue> vannak csatolva.       Egy SemanticResultValue használt beállítása után a <xref:System.Speech.Recognition.SemanticValue.Value%2A>, hogy az alapértelmezett legfelső szintű kulcsot, vagy bármely adott lesz megjelölve <xref:System.Speech.Recognition.SemanticResultKey>, ezt az értéket nem lehet módosítani, vagy felismerés során kivétel történik.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       Az alábbi példa okoz a kivételt, mivel azt állítja be, és ezután módosítja a legfelső szintű <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticValue.Value%2A>      ```c#   GrammarBuilder gb=new GrammarBuilder();   gb.Append(new SemanticResultValue(&quot;One&quot;));   gb.Append(new SemanticResultValue(&quot;Two&quot;));   ```Másrészről a kódot az alábbi példában engedélyezett. Bár több példánya SemanticResultValue meghatározza, hogy szerepel egy <xref:System.Speech.Recognition.Choices>objektumot, és legalább egyszer használható beállításához a kulcsnak az értéke csak egy lesz `bgOrfgText`.</xref:System.Speech.Recognition.Choices>      ```c#   Choices fgOrbgChoice = new Choices();   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;));   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;foreground&quot;));   SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(&quot;BgOrFgText&quot;, fgOrbgChoice);   ```SemanticResultValue használatáról további információt és <xref:System.Speech.Recognition.SemanticResultKey>objektumok, lásd: [ismertetése SemanticResultValue és SemanticResultKey objektumok](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) és [egy SemanticResultKey segítségével bontsa ki a SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) a a [rendszer beszéd programozási útmutató a .NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultKey>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\".  SemanticResultValue and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(new SemanticResultValue(introGB, String.Format(\"Command: {0}\", introString)));  \n  }    \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                       cmdIntro,  \n                       new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]

      public class SemanticResultValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> osztályhoz, és adja meg egy szemantikai értéke."
  remarks: "A `SemanticResultValue` által visszaadott konstruktor bármely adott nyelvtan elem nem tartozik. A társítás kell kezdeményeznie, explicit módon a példányát használja `SemanticResultValue` <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder> együtt       A Ha az alábbi kódrészlet például a egy <xref:System.Speech.Recognition.Grammar>használatával Ez <xref:System.Speech.Recognition.GrammarBuilder>példány felismeri a word &quot;Háttér&quot;, érték `true` állítható be a felismert kifejezés szemantikáját.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>      ```c#   GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);   backgroundGB.Append(new SemanticResultValue(true));   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n        cmdIntro,   \n        new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Az érték által kezelt <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> osztály és egy szemantikai értéket társítja a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objektum."
  remarks: "Ha a nyelvtan elem által meghatározott <xref:System.Speech.Recognition.GrammarBuilder>van használatban a felismerési logika `value` be lesznek állítva felismert kimeneti szemantikáját.</xref:System.Speech.Recognition.GrammarBuilder>       A kódba, ha az alábbi felismerés logika kialakítani a <xref:System.Speech.Recognition.GrammarBuilder>példány (`myGb`) használ a <xref:System.Speech.Recognition.Choices>objektum (`myChoice`) azonosításához adjon meg, az érték `true` hozzáadódik a felismert szemantikáját.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(myChoice, true);   ```Mint <xref:System.Speech.Recognition.GrammarBuilder>az implicit konverzió <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, és <xref:System.Speech.Recognition.SemanticResultKey>, ez a konstruktor használhatja ezeket az objektumokat is szerepeltethet.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n    }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                      cmdIntro,  \n                      new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Egy nyelvtan összetevő felismerés használhatók."
    - id: value
      type: System.Object
      description: "Az érték által kezelt <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> osztály és egy szemantikai értéket társítja a <xref:System.String>objektum.</xref:System.String>"
  remarks: "Ha a karakterlánc által meghatározott `phrase` van használatban a felismerési logika `value` be lesznek állítva felismert kimeneti szemantikáját.       A következő kódrészletet, ha a felismerési logika kialakítani a a <xref:System.Speech.Recognition.GrammarBuilder>példány (`myGb`) használja a &quot;saját jelzálog&quot; karakterlánc azonosításához adjon meg, az érték `true` nem kerülnek be a felismert szemantikáját.</xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(&quot;my mortgage&quot;, true);   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }  \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(cmdIntro,  \n                         new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public SemanticResultValue (string phrase, object value);
    parameters:
    - id: phrase
      type: System.String
      description: "A felismerés során használandó kifejezést."
    - id: value
      type: System.Object
      description: "Az érték által kezelt <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Egy példányát adja vissza <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> az aktuális értékekből összeállított <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> példány."
  remarks: "A ToGrammarBuilder használata egyenértékű a <xref:System.Speech.Recognition.GrammarBuilder>konstruktort a <xref:System.Speech.Recognition.SemanticResultValue>argumentumként (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates <xref:System.Speech.Recognition.Grammar> objects that support commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances that are obtained from the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the `SemanticResultValue` objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in the `colorChoice` instance.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RBG.  \n  // Choices constructors do not take a SemanticResultValue parameter, so  \n  // cast SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    SemanticResultValue colorValue =   \n        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n    colorChoice.Add(colorValue.ToGrammarBuilder());  \n  }  \n  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with an introductory phrase and the  \n  // color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the final grammar, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  \n  grammar.Name = \"Set Background Color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Egy példányát adja vissza <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> az aktuális értékekből összeállított <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> példány."
  overload: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
- uid: System.Speech.Recognition.SemanticResultValue.#ctor*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue.SemanticResultValue
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultValue.ToGrammarBuilder
