### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceController
  id: ServiceController
  children:
  - System.ServiceProcess.ServiceController.#ctor
  - System.ServiceProcess.ServiceController.#ctor(System.String)
  - System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  - System.ServiceProcess.ServiceController.CanPauseAndContinue
  - System.ServiceProcess.ServiceController.CanShutdown
  - System.ServiceProcess.ServiceController.CanStop
  - System.ServiceProcess.ServiceController.Close
  - System.ServiceProcess.ServiceController.Continue
  - System.ServiceProcess.ServiceController.DependentServices
  - System.ServiceProcess.ServiceController.DisplayName
  - System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  - System.ServiceProcess.ServiceController.GetDevices
  - System.ServiceProcess.ServiceController.GetDevices(System.String)
  - System.ServiceProcess.ServiceController.GetServices
  - System.ServiceProcess.ServiceController.GetServices(System.String)
  - System.ServiceProcess.ServiceController.MachineName
  - System.ServiceProcess.ServiceController.Pause
  - System.ServiceProcess.ServiceController.Refresh
  - System.ServiceProcess.ServiceController.ServiceHandle
  - System.ServiceProcess.ServiceController.ServiceName
  - System.ServiceProcess.ServiceController.ServicesDependedOn
  - System.ServiceProcess.ServiceController.ServiceType
  - System.ServiceProcess.ServiceController.Start
  - System.ServiceProcess.ServiceController.Start(System.String[])
  - System.ServiceProcess.ServiceController.StartType
  - System.ServiceProcess.ServiceController.Status
  - System.ServiceProcess.ServiceController.Stop
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  langs:
  - csharp
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController
  type: Class
  summary: "Windows-szolgáltatás jelöli, és lehetővé teszi egy futó vagy leállított szolgáltatás csatlakozni, kezelheti, vagy azt adatainak beolvasása."
  remarks: "A ServiceController osztály használatával csatlakozhat, és a meglévő szolgáltatások viselkedését vezérli. A ServiceController osztály példányának létrehozásakor tulajdonságát be így hatással van az adott Windows-szolgáltatás. Az osztály majd segítségével indítása, leállítása és a szolgáltatás más módon kezelhetők.       Valószínűleg szüksége lesz a ServiceController összetevő egy felügyeleti kapacitás. Például létrehozhat egy egyéni parancsokat küld a szolgáltatásnak a ServiceController példány keresztül Windows vagy a webes alkalmazás. Akkor hasznos, mert a szolgáltatásvezérlő kezelőjéhez (SCM) a Microsoft Management Console beépülő modul nem támogatja az egyéni parancsokat.       ServiceController példányának létrehozása után meg kell adni két tulajdonságok rajta a szolgáltatás, amellyel kommunikál azonosításához: a számítógép nevét és a vezérlő kívánt szolgáltatás nevét.      > [!NOTE] > Alapértelmezés szerint <xref:System.ServiceProcess.ServiceController.MachineName%2A>a helyi számítógépre van beállítva, így nem kell megváltoztatnia, ha be szeretné állítani a példány egy másik számítógépre mutassanak.</xref:System.ServiceProcess.ServiceController.MachineName%2A>       Általában a szolgáltatás Szerző ír kóddal, amely egy adott parancshoz tartozó művelet. Például egy szolgáltatást tartalmazhat válaszolni a kód egy <xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName>parancs.</xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName> Ebben az esetben, az egyéni feldolgozása a <xref:System.ServiceProcess.ServiceController.Pause%2A>feladat futtatása előtt a rendszer felfüggeszti a szolgáltatást.</xref:System.ServiceProcess.ServiceController.Pause%2A>       A szolgáltatás képes a parancsok készlete tulajdonságát; függ. például beállíthatja a <xref:System.ServiceProcess.ServiceController.CanStop%2A>tulajdonság egy szolgáltatás `false`.</xref:System.ServiceProcess.ServiceController.CanStop%2A> Ez a beállítás Renderelés a `Stop` parancsot a adott szolgáltatás nem érhető el; megakadályozza, hogy Ön a szükséges gomb letiltásával az SCM a szolgáltatás leállítása. Ha megpróbálja leállítani a szolgáltatást a felhasználói kódból, a rendszer egy hibát, és hibaüzenetet jeleníti meg &quot;nem sikerült leállítani a `servicename`.&quot;"
  example:
  - "The following example demonstrates the use of the ServiceController class to control the `SimpleService` service example.  \n  \n [!code-cs[ServiceControllerClass#1](~/add/codesnippet/csharp/t-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._6_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")]

      public class ServiceController : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> osztály, amely nincs társítva egy adott szolgáltatáshoz."
  syntax:
    content: public ServiceController ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> osztály, amely egy meglévő szolgáltatáshoz a helyi számítógépen van társítva."
  remarks: ''
  example:
  - "The following example demonstrates the use of the ServiceController constructor to create a <xref:System.ServiceProcess.ServiceController> object that is used to control a sample service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/m-system.serviceprocess._0_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public ServiceController (string name);
    parameters:
    - id: name
      type: System.String
      description: "A neve, amely azonosítja a szolgáltatást, hogy a rendszer. Ez a szolgáltatás megjelenített neve is lehet."
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>érvénytelen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> osztály, amely egy meglévő szolgáltatáshoz a megadott számítógépen van társítva."
  remarks: "Az a `machineName` paraméter, használhatja &quot;.&quot; a helyi számítógép képviseli."
  syntax:
    content: public ServiceController (string name, string machineName);
    parameters:
    - id: name
      type: System.String
      description: "A neve, amely azonosítja a szolgáltatást, hogy a rendszer. Ez a szolgáltatás megjelenített neve is lehet."
    - id: machineName
      type: System.String
      description: "A számítógép, amelyen a szolgáltatás található."
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>érvénytelen.       – vagy – <code>machineName</code> érvénytelen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi egy érték, amely jelzi, hogy a szolgáltatás szüneteltetve-e, és hogy folytatódik."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanPauseAndContinue property to determine whether a service can pause and continue. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._8_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public bool CanPauseAndContinue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a szolgáltatás szüneteltethető; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi egy érték, amely jelzi, hogy a szolgáltatás értesíteni kell, amikor a rendszer leáll."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanShutdown property to determine whether a service provides a handler for a shutdown event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public bool CanShutdown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a szolgáltatás értesíteni kell, amikor a rendszer leáll; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceController.CanShutdown*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Egy érték, amely jelzi, hogy a szolgáltatás leállítása, elindítása után lekérdezi."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanStop property to determine whether a service provides a handler for a stop event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._1_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public bool CanStop { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a szolgáltatás és a <xref:System.ServiceProcess.ServiceBase.OnStop*>metódust hívni; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceBase.OnStop*>"
  overload: System.ServiceProcess.ServiceController.CanStop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Close
  id: Close
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Bontja a kapcsolatot a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> példány a szolgáltatásból, és felszabadítja a példány lefoglalt erőforrások."
  remarks: "Zárja be a társított összes leíró kiadja a <xref:System.ServiceProcess.ServiceController>példány.</xref:System.ServiceProcess.ServiceController>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Close*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Continue
  id: Continue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "A szolgáltatás továbbra is fennáll, miután megkezdte a szünetelést."
  remarks: "Folytatás szolgáltatás hívásakor az első állapotra `ContinuePending` , és ezt követően a Folytatás metódus ad vissza, ha azt módosul a `Running`.       Folytatás nem hívható a szolgáltatáshoz, amíg a tartományvezérlő állapota nem `Paused`."
  example:
  - "The following example demonstrates the use of the Continue method to continue a paused service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#5](~/add/codesnippet/csharp/m-system.serviceprocess._2_1.cs)]\n [!code-vb[ServiceControllerClass#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public void Continue ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Continue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DependentServices
  id: DependentServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi, hogy a társított szolgáltatás függ szolgáltatáskészlet <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> példány."
  remarks: "A DependentServices tömb jelöli a szolgáltatásokat, amelyeket a rendszer leáll, ha az alkalmazás <xref:System.ServiceProcess.ServiceController.Stop%2A>ennél a szolgáltatásnál.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._4_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._4_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] DependentServices { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "A tömb <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> példányokat, amelyek társítva egy szolgáltatás, amely a szolgáltatás függ."
  overload: System.ServiceProcess.ServiceController.DependentServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi vagy beállítja a szolgáltatás rövid nevét."
  remarks: "Beállíthatja a DisplayName üres karakterláncot kell megadni (&quot;&quot;), de a tulajdonság `null` kivételt jelez."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._3_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._3_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "A szolgáltatás, a szolgáltatás azonosítására szolgáló rövid neve."
  overload: System.ServiceProcess.ServiceController.DisplayName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A DisplayName van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "A nem felügyelt által használt erőforrások kiadja a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> és opcionálisan kiadja a felügyelt erőforrások."
  remarks: "Ezt a módszert nevezik nyilvános `Dispose()`metódus és a <xref:System.Object.Finalize%2A>metódus.</xref:System.Object.Finalize%2A> `Dispose()`meghívja a védett `Dispose(Boolean)` metódust a `disposing` paraméter `true`. <xref:System.Object.Finalize%2A>Elindítja a `Dispose` rendelkező `disposing` beállítása `false`.</xref:System.Object.Finalize%2A>       Ha a `disposing` paraméter értéke igaz, ez a módszer minden felügyelt objektum által tárolt összes erőforrás kiadja a <xref:System.ServiceProcess.ServiceController>hivatkozik.</xref:System.ServiceProcess.ServiceController> Ez a metódus meghívja a `Dispose()` minden hivatkozott metódusa."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a kibocsátási felügyelt és a nem felügyelt erőforrások; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> csak a nem felügyelt erőforrások kijelölése."
  overload: System.ServiceProcess.ServiceController.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  id: ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Egy egyéni parancs végrehajtása a szolgáltatás a."
  remarks: "Az ExecuteCommand hívásakor a szolgáltatás állapota nem változik. A szolgáltatás indítása, ha az állapot továbbra is `Running`. Ha a szolgáltatás le lett állítva, az állapot továbbra is `Stopped`, és így tovább. Az egyéni parancs feldolgozásához, a szolgáltatás felül kell bírálnia a <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>metódust, és adja meg a kezelő által azonosított parancs a `command` paraméter.</xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>"
  example:
  - "The following code example shows the use of the ExecuteCommand method to execute custom commands in the `SimpleService` service example.  \n  \n [!code-cs[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/csharp/m-system.serviceprocess._5_1.cs)]\n [!code-vb[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._5_1.vb)]"
  syntax:
    content: public void ExecuteCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "Egy alkalmazás által meghatározott parancs jelzőt, amely jelzi, mely egyéni parancs végrehajtásához. Az érték 128 és 256-ot, a két szélsőértéket beleértve között kell lennie."
  overload: System.ServiceProcess.ServiceController.ExecuteCommand*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices
  id: GetDevices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekéri az eszközillesztő-szolgáltatások a helyi számítógépen."
  remarks: "GetDevices illesztőprogram szolgáltatások visszaszolgáltatja az eszközt csak a helyi számítógépről. Nem eszközillesztő szolgáltatásokat vagy szolgáltatásokat, amelyek nem illesztőprogramok lekéréséhez, hívja meg a <xref:System.ServiceProcess.ServiceController.GetServices%2A>metódus.</xref:System.ServiceProcess.ServiceController.GetServices%2A> A két módszer együtt, a szolgáltatások hozzáférést biztosítanak a számítógépen."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/m-system.serviceprocess._6_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/m-system.serviceprocess._6_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "Típusú tömb <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> az egyes elemei társítva a egy eszköz illesztőprogram szolgáltatás a helyi számítógépen."
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  id: GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekéri az eszközillesztő-szolgáltatások a megadott számítógépen."
  remarks: "<xref:System.ServiceProcess.ServiceController.GetDevices%2A>ad vissza az eszköz csak illesztőprogram szolgáltatások a megadott számítógépen.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> Nem eszközillesztő szolgáltatásokat vagy szolgáltatásokat, amelyek nem illesztőprogramok lekéréséhez, hívja meg a <xref:System.ServiceProcess.ServiceController.GetServices%2A>metódus.</xref:System.ServiceProcess.ServiceController.GetServices%2A> A két módszer együtt, a szolgáltatások hozzáférést biztosítanak a számítógépen."
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "Olvassa be az eszközillesztő-szolgáltatások állapotból a számítógépet."
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "Típusú tömb <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> az egyes elemei társítva egy illesztőprogram szolgáltatással a megadott számítógépen."
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> machineName </code> paraméter szintaxisa érvénytelen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices
  id: GetServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekéri a helyi számítógépen, kivéve az eszközillesztő-szolgáltatások a szolgáltatásokat."
  remarks: "GetServices csak a nem eszközillesztő szolgáltatások és a szolgáltatások, amelyek nem a helyi számítógépről illesztőprogramok adja vissza. Eszközillesztő-szolgáltatások lekéréséhez hívja meg a <xref:System.ServiceProcess.ServiceController.GetDevices%2A>metódus.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> A két módszer együtt, a szolgáltatások hozzáférést biztosítanak a számítógépen."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the services that are running on the local computer.  \n  \n [!code-cs[ServiceController#6](~/add/codesnippet/csharp/m-system.serviceprocess._7_1.cs)]\n [!code-cpp[ServiceController#6](~/add/codesnippet/cpp/m-system.serviceprocess._7_1.cpp)]\n [!code-vb[ServiceController#6](~/add/codesnippet/visualbasic/m-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "Típusú tömb <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> az egyes elemei társítva a szolgáltatás a helyi számítógépen."
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  id: GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi a megadott számítógépen, kivéve az eszközillesztő-szolgáltatások a szolgáltatásokat."
  remarks: "<xref:System.ServiceProcess.ServiceController.GetServices%2A>csak a nem eszközillesztő szolgáltatások és a szolgáltatások, amelyek nincsenek a megadott számítógép illesztőprogramok adja vissza.</xref:System.ServiceProcess.ServiceController.GetServices%2A> Eszközillesztő-szolgáltatások lekéréséhez hívja meg a <xref:System.ServiceProcess.ServiceController.GetDevices%2A>metódus.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> A két módszer együtt, a szolgáltatások hozzáférést biztosítanak a számítógépen."
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "A számítógép, amelyből a szolgáltatások beolvasása."
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "Típusú tömb <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> az egyes elemei társítva a szolgáltatás a megadott számítógépen."
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> machineName </code> paraméter szintaxisa érvénytelen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.MachineName
  id: MachineName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi vagy beállítja annak a számítógépnek, amelyre a szolgáltatást tároló nevét."
  remarks: "A számítógép neve, a fenti fordított perjel karakter nélkül a szolgáltatást futtató kiszolgáló neve: (\\\\\\\\)."
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "A társított szolgáltatást futtató számítógép neve <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> példány. Az alapértelmezett érték a helyi számítógépen (&quot;.&quot;)."
  overload: System.ServiceProcess.ServiceController.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A számítógépnév szintaxisa érvénytelen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Pause
  id: Pause
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "A szolgáltatási művelet felfüggeszti."
  remarks: "Nem hívható meg <xref:System.ServiceProcess.ServiceController.Continue%2A>a szolgáltatáshoz, amíg a tartományvezérlő állapota `Paused`.</xref:System.ServiceProcess.ServiceController.Continue%2A>"
  example:
  - "The following example demonstrates the use of the Pause method to pause a service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._4_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Pause*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Refresh
  id: Refresh
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Frissíti a tulajdonság értékét az aktuális értékekre tulajdonságainak alaphelyzetbe állításával."
  remarks: "A frissítési mód hatására a <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>, <xref:System.ServiceProcess.ServiceController.DependentServices%2A>, és <xref:System.ServiceProcess.ServiceController.Status%2A>Tulajdonságok állítanak vissza az aktuális értékekre, ha a következő hivatkozott.</xref:System.ServiceProcess.ServiceController.Status%2A> </xref:System.ServiceProcess.ServiceController.DependentServices%2A> </xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example demonstrates the use of the Refresh method to obtain the status of a service. The code instructs a service to pause, and then waits for the status to reflect the change. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._3_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "A szolgáltatás lekéri a leíró."
  syntax:
    content: public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }
    return:
      type: System.Runtime.InteropServices.SafeHandle
      description: "A <xref:System.Runtime.InteropServices.SafeHandle>, amely tartalmazza a szolgáltatás leíró.</xref:System.Runtime.InteropServices.SafeHandle>"
  overload: System.ServiceProcess.ServiceController.ServiceHandle*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi vagy beállítja a nevét, amely azonosítja a szolgáltatást, ez a példány hivatkozó."
  remarks: "A szolgáltatásnév azonosítja a szolgáltatást, hogy a szolgáltatásvezérlő kezelőjéhez. E tulajdonság módosítása hatására a <xref:System.ServiceProcess.ServiceController>példány lehet kötést létrehozni egy másik szolgáltatás, nem változtatja meg beépülő modulban jeleníti meg a Microsoft Management Console milyen a szolgáltatáskezelő.</xref:System.ServiceProcess.ServiceController>       Egy egyéni szolgáltatás valósít meg, ha a tulajdonság értékének meg kell egyeznie a rögzíti a szolgáltatás <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>a megfelelő <xref:System.ServiceProcess.ServiceInstaller>osztály</xref:System.ServiceProcess.ServiceInstaller> tulajdonságának</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> nevét A kódban, általában beállítása a szolgáltatásnév a `main()` függvény a végrehajtható fájl.       A szolgáltatásnév tulajdonság alaphelyzetbe állításakor a módszert, amelyet a tulajdonság beállítása beállítása ehhez a példányhoz <xref:System.ServiceProcess.ServiceController.DisplayName%2A>üres karakterlánc (&quot;&quot;).</xref:System.ServiceProcess.ServiceController.DisplayName%2A>"
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "A neve, amely azonosítja a szolgáltatást, amelyhez a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> példány hivatkozik. Az alapértelmezett érték egy üres karakterlánc (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceController.ServiceName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A szolgáltatásnév <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A szolgáltatásnév tulajdonság szintaxisa érvénytelen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Szolgáltatáskészlet, amely a szolgáltatás függ."
  remarks: "Ha a ServicesDependedOn tömb bármely szolgáltatás nem fut, csak akkor tudja elindítani a szolgáltatást."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that the Messenger service is dependent on.  \n  \n [!code-cs[ServiceController#4](~/add/codesnippet/csharp/p-system.serviceprocess._2_1.cs)]\n [!code-cpp[ServiceController#4](~/add/codesnippet/cpp/p-system.serviceprocess._2_1.cpp)]\n [!code-vb[ServiceController#4](~/add/codesnippet/visualbasic/p-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "A tömb <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> példányokat, amelyek mindegyike tartozik egy szolgáltatás, amely a szolgáltatás futtatásához futnia kell."
  overload: System.ServiceProcess.ServiceController.ServicesDependedOn*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceType
  id: ServiceType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Lekérdezi a szolgáltatás típusa, ez az objektum hivatkozik."
  remarks: "A szolgáltatás típusának azt jelzi, hogy a szolgáltatás a rendszer által felhasznált. A ServiceType tulajdonság jelöli a bitenkénti vagy operátor használatával egyesített jelzőket."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/p-system.serviceprocess._9_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/p-system.serviceprocess._9_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/p-system.serviceprocess._9_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceType ServiceType { get; }
    return:
      type: System.ServiceProcess.ServiceType
      description: "Egy a <xref href=&quot;System.ServiceProcess.ServiceType&quot;> </xref> érték azt jelzi, a hálózati szolgáltatás típusa."
  overload: System.ServiceProcess.ServiceController.ServiceType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start
  id: Start
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Elindítja a szolgáltatást, argumentum nélkül átadásakor."
  remarks: "Nem hívható meg <xref:System.ServiceProcess.ServiceController.Stop%2A>a szolgáltatáshoz, amíg a tartományvezérlő állapota `Running`.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/m-system.serviceprocess._8_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/m-system.serviceprocess._8_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  id: Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Elindítja a szolgáltatást, átadja a megadott argumentumok."
  remarks: "Nem hívható meg <xref:System.ServiceProcess.ServiceController.Stop%2A>a szolgáltatáshoz, amíg a tartományvezérlő állapota `Running`.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  syntax:
    content: public void Start (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "A tömb argumentumokat a szolgáltatás indításakor."
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem indítható el."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>args</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       – vagy – A tag a tömb <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Egy érték, amely azt jelzi, hogy a szolgáltatás által képviselt lekérdezi a <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> objektum elindul."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "Egy érték, amely azt jelzi, hogy a szolgáltatás indítási módjának."
  overload: System.ServiceProcess.ServiceController.StartType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Status
  id: Status
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Ez a példány által hivatkozott a szolgáltatás állapotának beolvasása."
  remarks: "Az állapot azt jelzi, hogy a szolgáltatás aktuális állapotát. A lehetséges értékek is tartalmaz, amely jelzi, hogy egy állapot módosítása parancs függőben lévő több."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/p-system.serviceprocess._0_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/p-system.serviceprocess._0_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceControllerStatus Status { get; }
    return:
      type: System.ServiceProcess.ServiceControllerStatus
      description: "Egy a <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> érték, amely jelzi, hogy a szolgáltatás fut, leállítva vagy szünetel, vagy hogy a kezdés leállítása, szüneteltetése vagy továbbra is a parancs függőben."
  overload: System.ServiceProcess.ServiceController.Status*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Leállítja ezt a szolgáltatást, és ez a szolgáltatás függő szolgáltatásokat."
  remarks: "Ha olyan szolgáltatásokat a művelet a szolgáltatás függ, azok le kell állítani a szolgáltatás leállítása előtt. A <xref:System.ServiceProcess.ServiceController.DependentServices%2A>tulajdonság azokat a szolgáltatások, amelyek erre függenek.</xref:System.ServiceProcess.ServiceController.DependentServices%2A>       Ha leállítja egy szolgáltatás, amely a szolgáltatás függ, a Stop metódus hívható meg ezen a szolgáltatáson belül a Stop metódus a szülő szolgáltatás. A <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>tulajdonsága tartalmazza a szolgáltatásokat, amelyeket a szolgáltatás függ.</xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/m-system.serviceprocess._1_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/m-system.serviceprocess._1_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Stop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Hiba történt a rendszer API-n való hozzáféréskor."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A szolgáltatás nem található."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "A szolgáltatás számára megadott állapota végtelenül vár."
  remarks: "WaitForStatus segítségével egy alkalmazás folyamatot, amíg a szolgáltatás elérte a szükséges állapot felfüggesztés.      > [!NOTE] > A <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>metódus várjon körülbelül 250 ezredmásodperc közötti minden állapotának ellenőrzése.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>a kis-és a megfigyelt módosítása a szolgáltatás nem tudja észlelni a `desiredStatus` , majd azonnal egy másik állapota az adott időszakban.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/82fc1460-0a6f-432e-81a5-_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/82fc1460-0a6f-432e-81a5-_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/82fc1460-0a6f-432e-81a5-_1.vb)]"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "Várjon, amíg az állapot."
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "A <code> desiredStatus </code> paraméter nincs a megadott értékek valamelyikét a <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> enumerálása."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "A szolgáltatás számára megadott állapota vagy lejár a megadott időtúllépési várakozik."
  remarks: "Használjon <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>alkalmazás felfüggesztése feldolgozási mindaddig, amíg a szolgáltatás elérte a szükséges állapot.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>      > [!NOTE] > A <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>metódus várjon körülbelül 250 ezredmásodperc közötti minden állapotának ellenőrzése.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>a kis-és a megfigyelt módosítása a szolgáltatás nem tudja észlelni a `desiredStatus` , majd azonnal egy másik állapota az adott időszakban.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "Várjon, amíg az állapot."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>mennyi ideig várjon a szolgáltatás számára megadott állapota megadó objektum.</xref:System.TimeSpan>"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "A <code> desiredStatus </code> paraméter nincs a megadott értékek valamelyikét a <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> enumerálása."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "A megadott a <code> timeout </code> paraméter lejár."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.ServiceProcess.ServiceController.#ctor
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceController.CanShutdown
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
- uid: System.ServiceProcess.ServiceController.Continue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
- uid: System.ServiceProcess.ServiceController.DependentServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceController
    name: ServiceController
    nameWithType: ServiceController
    fullName: ServiceController[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.DisplayName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceController.GetDevices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
- uid: System.ServiceProcess.ServiceController.GetServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
- uid: System.ServiceProcess.ServiceController.MachineName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
- uid: System.ServiceProcess.ServiceController.Refresh
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.ServiceProcess.ServiceController.ServiceName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceType
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceType
  nameWithType: ServiceType
  fullName: System.ServiceProcess.ServiceType
- uid: System.ServiceProcess.ServiceController.Start
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.StartType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceController.Status
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
- uid: System.ServiceProcess.ServiceControllerStatus
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceControllerStatus
  nameWithType: ServiceControllerStatus
  fullName: System.ServiceProcess.ServiceControllerStatus
- uid: System.ServiceProcess.ServiceController.Stop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceProcess.ServiceController.#ctor*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController.ServiceController
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceController.CanShutdown*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close
  nameWithType: ServiceController.Close
- uid: System.ServiceProcess.ServiceController.Continue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue
  nameWithType: ServiceController.Continue
- uid: System.ServiceProcess.ServiceController.DependentServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController.DisplayName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose
  nameWithType: ServiceController.Dispose
- uid: System.ServiceProcess.ServiceController.ExecuteCommand*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand
  nameWithType: ServiceController.ExecuteCommand
- uid: System.ServiceProcess.ServiceController.GetDevices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices
  nameWithType: ServiceController.GetDevices
- uid: System.ServiceProcess.ServiceController.GetServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices
  nameWithType: ServiceController.GetServices
- uid: System.ServiceProcess.ServiceController.MachineName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause
  nameWithType: ServiceController.Pause
- uid: System.ServiceProcess.ServiceController.Refresh*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh
  nameWithType: ServiceController.Refresh
- uid: System.ServiceProcess.ServiceController.ServiceHandle*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
- uid: System.ServiceProcess.ServiceController.ServiceName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceController.Start*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start
  nameWithType: ServiceController.Start
- uid: System.ServiceProcess.ServiceController.StartType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
- uid: System.ServiceProcess.ServiceController.Status*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
- uid: System.ServiceProcess.ServiceController.Stop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop
  nameWithType: ServiceController.Stop
- uid: System.ServiceProcess.ServiceController.WaitForStatus*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus
  nameWithType: ServiceController.WaitForStatus
