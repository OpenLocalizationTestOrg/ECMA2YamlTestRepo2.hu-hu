### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.InstrumentationManager
  id: InstrumentationManager
  children:
  - System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  - System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  langs:
  - csharp
  name: InstrumentationManager
  nameWithType: InstrumentationManager
  fullName: System.Management.Instrumentation.InstrumentationManager
  type: Class
  summary: "Felügyelt élettartama, és a modell leválasztott szolgáltatók használt metódusokat biztosít.       Megjegyzés: a WMI .NET-kódtárakra most minősülnek végső állapot, és nincs további fejlesztési, fejlesztések, vagy frissítések állnak rendelkezésre a tárak érintő nem biztonsági problémákat. A [MI API-k](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) használja a rendszer minden új fejlesztését."
  remarks: "Az alkalmazás által üzemeltetett leválasztott szolgáltatók. Két módszer használható az alkalmazás elérhetővé a WMI-osztályok példányai: közzététel vagy a visszavonáshoz, vagy a visszahívási metódus. A visszahívási metódusnak a <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>és <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>módszerek.</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> </xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>       A közzététel vagy a visszavonáshoz modellben a a WMI-infrastruktúra alapértelmezett viselkedést biztosít az visszahívási metódus írási saját magának kell módszerek közül. Ezek közé tartozik a számbavételi és módszerek kötni. Ebben a modellben az alkalmazás létrehozza, és közzéteszi őket. Az alkalmazásra az, hogy az osztály kulcstulajdonságát tiszteletben tartják biztosításáért felelős. Az alkalmazás felelős is példányok törlése.       A visszahívási modellben a WMI-infrastruktúra az alkalmazás rendelkezik, amelyek kezelik a számbavételi, binding és a szolgáltató funkcióinak végrehajtásához szükséges semmilyen más metódus módszerek vár. Meghívja az alkalmazás erre a funkcióra, és sikertelen lesz, ha nem létezik, vagy nem megfelelően van implementálva. Az alkalmazás az infrastruktúra a WMI-osztályok típusú regisztrálja <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>azt jelzi, hogy már nem szeretné a WMI-osztályokat <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> meghívásával kitett</xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> meghívásával"
  example:
  - "The following example demonstrates how to use the publish/revoke model. Two instances of the router class are created and published. They are later revoked.  \n  \n```  \npublic class Sample_InstanceProvider  \n{  \npublic int Main (string[] args)   \n{  \nRouter r_one = new Router ();  \nr_one.Name = \"one\";  \nInstrumentationManager.Publish(r_one);  \nRouter r_two = new Router ();  \nr_two.Name = \"two\";  \nInstrumentationManager.Publish(r_two);  \n// ....  \nInstrumentationManager.Revoke(r_one);  \nInstrumentationManager.Revoke(r_two);  \nreturn 0;  \n}  \n}  \n```  \n  \n In the next example, the callback method of registration is used to expose the RouterNew class.  \n  \n```  \npublic int MainNew(string[] args)   \n{  \n    InstrumentationManager.RegisterType(typeof(RouterNew));  \n    // ....  \n    InstrumentationManager.UnRegisterType(typeof(RouterNew));  \n    return 0;  \n}  \n```"
  syntax:
    content: public static class InstrumentationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  id: Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Elérhetővé teszi a szolgáltató példányt a WMI-infrastruktúrájában."
  syntax:
    content: public static void Publish (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A szolgáltató közzététele megvalósító osztály példánya."
  overload: System.Management.Instrumentation.InstrumentationManager.Publish*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  id: RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Egy szerelvény regisztrálja a WMI-infrastruktúra."
  syntax:
    content: public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "A szerelvény regisztrálni."
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  id: RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "A WMI-infrastruktúra egy osztály regisztrálja."
  remarks: ''
  example:
  - "```  \nstatic int Main(string[] args)  \n{  \n   InstrumentationManager.RegisterType(typeof(MySampleProvider));  \n   return 0;  \n}  \n```"
  syntax:
    content: public static void RegisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "Az osztály típusa."
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  id: Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "A jelenleg rendelkezésre álló-szolgáltató példányát veszi, és lehetővé teszi az nem érhető el, a WMI-infrastruktúrájában."
  syntax:
    content: public static void Revoke (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A szolgáltató visszavonására megvalósító osztály példánya."
  overload: System.Management.Instrumentation.InstrumentationManager.Revoke*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  id: UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Megszünteti egy szerelvény jelenleg regisztrálva a WMI-infrastruktúrával."
  syntax:
    content: public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "A regisztrált szerelvény regisztrációját."
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  id: UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "A WMI-infrastruktúra regisztrált osztály regisztrációjának törlése."
  syntax:
    content: public static void UnregisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "A regisztrált típus regisztrációjának törlése."
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
- uid: System.Management.Instrumentation.InstrumentationManager.Publish*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish
  nameWithType: InstrumentationManager.Publish
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly
  nameWithType: InstrumentationManager.RegisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType
  nameWithType: InstrumentationManager.RegisterType
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke
  nameWithType: InstrumentationManager.Revoke
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly
  nameWithType: InstrumentationManager.UnregisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType
  nameWithType: InstrumentationManager.UnregisterType
