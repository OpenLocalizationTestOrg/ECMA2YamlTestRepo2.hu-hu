### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpContent
  id: HttpContent
  children:
  - System.Net.Http.HttpContent.#ctor
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.CreateContentReadStreamAsync
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Dispose(System.Boolean)
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
  type: Class
  summary: "Egy olyan alaposztályból, egy HTTP entitástörzsében és tartalomfejléceket jelölő."
  syntax:
    content: 'public abstract class HttpContent : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref> osztály."
  syntax:
    content: protected HttpContent ();
    parameters: []
  overload: System.Net.Http.HttpContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalom egy adatfolyamba való mentésre bájt és a másolatok úgy, hogy a stream objektum megadott szerializálni a <code> stream </code> paraméter."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum után az összes tartalmat a stream objektum átadása pedig írt befejezi a `stream` paraméter.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A cél adatfolyam."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalom egy adatfolyamba való mentésre bájt és a másolatok úgy, hogy a stream objektum megadott szerializálni a <code> stream </code> paraméter."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum után az összes tartalmat a stream objektum átadása pedig írt befejezi a `stream` paraméter.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A cél adatfolyam."
    - id: context
      type: System.Net.TransportContext
      description: "Az átvitel (lexikális elem, például kötés csatorna) kapcsolatos információkat. Ez a paraméter lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalomhoz memória adatfolyamba szerializálni, egy aszinkron művelet."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum befejeződik, miután az összes tartalmat a memóriafolyam írt.</xref:System.Threading.Tasks.Task%601>       A művelet befejezése után a <xref:System.Threading.Tasks.Task%601.Result%2A>tulajdonság a visszaadott feladat objektum tartalmazza a memóriafolyam, hogy, hogy a HTTP-tartalmat jelöli.</xref:System.Threading.Tasks.Task%601.Result%2A> A visszaadott stream majd segítségével olvassa el a tartalom különböző adatfolyam API-k segítségével.       A CreateContentReadStreamAsync metódus pufferel egy memóriafolyam a tartalmat. Származtatott osztályok ezt a viselkedést felülírhatja, ha egy jobb módon nem lehet beolvasni a tartalom adatfolyamként. For example, egy bájttömböt vagy egy karakterláncot használhat, például egy csak olvasható alkalmazásburkoló sokkal hatékonyabb módszer módszer <xref:System.IO.MemoryStream>bájt vagy karakterlánc köré.)</xref:System.IO.MemoryStream>"
  syntax:
    content: protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose
  id: Dispose
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A nem felügyelt erőforrások és a felügyelt erőforrások megválik által használt kiadásokban a <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A nem felügyelt által használt erőforrások kiadja a <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref> és a felügyelt erőforrások opcionálisan értékesít."
  remarks: "Ezt a módszert nevezik nyilvános `Dispose()` metódus és a <xref:System.Object.Finalize%2A>metódus.</xref:System.Object.Finalize%2A> `Dispose()`meghívja a védett `Dispose(Boolean)` metódust a `disposing` paraméter `true`. <xref:System.Object.Finalize%2A>Elindítja a `Dispose` rendelkező `disposing` beállítása `false`. Ha a `disposing` paraméter `true`, ez a módszer minden felügyelt objektum által tárolt összes erőforrás kiadja, amelyhez a <xref:System.Net.Http.HttpContent>hivatkozik.</xref:System.Net.Http.HttpContent></xref:System.Object.Finalize%2A> Ez a metódus meghívja a `Dispose()` minden hivatkozott metódusa."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a kibocsátási felügyelt és a nem felügyelt erőforrások; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> kiadásokban csak a nem felügyelt erőforrások."
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Headers
  id: Headers
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Lekérdezi a tartalom HTTP-fejléceket az RFC 2616."
  syntax:
    content: public System.Net.Http.Headers.HttpContentHeaders Headers { get; }
    return:
      type: System.Net.Http.Headers.HttpContentHeaders
      description: "A tartalom fejlécek az RFC 2616."
  overload: System.Net.Http.HttpContent.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  id: LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalmat, hogy a memóriapuffer szerializálni, egy aszinkron művelet."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task>objektum befejeződik, miután a memóriaterületen összes tartalmat lett szerializálva.</xref:System.Threading.Tasks.Task>       Tartalom a memóriapuffer a szerializált, miután egy meghívja a <xref:System.Net.Http.HttpContent.CopyToAsync%2A>módszerek fog átmásolni a tartalmat a memóriapuffer a cél adatfolyam.</xref:System.Net.Http.HttpContent.CopyToAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  id: LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalmat, hogy a memóriapuffer szerializálni, egy aszinkron művelet."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task>objektum befejeződik, miután a memóriaterületen összes tartalmat lett szerializálva.</xref:System.Threading.Tasks.Task>       Tartalom a memóriapuffer a szerializált, miután egy meghívja a <xref:System.Net.Http.HttpContent.CopyToAsync%2A>módszerek fog átmásolni a tartalmat a memóriapuffer a cél adatfolyam.</xref:System.Net.Http.HttpContent.CopyToAsync%2A>       Ha a tartalom túllépi az átadott értéknek a `maxBufferSize` paraméter, kivétel történik."
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);
    parameters:
    - id: maxBufferSize
      type: System.Int64
      description: "A maximális méretét, a használandó puffer bájtban."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  id: ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalmat, hogy egy bájttömböt szerializálni, egy aszinkron művelet."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum befejeződik, miután a teljes tartalmat ki van írva, egy bájttömböt.</xref:System.Threading.Tasks.Task%601>       A művelet befejezése után a <xref:System.Threading.Tasks.Task%601.Result%2A>tulajdonság a visszaadott feladat objektum tartalmazza a bájttömböt a HTTP-tartalomhoz.</xref:System.Threading.Tasks.Task%601.Result%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  id: ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalomhoz szerializálni, és térjen vissza olyan adatfolyamra, amely a tartalom egy aszinkron művelet jelöli."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum befejezi az adatfolyam összes után pedig a tartalom beolvasva.</xref:System.Threading.Tasks.Task%601>       A művelet befejezése után a <xref:System.Threading.Tasks.Task%601.Result%2A>a visszaadott feladat objektum tulajdonsága tartalmazza az adatfolyam, hogy, hogy a HTTP-tartalmat jelöli.</xref:System.Threading.Tasks.Task%601.Result%2A> A visszaadott stream majd segítségével olvassa el a tartalom különböző adatfolyam API-k segítségével."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.ReadAsStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  id: ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalomhoz karakterláncra szerializálni, egy aszinkron művelet."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum befejezi után az összes tartalom karakterláncként van írva.</xref:System.Threading.Tasks.Task%601>       A művelet befejezése után a <xref:System.Threading.Tasks.Task%601.Result%2A>tulajdonság a visszaadott feladat objektum tartalmazza a karakterláncot a HTTP-tartalomhoz.</xref:System.Threading.Tasks.Task%601.Result%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<string> ReadAsStringAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.ReadAsStringAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "A HTTP-tartalomhoz adatfolyamba szerializálni, egy aszinkron művelet."
  remarks: "Ez a művelet nem fogja tiltani. A visszaadott <xref:System.Threading.Tasks.Task%601>objektum befejeződik, miután az összes tartalom az a stream objektum átadott szerializált rendelkezik a `stream` paraméter.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: protected abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A cél adatfolyam."
    - id: context
      type: System.Net.TransportContext
      description: "Az átvitel (lexikális elem, például kötés csatorna) kapcsolatos információkat. Ez a paraméter lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat objektum."
  overload: System.Net.Http.HttpContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Meghatározza, hogy van-e a HTTP-tartalomhoz érvényes hossza (bájt)."
  remarks: "TryComputeLength metódus lehetővé teszi a HTTP-tartalom a tartalom hossza kiszámításához. Ez akkor hasznos, a tartalomtípusokat, amelyek könnyen kiszámíthatja a tartalom hosszúságát. Ha a tartalom hossza nem lehetséges, vagy drága (igényelnének a rendszer a teljes tartalma, ahol a szerializálási volna költséges vagy igényelnek nagy mennyiségű memóriát lefoglalni a rendszer meghajtóin) számítástechnikai, ez a módszer térhet vissza `false`. Ez a metódus visszatérési értéke `false`, ez azt jelenti, hogy szükség van a darabolásos átviteli vagy a tartalom kell beolvasni pufferelt előtt küldi el a kiszolgálón."
  syntax:
    content: protected abstract bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "A hossza (bájt) a HTTP-tartalomhoz."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <code> length </code> nem egy érvényes hosszúságú; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.HttpContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Http.HttpContent.#ctor
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.Dispose
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpContent.Headers
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
- uid: System.Net.Http.Headers.HttpContentHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpContentHeaders
  nameWithType: HttpContentHeaders
  fullName: System.Net.Http.Headers.HttpContentHeaders
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
- uid: System.Net.Http.HttpContent.#ctor*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent.HttpContent
- uid: System.Net.Http.HttpContent.CopyToAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync
  nameWithType: HttpContent.CopyToAsync
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: HttpContent.CreateContentReadStreamAsync
- uid: System.Net.Http.HttpContent.Dispose*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose
  nameWithType: HttpContent.Dispose
- uid: System.Net.Http.HttpContent.Headers*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync
  nameWithType: HttpContent.LoadIntoBufferAsync
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync
  nameWithType: HttpContent.ReadAsByteArrayAsync
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync
  nameWithType: HttpContent.ReadAsStreamAsync
- uid: System.Net.Http.HttpContent.ReadAsStringAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync
  nameWithType: HttpContent.ReadAsStringAsync
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: HttpContent.SerializeToStreamAsync
- uid: System.Net.Http.HttpContent.TryComputeLength*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength
  nameWithType: HttpContent.TryComputeLength
