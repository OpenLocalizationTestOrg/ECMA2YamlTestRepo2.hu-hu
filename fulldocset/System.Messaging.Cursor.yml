### YamlMime:ManagedReference
items:
- uid: System.Messaging.Cursor
  id: Cursor
  children:
  - System.Messaging.Cursor.Close
  - System.Messaging.Cursor.Dispose
  langs:
  - csharp
  name: Cursor
  nameWithType: Cursor
  fullName: System.Messaging.Cursor
  type: Class
  summary: "A kurzor karbantartásához az adott helyen használt egy <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> olvasásakor az üzenetsor-üzeneteket."
  remarks: "A kurzor lekérni egy <xref:System.Messaging.MessageQueue>, hívja a <xref:System.Messaging.MessageQueue.CreateCursor%2A>metódus várólistához.</xref:System.Messaging.MessageQueue.CreateCursor%2A> </xref:System.Messaging.MessageQueue>       Ilyen módokat, mint a kurzor használt <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29>és <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29>kell tennie, olvassa el az üzenetet, amely nem a várólista elejére.</xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> </xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> Ez magában foglalja az üzenetek olvasásához szinkron vagy aszinkron módon. A kurzorok nem kell olvasni a csak a várólista első üzenetébe.       A tranzakción belül üzenetek olvasásakor a Message Queuing nem állítja vissza kurzor adatátviteli, ha a tranzakció megszakadt. Tegyük fel, hogy van két üzenet A1 és A2 rendelkező várólista. Ha eltávolítja az üzenet valamely tranzakcióban A1, Message Queuing a kurzor A2 üzenethez. Azonban a tranzakció bármilyen okból meghiúsul, ha üzenet A1 bekerülnek visszaállítása a várólista, de a kurzor marad, az üzenetek A2 mutat.       Zárja be a kurzort, hívja meg a <xref:System.Messaging.Cursor.Close%2A>.</xref:System.Messaging.Cursor.Close%2A>"
  syntax:
    content: 'public sealed class Cursor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Close
  id: Close
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Bezárja a kurzort, így a Message Queuing szolgáltatást a kapcsolódó erőforrások kijelölése."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.Cursor.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Dispose
  id: Dispose
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Feloldja a által használt erőforrások a <xref href=&quot;System.Messaging.Cursor&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.Cursor.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.Cursor.Close
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
- uid: System.Messaging.Cursor.Dispose
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
- uid: System.Messaging.Cursor.Close*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close
  nameWithType: Cursor.Close
- uid: System.Messaging.Cursor.Dispose*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose
  nameWithType: Cursor.Dispose
