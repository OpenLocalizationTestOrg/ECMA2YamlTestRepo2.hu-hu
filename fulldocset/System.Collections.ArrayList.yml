### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "Megvalósítja a <xref:System.Collections.IList>csatoló tömb dinamikusan jobb lesz, amelynek segítségével szükség szerint.</xref:System.Collections.IList>       Keresse meg a .NET-keretrendszer forráskód ehhez a típushoz, tekintse meg a [hivatkozás forrás](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."
  remarks: "> [!NOTE]> Forráskódját .NET-keretrendszer ehhez a típushoz, tekintse meg a [hivatkozás forrás](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). Tallózzon a forráskód online, töltse le a hivatkozás nélküli megtekintéshez és a források (beleértve a javítások és frissítések) végighaladhat hibakeresési; Lásd: [utasításokat](http://referencesource.microsoft.com/).       Az ArrayList osztály heterogén objektumok gyűjteményeit adják tárolására szolgál. Azonban ez nem mindig nyújtja a legjobb teljesítményt. Ehelyett azt javasoljuk, hogy a következő: - a heterogén objektumok gyűjteménye található, használja a `List<Object>` (a C#) vagy `List(Of Object)` (a Visual Basic) mezőbe írja be.      -A homogén objektumok gyűjteménye található használja az <xref:System.Collections.Generic.List%601>osztályhoz.</xref:System.Collections.Generic.List%601>       &quot;A teljesítménnyel kapcsolatos szempontok&quot; című részében a <xref:System.Collections.Generic.List%601>referencia-témakör ezeket az osztályokat relatív teljesítménye leírását.</xref:System.Collections.Generic.List%601>       A ArrayList nem biztos, hogy rendezni.  A ArrayList meghívásával rendezni kell a <xref:System.Collections.ArrayList.Sort%2A>metódus műveletek végrehajtása előtt (például <xref:System.Collections.ArrayList.BinarySearch%2A>), amely esetében a rendezni kívánt ArrayList.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> Egy gyűjteményt, amely automatikusan van rendezve, új elem hozzáadása karbantartása, használja az <xref:System.Collections.Generic.SortedSet%601>osztályhoz.</xref:System.Collections.Generic.SortedSet%601>       Tömblistát kapacitása a ArrayList tárolására képes elemek száma. Elemek hozzáadása a tömblistát, automatikusan nagyobb-e a kapacitás szükség szerint keresztül foglalásainak módosítása. A kapacitás csökkenthetők meghívásával <xref:System.Collections.ArrayList.TrimToSize%2A>, illetve a <xref:System.Collections.ArrayList.Capacity%2A>tulajdonság explicit módon.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       Nagyon nagy ArrayList objektumok is növelheti a maximális 2 milliárd elemek egy 64 bites rendszeren úgy, hogy a `enabled` attribútumot a konfigurációs elem `true` a futásidejű környezetben.       A gyűjtemény elemszámának segítségével férhetők el az egész szám típusú index.  A gyűjtemény indexek nulla alapú.       A ArrayList gyűjtemény `null` érvényes értékként. Lehetővé teszi továbbá a duplikált elemeket.       A többdimenziós tömbök használata egy ArrayList gyűjteményben lévő elemek nem támogatott."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> osztály, amely üres, és az alapértelmezett kezdeti kapacitása."
  remarks: "A kapacitása egy <xref:System.Collections.ArrayList>elemek száma, amelyek a <xref:System.Collections.ArrayList>tárolására képes.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Az elemek hozzáadása egy <xref:System.Collections.ArrayList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.ArrayList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi többféle átméretezési műveletek elemek a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> való hozzáadása közben       Ez a konstruktor O(1) során."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> osztály, amely a megadott gyűjtemény átmásolva elemeket tartalmaz, és, hogy van-e a másolt elemek számának azonos kezdeti kapacitása."
  remarks: "A kapacitása egy <xref:System.Collections.ArrayList>elemek száma, amelyek a <xref:System.Collections.ArrayList>tárolására képes.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Az elemek hozzáadása egy <xref:System.Collections.ArrayList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.ArrayList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi többféle átméretezési műveletek elemek a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> való hozzáadása közben       Az elemek másolja az <xref:System.Collections.ArrayList>ugyanabban a sorrendben a <xref:System.Collections.IEnumerator> <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> által olvasott</xref:System.Collections.ArrayList>       Ez a konstruktor egy O (`n`) műveletet, ahol `n` lévő elemek száma `c`."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "A <xref:System.Collections.ICollection>az új lista másolandó elemek.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> osztály, amely üres, és a megadott kezdeti kapacitása."
  remarks: "A kapacitása egy <xref:System.Collections.ArrayList>elemek száma, amelyek a <xref:System.Collections.ArrayList>tárolására képes.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Az elemek hozzáadása egy <xref:System.Collections.ArrayList>, automatikusan jobb lesz, a kapacitás kérelmének újra-hozzárendelése a belső tömbnek.</xref:System.Collections.ArrayList>       Ha a gyűjtemény méreténél becsülhető, adja meg a kezdeti kapacitása szükségtelenné teszi többféle átméretezési műveletek elemek a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> való hozzáadása közben       Ez a konstruktor egy O (`n`) műveletet, ahol `n` van `capacity`."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Az új lista kezdetben tárolására alkalmas elemek száma."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>kisebb, mint nulla."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Létrehoz egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> egy adott <xref:System.Collections.IList>.</xref:System.Collections.IList> burkoló"
  remarks: "Csatoló nem másolja át a <xref:System.Collections.IList>.</xref:System.Collections.IList> tartalmát Ehelyett csak létrehoz egy <xref:System.Collections.ArrayList> <xref:System.Collections.IList>; ezért a módosításokat <xref:System.Collections.IList>is érintik a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.IList> </xref:System.Collections.IList> csomagolásának</xref:System.Collections.ArrayList>       A <xref:System.Collections.ArrayList>osztály biztosít az általános <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>és <xref:System.Collections.ArrayList.Sort%2A>módszerek.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> A burkoló is, hogy azokat a módszereket használja <xref:System.Collections.IList>, ezeket a műveleteket általános keresztül a burkoló előfordulhat, hogy közvetlenül a <xref:System.Collections.IList>.</xref:System.Collections.IList> alkalmazott műveletek-nél kevésbé hatékonyak;</xref:System.Collections.IList>       Ez a módszer O(1) során.      ## Verzió kompatibilitási a a .NET-keretrendszer 1.0-s és 1.1, hívja a <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>metódus túlterhelési a a <xref:System.Collections.ArrayList>burkoló adott vissza, amely a második argumentum kezelni, mint egy felső határa, nem pedig egy darabszámként számbevevőre.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> Az a [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] a második argumentum megfelelően a rendszer a száma."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "A <xref:System.Collections.IList>burkolása.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a <xref:System.Collections.IList>.</xref:System.Collections.IList> csomagolásának"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Objektum hozzáadása az végén a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       Ha <xref:System.Collections.ArrayList.Count%2A>már megegyezik <xref:System.Collections.ArrayList.Capacity%2A>, a kapacitása a <xref:System.Collections.ArrayList>automatikusan újra-hozzárendelése a belső tömbnek növekszik és a meglévő elemeket történő átmásolása az új tömb az új elem hozzáadása előtt.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Ha <xref:System.Collections.ArrayList.Count%2A>értéke kisebb, mint <xref:System.Collections.ArrayList.Capacity%2A>, ez a módszer során O(1).</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> Ha a kapacitás növelhető meg, hogy megfeleljen az új elem, ez a módszer válik O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>végére lehet hozzáadni a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index, ahol a <code> value </code> hozzá lett adva."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hozzáadja a elemeinek egy <xref:System.Collections.ICollection>végének a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       <xref:System.Collections.ICollection>A <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> megőrzi</xref:System.Collections.ICollection> az elemek sorrendje       Ha az új <xref:System.Collections.ArrayList.Count%2A>(az aktuális <xref:System.Collections.ArrayList.Count%2A>plusz a gyűjtemény mérete) lehet nagyobb, mint <xref:System.Collections.ArrayList.Capacity%2A>, a kapacitása a <xref:System.Collections.ArrayList>automatikusan újra-hozzárendelése az új elemek, olyan belső tömbnek növekszik és a meglévő elemeket történő átmásolása az új tömb előtt az új elemek hozzáadásakor.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Ha a <xref:System.Collections.ArrayList>lehetővé teszi az új elemek növelése nélkül a <xref:System.Collections.ArrayList.Capacity%2A>, ez a módszer egy O (`n`) műveletet, ahol `n` hozzáadandó elemek száma.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> Ha a kapacitás növelhető meg, hogy megfeleljen az új elemek, ez a módszer válik O (`n` + `m`) műveletet, ahol `n` hozzáadandó elemek száma és `m` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "A <xref:System.Collections.ICollection>elemek végére hozzá kell adni a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Magát a gyűjteményt nem lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, de elemeket tartalmazhat <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A teljes rendezve keres <xref href=&quot;System.Collections.ArrayList&quot;> </xref> elem az alapértelmezett összehasonlítót használja, és visszaadja az elemnek nulla alapú indexét."
  remarks: "A `value` paraméter, és egyes elemeinek a <xref:System.Collections.ArrayList>meg kell valósítania az <xref:System.IComparable>felületet, amely a összehasonlításához.</xref:System.IComparable> </xref:System.Collections.ArrayList> Elemei a <xref:System.Collections.ArrayList>már rendezni kell növekvő megfelelően a rendezési sorrend által meghatározott érték a <xref:System.IComparable>megvalósítási; ellenkező esetben az eredmény helytelen lehet.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Összehasonlításával `null` bármilyen engedélyezett, és nem jelent kivételt, <xref:System.IComparable>.</xref:System.IComparable> használatakor A rendezés során `null` számít, kisebb, mint bármely más objektumot.       Ha a <xref:System.Collections.ArrayList>egynél több elemet tartalmaz ugyanarra az értékre, a metódus csak az eseményeket, és előfordulhat, hogy térjen vissza az eseményeket, nem feltétlenül az elsőt a.</xref:System.Collections.ArrayList>       Ha a <xref:System.Collections.ArrayList>nem tartalmazza a megadott érték, a módszer egy negatív egész számot adja vissza.</xref:System.Collections.ArrayList> A negatív egész szám lekérni az index nagyobb, mint a keresett érték első elem alkalmazhat a bitenkénti komplemens számnak művelet (~). Az érték beszúráskor a <xref:System.Collections.ArrayList>, ezt az indexet a rendezési sorrend fenntartásához kell használható a kurzort.</xref:System.Collections.ArrayList>       Ez a módszer egy O (napló `n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>kereséséhez.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Nulla alapú indexét <code> value </code> a rendezett a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, ha <code> value </code> talált; egyéb, negatív szám, amely, a következő elem, amely nagyobb, mint az index bitenkénti azokat <code> value </code> vagy, ha nincs nagyobb elem, <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> bitenkénti kiegészítése"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Sem <code> value </code> sem elemei <xref href=&quot;System.Collections.ArrayList&quot;> </xref> valósítja meg a <xref:System.IComparable>felületet.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>Nincs elemei azonos típusú a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A teljes rendezve keres <xref href=&quot;System.Collections.ArrayList&quot;> </xref> elem a megadott összehasonlító használatával, és visszaadja az elemnek nulla alapú indexét."
  remarks: "A összehasonlító testreszabása, hogyan összehasonlítja az elemeket. Használhat például egy <xref:System.Collections.CaseInsensitiveComparer>példányához, azonban nem karakterlánc keresés összehasonlítóval.</xref:System.Collections.CaseInsensitiveComparer>       Ha `comparer` valósul meg, az elemeinek a <xref:System.Collections.ArrayList>összehasonlítja a megadott érték használata a megadott <xref:System.Collections.IComparer>végrehajtása.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Elemei a <xref:System.Collections.ArrayList>már rendezni kell növekvő megfelelően a rendezési sorrend által meghatározott érték `comparer`; ellenkező esetben előfordulhat, hogy helytelen az eredmény.</xref:System.Collections.ArrayList>       Ha `comparer` van `null`, történik, az összehasonlítás használatával a <xref:System.IComparable>megvalósítása a maga az elem, vagy a megadott érték.</xref:System.IComparable> Elemei a <xref:System.Collections.ArrayList>már rendezni kell növekvő megfelelően a rendezési sorrend által meghatározott érték a <xref:System.IComparable>megvalósítási; ellenkező esetben az eredmény helytelen lehet.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Összehasonlításával `null` bármilyen engedélyezett, és nem jelent kivételt, <xref:System.IComparable>.</xref:System.IComparable> használatakor A rendezés során `null` számít, kisebb, mint bármely más objektumot.       Ha a <xref:System.Collections.ArrayList>egynél több elemet tartalmaz ugyanarra az értékre, a metódus csak az eseményeket, és előfordulhat, hogy térjen vissza az eseményeket, nem feltétlenül az elsőt a.</xref:System.Collections.ArrayList>       Ha a <xref:System.Collections.ArrayList>nem tartalmazza a megadott érték, a módszer egy negatív egész számot adja vissza.</xref:System.Collections.ArrayList> A negatív egész szám lekérni az index nagyobb, mint a keresett érték első elem alkalmazhat a bitenkénti komplemens számnak művelet (~). Az érték beszúráskor a <xref:System.Collections.ArrayList>, ezt az indexet a rendezési sorrend fenntartásához kell használható a kurzort.</xref:System.Collections.ArrayList>       Ez a módszer egy O (napló `n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>kereséséhez.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>elemek összehasonlításakor használandó megvalósítási.</xref:System.Collections.IComparer>       – vagy – <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> használni az alapértelmezett összehasonlítót, amely a <xref:System.IComparable>Minden elem végrehajtása.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "Nulla alapú indexét <code> value </code> a rendezett a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, ha <code> value </code> talált; egyéb, negatív szám, amely, a következő elem, amely nagyobb, mint az index bitenkénti azokat <code> value </code> vagy, ha nincs nagyobb elem, <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> bitenkénti kiegészítése"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code>van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> és sem <code>value</code> sem elemei <xref href=&quot;System.Collections.ArrayList&quot;> </xref> valósítja meg a <xref:System.IComparable> felületet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> és <code>value</code> nincs ugyanabba a típusba tartozik, mint elemei a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Számos különböző elemek keresi a rendezett <xref href=&quot;System.Collections.ArrayList&quot;> </xref> elem a megadott összehasonlító használatával, és visszaadja az elemnek nulla alapú indexét."
  remarks: "A összehasonlító testreszabása, hogyan összehasonlítja az elemeket. Használhat például egy <xref:System.Collections.CaseInsensitiveComparer>példányához, azonban nem karakterlánc keresés összehasonlítóval.</xref:System.Collections.CaseInsensitiveComparer>       Ha `comparer` valósul meg, az elemeinek a <xref:System.Collections.ArrayList>összehasonlítja a megadott érték használata a megadott <xref:System.Collections.IComparer>végrehajtása.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Elemei a <xref:System.Collections.ArrayList>már rendezni kell növekvő megfelelően a rendezési sorrend által meghatározott érték `comparer`; ellenkező esetben előfordulhat, hogy helytelen az eredmény.</xref:System.Collections.ArrayList>       Ha `comparer` van `null`, történik, az összehasonlítás használatával a <xref:System.IComparable>megvalósítása a maga az elem, vagy a megadott érték.</xref:System.IComparable> Elemei a <xref:System.Collections.ArrayList>már rendezni kell növekvő megfelelően a rendezési sorrend által meghatározott érték a <xref:System.IComparable>megvalósítási; ellenkező esetben az eredmény helytelen lehet.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Összehasonlításával `null` bármilyen engedélyezett, és nem jelent kivételt, <xref:System.IComparable>.</xref:System.IComparable> használatakor A rendezés során `null` számít, kisebb, mint bármely más objektumot.       Ha a <xref:System.Collections.ArrayList>egynél több elemet tartalmaz ugyanarra az értékre, a metódus csak az eseményeket, és előfordulhat, hogy térjen vissza az eseményeket, nem feltétlenül az elsőt a.</xref:System.Collections.ArrayList>       Ha a <xref:System.Collections.ArrayList>nem tartalmazza a megadott érték, a módszer egy negatív egész számot adja vissza.</xref:System.Collections.ArrayList> A negatív egész szám lekérni az index nagyobb, mint a keresett érték első elem alkalmazhat a bitenkénti komplemens számnak művelet (~). Az érték beszúráskor a <xref:System.Collections.ArrayList>, ezt az indexet a rendezési sorrend fenntartásához kell használható a kurzort.</xref:System.Collections.ArrayList>       Ez a módszer egy O (napló `n`) műveletet, ahol `n` van `count`."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "A keresési tartományt nulla alapú kezdési indexét."
    - id: count
      type: System.Int32
      description: "Keresés a tartomány hosszúsága."
    - id: value
      type: System.Object
      description: "A <xref:System.Object>kereséséhez.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>elemek összehasonlításakor használandó megvalósítási.</xref:System.Collections.IComparer>       – vagy – <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> használni az alapértelmezett összehasonlítót, amely a <xref:System.IComparable>Minden elem végrehajtása.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "Nulla alapú indexét <code> value </code> a rendezett a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, ha <code> value </code> talált; egyéb, negatív szám, amely, a következő elem, amely nagyobb, mint az index bitenkénti azokat <code> value </code> vagy, ha nincs nagyobb elem, <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> bitenkénti kiegészítése"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>és <code>count</code> jelöl az érvényes tartományban a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       – vagy – <code>comparer</code> van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> és sem <code>value</code> sem elemei <xref href=&quot;System.Collections.ArrayList&quot;> </xref> valósítja meg a <xref:System.IComparable> felületet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> és <code>value</code> nincs ugyanabba a típusba tartozik, mint elemei a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>count</code> nullánál kisebb."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi vagy beállítja az elemek száma, amelyek a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tartalmazhat."
  remarks: "Kapacitása elemek száma, amelyek a <xref:System.Collections.ArrayList>tárolhatja.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>elemek, amelyek ténylegesen az <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> száma</xref:System.Collections.ArrayList.Count%2A>       Kapacitása mindig nagyobb vagy egyenlő a <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> Ha <xref:System.Collections.ArrayList.Count%2A>meghaladja a kapacitását elem hozzáadása közben, a kapacitás automatikusan növekszik a belső tömbnek újra-hozzárendelése előtt másolja a régi és az új elemekkel.</xref:System.Collections.ArrayList.Count%2A>       A kapacitás csökkenthetők meghívásával <xref:System.Collections.ArrayList.TrimToSize%2A>vagy explicit módon a kapacitás tulajdonság beállításával.</xref:System.Collections.ArrayList.TrimToSize%2A> A kapacitás értéke explicit módon, ha a belső tömbnek is a megadott kapacitás alkalmazásához újra felhasználni.       Ez a tulajdonság értékének beolvasása során O(1); O a következő tulajdonság beállítása (`n`) műveletet, ahol `n` új kapacitás."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Az elemek száma, amelyek a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tartalmazhat."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Egy érték, amely kisebb, mint <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> kapacitás beállítása"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Nincs elég memória érhető el a rendszer."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Eltávolítja az összes elem a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>van nullára van állítva, és a gyűjtemény elemeinek más objektumokra mutató hivatkozásokat is kiadásakor.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>változatlan marad.</xref:System.Collections.ArrayList.Capacity%2A>  Alaphelyzetbe állítja a kapacitása a <xref:System.Collections.ArrayList>, hívja <xref:System.Collections.ArrayList.TrimToSize%2A>, vagy állítsa be a <xref:System.Collections.ArrayList.Capacity%2A>közvetlenül tulajdonság.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> Egy üres díszítésre <xref:System.Collections.ArrayList>kapacitásának beállítja a <xref:System.Collections.ArrayList>alapértelmezett kapacitással.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sekély másolatot készít a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Egy gyűjtemény sekély másolatát másolja át a gyűjtemény csak azokat az elemeket, hogy-e a referencia típusoknak vagy értéktípusok, de nem másolja át az objektumokat, amely hivatkozik a hivatkozásokat. Az új gyűjtemény szereplő hivatkozások a azonos objektumok, amelyek az eredeti gyűjtemény elemben található hivatkozások mutasson.       Ezzel szemben egy gyűjtemény mély másolatát másolja át az elemeket, és mindent közvetlenül vagy közvetetten hivatkozik az elemeket.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Sekély másolatát a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Meghatározza, hogy egy elem található a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Másolja át a teljes <xref href=&quot;System.Collections.ArrayList&quot;> </xref> egy kompatibilis egydimenziós <xref:System.Array>kezdődően a céltömb elején.</xref:System.Array>"
  remarks: "A megadott tömb egy kompatibilis típusúnak kell lennie.       Ez a módszer <xref:System.Array.Copy%2A?displayProperty=fullName>elemeinek másolásához.</xref:System.Array.Copy%2A?displayProperty=fullName>       Az elemek másolja az <xref:System.Array>ugyanabban a sorrendben, amelyben a számbavevő a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> telepítéseket</xref:System.Array>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "Az egydimenziós <xref:System.Array>átmásolva elem, amely a cél <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> A <xref:System.Array>kell rendelkeznie a nulla alapú indexelést.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>többdimenziós.       – vagy – a forrás elemeinek száma <xref href=&quot;System.Collections.ArrayList&quot;> </xref> elemeinek száma nagyobb, amely a célként megadott <code>array</code> tartalmazhat."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref href=&quot;System.Collections.ArrayList&quot;> </xref> nem konvertálható automatikusan a cél típusa <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Másolja át a teljes <xref href=&quot;System.Collections.ArrayList&quot;> </xref> egy kompatibilis egydimenziós <xref:System.Array>, a megadott index a céltömb induló.</xref:System.Array>"
  remarks: "A megadott tömb egy kompatibilis típusúnak kell lennie.       Ez a módszer <xref:System.Array.Copy%2A?displayProperty=fullName>elemeinek másolásához.</xref:System.Array.Copy%2A?displayProperty=fullName>       Az elemek másolja az <xref:System.Array>ugyanabban a sorrendben, amelyben a számbavevő a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> telepítéseket</xref:System.Array>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Az egydimenziós <xref:System.Array>átmásolva elem, amely a cél <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> A <xref:System.Array>kell rendelkeznie a nulla alapú indexelést.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "A nulla alapú indexét `array` mely másolása megkezdődik."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>kisebb, mint nulla."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>többdimenziós.       – vagy – a forrás elemeinek száma <xref href=&quot;System.Collections.ArrayList&quot;> </xref> nagyobb, mint a rendelkezésre álló terület <code>arrayIndex</code> a cél végére <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref href=&quot;System.Collections.ArrayList&quot;> </xref> nem konvertálható automatikusan a cél típusa <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Számos különböző elemek másolása a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> egy kompatibilis egydimenziós <xref:System.Array>, a megadott index a céltömb induló.</xref:System.Array>"
  remarks: "A megadott tömb egy kompatibilis típusúnak kell lennie.       Ez a módszer <xref:System.Array.Copy%2A?displayProperty=fullName>elemeinek másolásához.</xref:System.Array.Copy%2A?displayProperty=fullName>       Az elemek másolja az <xref:System.Array>ugyanabban a sorrendben, amelyben a számbavevő a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> telepítéseket</xref:System.Array>       Ez a módszer egy O (`n`) műveletet, ahol `n` van `count`."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét a forráshelyen <xref href=&quot;System.Collections.ArrayList&quot;> </xref> mely másolása megkezdődik."
    - id: array
      type: System.Array
      description: "Az egydimenziós <xref:System.Array>átmásolva elem, amely a cél <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> A <xref:System.Array>kell rendelkeznie a nulla alapú indexelést.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "A nulla alapú indexét `array` mely másolása megkezdődik."
    - id: count
      type: System.Int32
      description: "A másolandó elemek száma."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>arrayIndex</code> nullánál kisebb.       – vagy – <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>többdimenziós.       – vagy – <code>index</code> egyenlő vagy nagyobb, mint a <xref:System.Collections.ArrayList.Count*> a forrás <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       – vagy – a forrásgyűjtemény elemeinek száma <code>index</code> a forrás-a befejezési <xref href=&quot;System.Collections.ArrayList&quot;> </xref> nagyobb, mint a rendelkezésre álló terület <code>arrayIndex</code> a cél végére <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref href=&quot;System.Collections.ArrayList&quot;> </xref> nem konvertálható automatikusan a cél típusa <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi a ténylegesen levő elemek száma a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>azon elemek száma, amelyek a <xref:System.Collections.ArrayList>tárolhatja.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Leképezésszáma, amelyek ténylegesen az <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> elemeinek száma       <xref:System.Collections.ArrayList.Capacity%2A>nagyobb vagy egyenlő számnak mindig.</xref:System.Collections.ArrayList.Capacity%2A> Ha a számláló értéke meghaladja a <xref:System.Collections.ArrayList.Capacity%2A>elemek való hozzáadása közben a kapacitás automatikusan növekszik a belső tömbnek újra-hozzárendelése előtt másolja a régi és az új elemekkel.</xref:System.Collections.ArrayList.Capacity%2A>       Ez a tulajdonság értékének beolvasása során O(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "A ténylegesen levő elemek száma a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkoló, rögzített méretű."
  remarks: "A burkoló segítségével kiegészítése és az eredeti <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> törlések megakadályozása Az elemek még mindig módosítani vagy cseréje.       A gyűjtemény rögzített méretű egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a hozzáadása és eltávolítása elemek; Ezért ha módosítás történik az alapul szolgáló gyűjtemény, hozzáadását és eltávolítását, az elem, beleértve a rögzített méretű gyűjtemény tükrözi ezeket a módosításokat.       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkolása."
    return:
      type: System.Collections.ArrayList
      description: "Egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkoló, rögzített méretű."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref:System.Collections.IList>burkoló, rögzített méretű.</xref:System.Collections.IList>"
  remarks: "A burkoló segítségével kiegészítése és az eredeti <xref:System.Collections.IList>.</xref:System.Collections.IList> törlések megakadályozása Az elemek még mindig módosítani vagy cseréje.       A gyűjtemény rögzített méretű egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a hozzáadása és eltávolítása elemek; Ezért ha módosítás történik az alapul szolgáló gyűjtemény, hozzáadását és eltávolítását, az elem, beleértve a rögzített méretű gyűjtemény tükrözi ezeket a módosításokat.       Ez a módszer O(1) során."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "A <xref:System.Collections.IList>burkolása.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Egy <xref:System.Collections.IList>burkoló, rögzített méretű.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adja vissza a teljes enumerátor <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "A `foreach` utasítás a C# nyelv (`for each` a Visual Basic nyelvben) elrejti a enumerálók összetettsége.  Ezért használatával `foreach` ajánlott, az adatbázis közvetlen módosítása az enumerátor helyett.       Enumerálók beolvasni az adatokat a gyűjtemény használható, de nem használható az alapul szolgáló gyűjtemény módosításához.       Kezdetben a számbavevő a gyűjtemény első eleme elé. <xref:System.Collections.IEnumerator.Reset%2A>is jelent a számbavevő vissza az ebben a helyzetben.</xref:System.Collections.IEnumerator.Reset%2A>  Ennél a pozíciónál <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> Ezért meg kell hívnia <xref:System.Collections.IEnumerator.MoveNext%2A>ahhoz, hogy a számbavevő a <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> értékének olvasása előtt a gyűjtemény első eleme</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>az azonos objektumot ad vissza, amíg újra nem indítják <xref:System.Collections.IEnumerator.MoveNext%2A>vagy <xref:System.Collections.IEnumerator.Reset%2A>nevezik.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Beállítja a <xref:System.Collections.IEnumerator.Current%2A>átállítása.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Ha <xref:System.Collections.IEnumerator.MoveNext%2A>gyűjteményének, a számbavevő a gyűjtemény utolsó eleme mögé van elhelyezve fázisok és <xref:System.Collections.IEnumerator.MoveNext%2A>adja vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> A számbavevő ezen a helyen, az ezt követő hívások esetén <xref:System.Collections.IEnumerator.MoveNext%2A>is vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Ha az utolsó irányuló hívás <xref:System.Collections.IEnumerator.MoveNext%2A>visszaadott `false`, <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>Ebben az esetben a gyűjtemény első eleme a hívása <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> követ</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> beállítása       Enumerátor érvényes marad mindaddig, amíg a gyűjtemény változatlan marad. Ha módosítják a gyűjteményhez, hozzáadása, módosítása vagy törlése elemek, például a számbavevő visszavonhatatlanul érvénytelenített és annak viselkedését nincs definiálva.       A számbavevő nem rendelkezik kizárólagos hozzáférése a gyűjteményhez; egy gyűjtemény számbavétele ezért alapvetően nem szálbiztos eljárást.  Szál biztonsági felsorolásakor biztosításához zárolhatja a teljes számbavételi művelet során a gyűjteményben.  A gyűjteményt, amelyben több szál olvasására vagy írására érhető el, hogy meg kell valósítani a saját szinkronizálási.       Ez a módszer O(1) során."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Egy <xref:System.Collections.IEnumerator>a teljes <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Számos különböző elemeinek a számbavevő adja vissza a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "A `foreach` utasítás a C# nyelv (`for each` a Visual C++ `For Each` Visual Basic) elrejti a enumerálók összetettsége.  Ezért használatával `foreach` ajánlott, az adatbázis közvetlen módosítása az enumerátor helyett.       Enumerálók beolvasni az adatokat a gyűjtemény használható, de nem használható az alapul szolgáló gyűjtemény módosításához.       Kezdetben a számbavevő a gyűjtemény első eleme elé. <xref:System.Collections.IEnumerator.Reset%2A>is jelent a számbavevő vissza az ebben a helyzetben.</xref:System.Collections.IEnumerator.Reset%2A>  Ennél a pozíciónál <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> Ezért meg kell hívnia <xref:System.Collections.IEnumerator.MoveNext%2A>ahhoz, hogy a számbavevő a <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> értékének olvasása előtt a gyűjtemény első eleme</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>az azonos objektumot ad vissza, amíg újra nem indítják <xref:System.Collections.IEnumerator.MoveNext%2A>vagy <xref:System.Collections.IEnumerator.Reset%2A>nevezik.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Beállítja a <xref:System.Collections.IEnumerator.Current%2A>átállítása.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Ha <xref:System.Collections.IEnumerator.MoveNext%2A>gyűjteményének, a számbavevő a gyűjtemény utolsó eleme mögé van elhelyezve fázisok és <xref:System.Collections.IEnumerator.MoveNext%2A>adja vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> A számbavevő ezen a helyen, az ezt követő hívások esetén <xref:System.Collections.IEnumerator.MoveNext%2A>is vissza `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Ha az utolsó irányuló hívás <xref:System.Collections.IEnumerator.MoveNext%2A>visszaadott `false`, <xref:System.Collections.IEnumerator.Current%2A>nincs definiálva.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>Ebben az esetben a gyűjtemény első eleme a hívása <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> követ</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> beállítása       Enumerátor érvényes marad mindaddig, amíg a gyűjtemény változatlan marad. Ha módosítják a gyűjteményhez, hozzáadása, módosítása vagy törlése elemek, például a számbavevő visszavonhatatlanul érvénytelenített és annak viselkedését nincs definiálva.       A számbavevő nem rendelkezik kizárólagos hozzáférése a gyűjteményhez; egy gyűjtemény számbavétele ezért alapvetően nem szálbiztos eljárást.  Szál biztonsági felsorolásakor biztosításához zárolhatja a teljes számbavételi művelet során a gyűjteményben.  A gyűjteményt, amelyben több szál olvasására vagy írására érhető el, hogy meg kell valósítani a saját szinkronizálási.       Ez a módszer O(1) során.      ## Verzió kompatibilitási a a .NET-keretrendszer verziók 1.0 és 1.1, a számbavevő a egy <xref:System.Collections.ArrayList>által visszaadott a <xref:System.Collections.ArrayList.Adapter%2A>metódus kezeli a második argumentum egy felső határa helyett a száma.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> Az a [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] a második argumentum megfelelően a rendszer a száma."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "A kezdő nulla alapú indexét a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a számbavevő olvassa el a következő szakasz."
    - id: count
      type: System.Int32
      description: "Az elemek száma a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a számbavevő olvassa el a következő szakasz."
    return:
      type: System.Collections.IEnumerator
      description: "Egy <xref:System.Collections.IEnumerator>elemek a megadott címtartomány a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>és <code>count</code> ne adjon meg egy érvényes tartomány a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> amely jelenti, hogy a forrás elemeinek részhalmazának <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Ez a módszer nem hoz létre az elemek másolatát. Az új <xref:System.Collections.ArrayList>csak a forrásban <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> nézet ablak</xref:System.Collections.ArrayList> Azonban későbbi módosítást a forrás <xref:System.Collections.ArrayList>kell elvégezni a nézet ablakot <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Ha módosításai közvetlenül a forrás <xref:System.Collections.ArrayList>, a nézet ablak <xref:System.Collections.ArrayList>érvénytelenné válik, és bármilyen műveletet ad vissza egy <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index, amely elindítja a tartományon."
    - id: count
      type: System.Int32
      description: "A tartományon lévő elemek száma."
    return:
      type: System.Collections.ArrayList
      description: "Egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> amely jelenti, hogy a forrás elemeinek részhalmazának <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>és <code>count</code> jelöl elemeinek érvényes tartományt a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott keres <xref:System.Object>és visszaadja az első olyan belül a teljes nulla alapú indexét <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "A <xref:System.Collections.ArrayList>előre az első elem kezdő és záró dátum az utolsó elem keres.</xref:System.Collections.ArrayList>       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "A első előfordulása nulla alapú indexét <code> value </code> belül a teljes <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, ha található, ha sikertelen, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott keres <xref:System.Object>és az első olyan elemek közötti tartományba nulla alapú indexét adja vissza a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , amely kiterjeszti a megadott index az utolsó elem.</xref:System.Object>"
  remarks: "A <xref:System.Collections.ArrayList>előre kezdődő keres `startIndex` és az utolsó elem végződik.</xref:System.Collections.ArrayList>       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` elemek száma `startIndex` a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> végéig       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "A keresés nulla alapú kezdési indexét. 0 (nulla) üres lista érvénytelen."
    return:
      type: System.Int32
      description: "A első előfordulása nulla alapú indexét <code> value </code> elemeinek tartományán belül a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , amely kibővíti az <code> startIndex </code> az utolsó elem, ha talált; ellenkező esetben a -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott keres <xref:System.Object>és az első olyan elemek közötti tartományba nulla alapú indexét adja vissza a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , amely a megadott indexpozíciónál elindul, és a megadott számú elemet tartalmaz.</xref:System.Object>"
  remarks: "A <xref:System.Collections.ArrayList>előre kezdődő keres `startIndex` és végű `startIndex` plus `count` mínusz 1, ha `count` nagyobb, mint 0.</xref:System.Collections.ArrayList>       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` van `count`.       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "A keresés nulla alapú kezdési indexét. 0 (nulla) üres lista érvénytelen."
    - id: count
      type: System.Int32
      description: "A Keresés a szakaszban található elemek száma."
    return:
      type: System.Int32
      description: "A első előfordulása nulla alapú indexét <code> value </code> elemek közötti tartományba a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kezdődik, amely <code> startIndex </code> és tartalmaz <code> count </code> elemek, ha talált; ellenkező esetben a száma -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       – vagy – <code>count</code> nullánál kisebb.       – vagy – <code>startIndex</code> és <code>count</code> ne adjon meg egy érvényes szakasz a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Az elem beszúrása a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a megadott indexnél."
  remarks: "<xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       Ha <xref:System.Collections.ArrayList.Count%2A>már megegyezik <xref:System.Collections.ArrayList.Capacity%2A>, a kapacitása a <xref:System.Collections.ArrayList>automatikusan újra-hozzárendelése a belső tömbnek növekszik és a meglévő elemeket történő átmásolása az új tömb az új elem hozzáadása előtt.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Ha `index` egyenlő <xref:System.Collections.ArrayList.Count%2A>, `value` <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> végére kerül</xref:System.Collections.ArrayList.Count%2A>       A gyűjtemények összefüggő elemek például a listája, a kurzor követő elemek áthelyezése lefelé megfeleljen az új elem. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét, amellyel `value` kell beilleszteni."
    - id: value
      type: System.Object
      description: "A <xref:System.Object>lehet beszúrni.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>index</code> nagyobb, mint <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A gyűjtemény elemeinek beszúrása a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a megadott indexnél."
  remarks: "<xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       Ha az új <xref:System.Collections.ArrayList.Count%2A>(az aktuális <xref:System.Collections.ArrayList.Count%2A>plusz a gyűjtemény mérete) lehet nagyobb, mint <xref:System.Collections.ArrayList.Capacity%2A>, a kapacitása a <xref:System.Collections.ArrayList>automatikusan újra-hozzárendelése az új elemek, olyan belső tömbnek növekszik és a meglévő elemeket történő átmásolása az új tömb előtt az új elemek hozzáadásakor.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Ha `index` <xref:System.Collections.ArrayList.Count%2A>, az elemek <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> végére kerülnek</xref:System.Collections.ArrayList.Count%2A> egyenlő       <xref:System.Collections.ICollection>A <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> megőrzi</xref:System.Collections.ICollection> az elemek sorrendje       A gyűjtemények összefüggő elemek például a listája, a kurzor követő elemek áthelyezése lefelé megfeleljen az új elem. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak.       Ez a módszer egy O (`n` + `m`) műveletet, ahol `n` hozzáadandó elemek száma és `m` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú indexét, ahol az új elemek kell beilleszteni."
    - id: c
      type: System.Collections.ICollection
      description: "A <xref:System.Collections.ICollection>elemek beszúrja a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Magát a gyűjteményt nem lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, de elemeket tartalmazhat <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>index</code> nagyobb, mint <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  remarks: "Rögzített méretű gyűjtemény nem teszi lehetővé hozzáadását és eltávolítását, az elem után a gyűjtemény létrejött, de lehetővé teszi a meglévő elemeket módosítása.       A gyűjtemény rögzített méretű egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a hozzáadása és eltávolítása elemek; Ezért ha módosítás történik az alapul szolgáló gyűjtemény, hozzáadását és eltávolítását, az elem, beleértve a rögzített méretű gyűjtemény tükrözi ezeket a módosításokat.       Ez a tulajdonság értékének beolvasása során O(1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rendelkezik egy rögzített méretű; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  remarks: "A csak olvasható gyűjtemény nem teszi lehetővé a hozzáadása, eltávolítása vagy módosítása az elem a gyűjtemény létrehozása után.       A gyűjtemény csak olvasható egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a módosítását a gyűjtemény; Ezért ha az alapul szolgáló gyűjtemény módosításai, a csak olvasható gyűjtemény tükrözi ezeket a módosításokat.       Ez a tulajdonság értékének beolvasása során O(1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható; egyéb, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Egy érték, amely jelzi, hogy hozzáférést lekérdezi a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> van (a többszálú futtatásra) szinkronizálva."
  remarks: "A szál biztonságának szavatolása a <xref:System.Collections.ArrayList>, a burkoló által visszaadott összes műveleteket kell elvégezni a <xref:System.Collections.ArrayList.Synchronized%2A>metódus.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a hozzáférést a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> van (a többszálú futtatásra) szinkronizált; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lekérdezi vagy beállítja az elem a megadott indexnél."
  remarks: "Az elem egy <xref:System.Object>így szükség lehet az eredeti típusába ahhoz, hogy kezelheti azt. a visszaadott érték leadott</xref:System.Object> ad vissza Fontos megjegyezni, hogy <xref:System.Collections.ArrayList>gyűjteménye nem erős típusmegadású.</xref:System.Collections.ArrayList> Egy szigorú típusmegadású helyett lásd: <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601>       <xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       Ez a tulajdonság lehetővé teszi a hozzáférést egy adott elem a gyűjteményben a következő szintaxissal: `myCollection[index]`.       A C# nyelv használ a kulcsszó helyett az Item tulajdonság végrehajtási indexelők meghatározására. Visual Basic elem megvalósítja az alapértelmezett tulajdonság, amely indexelési ugyanezt a funkcionalitást biztosítja.       Ez a tulajdonság értékének beolvasása során O(1); a következő tulajdonság beállítása során is O(1)."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Az elem lekérése vagy beállítása nulla alapú indexét."
    return:
      type: System.Object
      description: "Az elem a megadott indexnél."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>index</code> egyenlőnek vagy annál nagyobb <xref:System.Collections.ArrayList.Count*>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott keres <xref:System.Object>és az utolsó előfordulás belül a teljes nulla alapú indexét adja vissza <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "A <xref:System.Collections.ArrayList>visszafelé az utolsó elem kezdő és záró dátum az első elem keres.</xref:System.Collections.ArrayList>       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "A utolsó előfordulása nulla alapú indexét <code> value </code> a teljes belül a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, ha található, ha sikertelen, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott keres <xref:System.Object>és az utolsó előfordulás elemek közötti tartományba nulla alapú indexét adja vissza a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , amely kibővíti az első elem a megadott index.</xref:System.Object>"
  remarks: "A <xref:System.Collections.ArrayList>értéke a keresett visszafelé kezdődő `startIndex` és az első elem végződik.</xref:System.Collections.ArrayList>       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` kezdetétől elemek száma a <xref:System.Collections.ArrayList>való `startIndex`.</xref:System.Collections.ArrayList>       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Az előző verziókkal való keresés nulla alapú kezdési indexét."
    return:
      type: System.Int32
      description: "A utolsó előfordulása nulla alapú indexét <code> value </code> elemeinek tartományán belül a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , amely kibővíti az első elem az <code> startIndex </code>, ha található, ha sikertelen, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott keres <xref:System.Object>és az utolsó előfordulás elemek közötti tartományba nulla alapú indexét adja vissza a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , amely tartalmazza a megadott számú elemet és akkor ér véget, a megadott indexpozíciónál.</xref:System.Object>"
  remarks: "A <xref:System.Collections.ArrayList>értéke a keresett visszafelé kezdődő `startIndex` és végű `startIndex` mínusz `count` 1, valamint ha `count` nagyobb, mint 0.</xref:System.Collections.ArrayList>       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` van `count`.       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A .NET-keretrendszer 2.0-s verziótól kezdődően ez a módszer a gyűjtemény-objektumokat használ <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>metódusai `item` annak meghatározásához, hogy létezik-e elem.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> A .NET-keretrendszer korábbi verzióiban ez a döntés használatával történt a <xref:System.Object.Equals%2A>és <xref:System.IComparable.CompareTo%2A>módszerek a `item` paraméter a gyűjtemény objektumokon.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>keresik a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Az előző verziókkal való keresés nulla alapú kezdési indexét."
    - id: count
      type: System.Int32
      description: "A Keresés a szakaszban található elemek száma."
    return:
      type: System.Int32
      description: "A utolsó előfordulása nulla alapú indexét <code> value </code> elemeinek tartományán belül a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tartalmazó <code> count </code> elemek és akkor ér véget, a száma, <code> startIndex </code>, ha található, ha sikertelen, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>kívül esik az érvényes indexeit a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       – vagy – <code>count</code> nullánál kisebb.       – vagy – <code>startIndex</code> és <code>count</code> ne adjon meg egy érvényes szakasz a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Visszaadja egy csak olvasható <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkoló."
  remarks: "Minden módosítását megelőzése érdekében `list`, teszi közzé `list` csak a burkoló keresztül.       A gyűjtemény csak olvasható egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a módosítását a gyűjtemény. Ha az alapul szolgáló gyűjtemény módosításai, a csak olvasható gyűjtemény tükrözi ezeket a módosításokat.       Ez a módszer O(1) során."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkolása."
    return:
      type: System.Collections.ArrayList
      description: "A csak olvasható <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csomagolásának <code> list </code>."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Visszaadja egy csak olvasható <xref:System.Collections.IList>burkoló.</xref:System.Collections.IList>"
  remarks: "Minden módosítását megelőzése érdekében `list`, teszi közzé `list` csak a burkoló keresztül.       A gyűjtemény csak olvasható egyszerűen egy gyűjteménybe, és egy burkoló, amely megakadályozza a módosítását a gyűjtemény. Ha az alapul szolgáló gyűjtemény módosításai, a csak olvasható gyűjtemény tükrözi ezeket a módosításokat.       Ez a módszer O(1) során."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "A <xref:System.Collections.IList>burkolása.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "A csak olvasható <xref:System.Collections.IList>csomagolásának <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Eltávolít egy adott objektum első előfordulásának a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Ha a <xref:System.Collections.ArrayList>a megadott objektum nem tartalmaz a <xref:System.Collections.ArrayList>változatlan marad.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Nincs kivétel történt.       Ez a módszer egy lineáris keresést; hajt végre. Ez a módszer ezért O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Ez a módszer egyenlőség <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> meghívásával azt határozza meg.       A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "A <xref:System.Object>eltávolítása a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Eltávolítja a megadott indexpozíciójánál található elem a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Az elem eltávolítása után a gyűjtemény méreténél módosul, értéke pedig a <xref:System.Collections.ArrayList.Count%2A>tulajdonság eggyel csökken.</xref:System.Collections.ArrayList.Count%2A>       A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Az eltávolítandó elem nulla alapú indexét."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>index</code> egyenlőnek vagy annál nagyobb <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Elemek távolít el a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "A szomszédos elemeket, listák, például a gyűjtemények az elemeket, kövesse az eltávolított elem feljebb a vacated helyszíni elfoglalt. Ha a gyűjtemény egy indexelt, áthelyezett elem indexek is frissülnek. Ez a viselkedés nem ahol elemek fogalmilag csoportosítva gyűjtők, például egy kivonattáblát gyűjteményére vonatkoznak.       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "A tartomány az eltávolítandó elem nulla alapú kezdési indexét."
    - id: count
      type: System.Int32
      description: "Eltávolítandó elemek száma."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>és <code>count</code> jelöl elemeinek érvényes tartományt a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> elemek másolatai, a megadott érték."
  remarks: "<xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       Ez a módszer egy O (`n`) műveletet, ahol `n` van `count`."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "A <xref:System.Object>többször az új másolása <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Az érték lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: count
      type: System.Int32
      description: "A szám, ahányszor `value` kell átmásolnia."
    return:
      type: System.Collections.ArrayList
      description: "Egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rendelkező <code> count </code> elemek, amelyek mindegyike példánya száma <code> value </code>."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>kisebb, mint nulla."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A teljes az elemek sorrendje megfordítja <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Ezt a módszert használja <xref:System.Array.Reverse%2A?displayProperty=fullName>fordított sorrendben elem, úgy, hogy az elem <xref:System.Collections.ArrayList>[i] i az index a tartományba helyezi át <xref:System.Collections.ArrayList>[j], ahol j értéke `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A megadott tartomány elemeinek sorrendjét tükrözi."
  remarks: "Ezt a módszert használja <xref:System.Array.Reverse%2A?displayProperty=fullName>fordított sorrendben elem, úgy, hogy az elem <xref:System.Collections.ArrayList>[i] i az index a tartományba helyezi át <xref:System.Collections.ArrayList>[j], ahol j értéke `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Ez a módszer egy O (`n`) műveletet, ahol `n` van `count`."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "A tartomány fordított nulla alapú kezdési indexét."
    - id: count
      type: System.Int32
      description: "A tartomány fordított elemek száma."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>és <code>count</code> jelöl elemeinek érvényes tartományt a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Másolja át egy gyűjtemény elemeinek keresztül való elemeinek a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>elfogadja `null` mint érvényes értéket, és lehetővé teszi a duplikált elemeket.</xref:System.Collections.ArrayList>       <xref:System.Collections.ICollection>A <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> megőrzi</xref:System.Collections.ICollection> az elemek sorrendje       Ez a módszer egy O (`n` + 1) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú <xref href=&quot;System.Collections.ArrayList&quot;> </xref> elemei másolása indításának index `c`."
    - id: c
      type: System.Collections.ICollection
      description: "A <xref:System.Collections.ICollection>elemek másolása a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Magát a gyűjteményt nem lehet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, de elemeket tartalmazhat <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>index</code> plusz lévő elemek száma <code>c</code> nagyobb, mint <xref:System.Collections.ArrayList.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rendezi a teljes elemeinek <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Ez a módszer <xref:System.Array.Sort%2A?displayProperty=fullName>, amely a QuickSort algoritmust használja.</xref:System.Array.Sort%2A?displayProperty=fullName> A QuickSort algoritmus az összehasonlítást láthat rendezés (más néven az instabillá rendezési), ami azt jelenti, hogy egy &quot;kisebb vagy egyenlő, mint&quot; összehasonlító művelet határozza meg, amely két elemet a végső rendezett lista első történjen. Azonban ha azonos két elemet, az eredeti sorrendben elveszhetnek. Ezzel szemben egy stabil rendezési megőrzi az azonos elemek sorrendjét. Egy stabil rendezés végrehajtásához meg kell valósítani egy egyéni <xref:System.Collections.IComparer>felületet a más túlterhelések szemlélteti ezt a módszert használni.</xref:System.Collections.IComparer>       Átlagosan, ez a módszer egy O (`n` napló `n`) műveletet, ahol `n` van <xref:System.Collections.ArrayList.Count%2A>; a legrosszabb esetben egy O (`n`^&2;) művelet.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rendezi a teljes elemeinek <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a megadott összehasonlító használatával."
  remarks: "A rendezési módszer használatát, amely megvalósítja az egyéni összehasonlító rendelkező objektumok listájának rendezéséhez a <xref:System.Collections.IComparer>felületet.</xref:System.Collections.IComparer> Ha a `null` a `comparer`, ezt a módszert használja a <xref:System.IComparable>Minden elem végrehajtása.</xref:System.IComparable> Ebben az esetben meg kell győződnie arról, hogy az objektumok listájában lévő valósítja meg a <xref:System.Collections.IComparer>illesztőfelület vagy kivétel lép fel.</xref:System.Collections.IComparer>       Továbbá használatával a <xref:System.IComparable>megvalósítási azt jelenti, hogy a lista hajt végre egy összehasonlítási rendezés (más néven az instabillá rendezési); Ez azt jelenti, hogy ha két elem azonos, a sorrendjük előfordulhat, hogy nem maradnak meg.</xref:System.IComparable> Ezzel szemben egy stabil rendezési megőrzi az azonos elemek sorrendjét. Egy stabil rendezés végrehajtásához meg kell valósítani egy egyéni <xref:System.Collections.IComparer>felületet.</xref:System.Collections.IComparer>       Átlagosan, ez a módszer egy O (`n` napló `n`) műveletet, ahol `n` van <xref:System.Collections.ArrayList.Count%2A>; a legrosszabb esetben egy O (`n`^&2;) művelet.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>elemek összehasonlításakor használandó megvalósítási.</xref:System.Collections.IComparer>       – vagy – egy null hivatkozás (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> a Visual Basic nyelvben) használata a <xref:System.IComparable>Minden elem végrehajtása.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hiba történt a következő két elem összehasonlítása."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>az átadott <code> comparer </code>, és a lista elemeinek nem valósítja meg a <xref:System.IComparable>.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Számos különböző elemeinek elemeinek rendezi <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a megadott összehasonlító használatával."
  remarks: "Ha `comparer` értéke `null`, ez a módszer hajt végre egy összehasonlítási rendezés (más néven az instabillá rendezési); Ez azt jelenti, hogy ha két elem azonos, a sorrendjük előfordulhat, hogy nem maradnak meg. Ezzel szemben egy stabil rendezési megőrzi az azonos elemek sorrendjét. Egy stabil rendezés végrehajtásához meg kell valósítani egy egyéni <xref:System.Collections.IComparer>felületet.</xref:System.Collections.IComparer>       Átlagosan, ez a módszer egy O (`n` napló `n`) műveletet, ahol `n` van `count`; a legrosszabb esetben O(n^2) művelet."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "A nulla alapú kezdési indexét a rendezni kívánt tartományt."
    - id: count
      type: System.Int32
      description: "A rendezni kívánt tartományt hosszát."
    - id: comparer
      type: System.Collections.IComparer
      description: "A <xref:System.Collections.IComparer>elemek összehasonlításakor használandó megvalósítási.</xref:System.Collections.IComparer>       – vagy – egy null hivatkozás (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> a Visual Basic nyelvben) használata a <xref:System.IComparable>Minden elem végrehajtása.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>kisebb, mint nulla.       – vagy – <code>count</code> nullánál kisebb."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>és <code>count</code> ne adjon meg egy érvényes tartomány a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hiba történt a következő két elem összehasonlítása."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkoló, amely szinkronizálva (többszálú futtatásra)."
  remarks: "A szál biztonságának szavatolása a <xref:System.Collections.ArrayList>, minden műveleteket kell elvégezni a burkoló.</xref:System.Collections.ArrayList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> szinkronizálásához."
    return:
      type: System.Collections.ArrayList
      description: "Egy <xref href=&quot;System.Collections.ArrayList&quot;> </xref> burkoló, amely szinkronizálva (többszálú futtatásra)."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Értéket ad vissza egy <xref:System.Collections.IList>burkoló, amely szinkronizálva (többszálú futtatásra).</xref:System.Collections.IList>"
  remarks: "A szál biztonságának szavatolása a <xref:System.Collections.ArrayList>, minden műveleteket kell elvégezni a burkoló.</xref:System.Collections.ArrayList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "A <xref:System.Collections.IList>szinkronizálásához.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Egy <xref:System.Collections.IList>burkoló, amely szinkronizálva (többszálú futtatásra).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Olyan objektum, amely segítségével való hozzáférés szinkronizálása lekérdezi a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "A szinkronizált verziót hoz létre a <xref:System.Collections.ArrayList>, használja a <xref:System.Collections.ArrayList.Synchronized%2A>metódus.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> Hogy a származtatott osztályok, adja meg a saját szinkronizált verzióját a <xref:System.Collections.ArrayList>a SyncRoot tulajdonság használatával.</xref:System.Collections.ArrayList> A szinkronizálási kódot kell műveleteket a SyncRoot a <xref:System.Collections.ArrayList>, nem közvetlenül a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> a</xref:System.Collections.ArrayList> Ez biztosítja, hogy a gyűjtemények más objektumok származó megfelelő működését. Pontosabban, tart fenn a megfelelő szinkronizálási más szállal, amely előfordulhat, hogy egyidejűleg módosítása a <xref:System.Collections.ArrayList>objektum.</xref:System.Collections.ArrayList>       Egy gyűjtemény számbavétele alapvetően nem szálbiztos eljárást. Még ha egy gyűjtemény szinkronizálása, más szálak továbbra is módosíthatja a gyűjteményhez, amely azt eredményezi, a számbavevő a kivételt jelez. Szál biztonsági garantálja a számbavételi művelet során, a gyűjteményt, a teljes felsorolásakor zárolása vagy más szálak által végrehajtott módosítások eredő kivételeket."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Olyan objektum, amely segítségével való hozzáférés szinkronizálása a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Másolja át a elemei a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> egy új <xref:System.Object>tömb.</xref:System.Object>"
  remarks: "Az elemek kerülnek használatával <xref:System.Array.Copy%2A?displayProperty=fullName>, ez az O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "Egy <xref:System.Object>tömb elemeinek példányait tartalmazó a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Másolja át a elemei a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> egy új tömb a megadott elem típusa."
  remarks: "Az összes objektum az az <xref:System.Collections.ArrayList>objektum konvertálható a <xref:System.Type>megadott a `type` paraméter.</xref:System.Type> </xref:System.Collections.ArrayList>       Az elemek kerülnek használatával <xref:System.Array.Copy%2A?displayProperty=fullName>, ez az O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Az elem <xref:System.Type>létrehozása és elemek másolása a céltömb.</xref:System.Type>"
    return:
      type: System.Array
      description: "A megadott elem típusú elemei példányait tartalmazó tömb a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A forrás típusa <xref href=&quot;System.Collections.ArrayList&quot;> </xref> nem konvertálható automatikusan a megadott típust."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "A kapacitás állítja az elemek tényleges száma a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Ez a módszer használható egy gyűjtemény memória terhet minimalizálhatja új elem megkapja a gyűjteményhez.       Alaphelyzetbe állítja a <xref:System.Collections.ArrayList>hívja meg a kezdeti állapotot, a <xref:System.Collections.ArrayList.Clear%2A>metódus TrimToSize hívása előtt.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> Egy üres díszítésre <xref:System.Collections.ArrayList>kapacitásának beállítja a <xref:System.Collections.ArrayList>alapértelmezett kapacitással.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Ez a módszer egy O (`n`) műveletet, ahol `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Collections.ArrayList&quot;> </xref> csak olvasható.       – vagy – a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> rögzített méretű rendelkezik."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
