### YamlMime:ManagedReference
items:
- uid: System.Security.CodeAccessPermission
  id: CodeAccessPermission
  children:
  - System.Security.CodeAccessPermission.#ctor
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Copy
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  - System.Security.CodeAccessPermission.ToXml
  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission
  fullName: System.Security.CodeAccessPermission
  type: Class
  summary: "Határozza meg az összes kódelérési engedélyeik alapvető szerkezetét."
  remarks: "Kód hozzáférési engedélyeket a verembejárás segítségével győződjön meg arról, hogy a kód összes hívó egy engedélyt kaptak. Ha egy engedély objektum `null`, faxvárólistához ugyanaz, mint egy engedélyobjektumához <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.</xref:System.Security.Permissions.PermissionState?displayProperty=fullName> állapotú       A hívási verem általában jelzi, növekvő, hogy a hívási verem módszereket metódushívások alacsonyabb a hívási veremben.       CodeAccessPermission osztály öröklőknek teljesen megbízhatóvá tesz, a biztonsági infrastruktúra kiterjesztése engedélyekként megfelelő működéséhez meg kell adni. Annak meghatározásához, hogy az öröklőknek teljesen megbízható, CodeAccessPermission kibocsát egy <xref:System.Security.Permissions.SecurityAction>a <xref:System.Security.Permissions.SecurityPermissionFlag>= `true` és <xref:System.Security.Permissions.SecurityPermissionFlag>= `true`.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityAction>"
  example:
  - "The following code example shows a permission derived from the CodeAccessPermission class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/csharp/t-system.security.codeac_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/cpp/t-system.security.codeac_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/visualbasic/t-system.security.codeac_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.#ctor
  id: '#ctor'
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> osztály."
  remarks: "Ez a konstruktor nevezik inicializálása állapota a következő típusban, ha a származtatott osztály egy példánya jön létre. Ez a konstruktor meghívása a származtatott osztály konstruktor konstruktor deklarációjában explicit módon, bár ez általában nincs szükség; a legtöbb compilers – automatikusan hoz létre, a hívást."
  syntax:
    content: protected CodeAccessPermission ();
    parameters: []
  overload: System.Security.CodeAccessPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Assert
  id: Assert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Deklarálja, hogy a hívó kód férhessenek hozzá az erőforrás egy engedély igény szerint ez a módszer behívó kód védi, még akkor is, ha a hívók magasabb a verem nem engedélyt az erőforrás elérésére. Assert hozhat létre biztonsági problémákat."
  remarks: "A hívási verem általában jelzi, növekvő, hogy a hívási verem módszereket metódushívások alacsonyabb a hívási veremben. Assert hívja megakadályozza, hogy egy verembejárás származó alacsonyabb a hívási veremben folytatását be ezt a módszert behívó kód túl a hívási verem. Ezért még akkor is, ha magasabb a hívási veremben hívóknak nem rendelkezik az erőforrások eléréséhez szükséges engedélyekkel, azokat továbbra is keresztül érhető el a kódot, amely meghívja a Ez a módszer a szükséges engedéllyel. Egy helyességi feltétel a következő időponttól érvényes, csak ha Assert behívó kód továbbítja az engedélyt, akkor biztos biztonsági ellenőrzése.       Az Assert hívása nem hatékony, amíg a hívó kód visszatér a hívójához. Lehet, hogy csak egy Assert keret aktív. Egy aktív Assert létezik-e a <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> keret eredmények Assert hívására tett kísérlet Hívás <xref:System.Security.CodeAccessPermission.RevertAssert%2A>vagy <xref:System.Security.CodeAccessPermission.RevertAll%2A>eltávolítása egy aktív Assert.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       ASSERT ignorálja a rendszer nem biztosítani, mert nem lesz sikeres, az engedélyt kér engedélyt. Azonban ha a kód a hívási veremben alacsonyabb <xref:System.Security.CodeAccessPermission.Demand%2A>számára, egy <xref:System.Security.SecurityException>fordul elő, amikor a verembejárás eléri a kódot, amely megpróbáltuk felhívni Assert.</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> Ennek oka a kódot, amely Assert hívása nem rendelkezik az engedéllyel, annak ellenére, hogy megpróbált helyességi feltétel azt.      > [!CAUTION] > Assert hívása eltávolítja a követelmény, hogy a kivételhívási láncban lévő összes kódot engedéllyel kell rendelkezni a megadott erőforrás elérésére, mert azt nyithatják mentése biztonsági problémákat, ha nem megfelelő vagy nem megfelelően használja. Ezért azt használandó nagy körültekintéssel."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A hívó kód nincs <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>.       – vagy – már van egy aktív Assert, a jelenlegi keret."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Copy
  id: Copy
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "A származtatott osztály által megvalósított hoz létre, és egy az aktuális engedélyobjektumához azonos másolatát adja vissza."
  remarks: "Egy engedély objektum egy példányát ugyanazokkal a hozzáférési erőforrások az eredeti engedélyobjektumához meghatalmazottként képviseli."
  example:
  - "The following code example shows an override of the Copy method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/csharp/m-system.security.codeac_0_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/cpp/m-system.security.codeac_0_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/visualbasic/m-system.security.codeac_0_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Az aktuális engedély-objektum egy példányát."
  overload: System.Security.CodeAccessPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Demand
  id: Demand
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Kikényszeríti egy <xref:System.Security.SecurityException>a futási idő Ha magasabb a hívási veremben összes hívó nem kapott az aktuális példány által megadott engedélyt.</xref:System.Security.SecurityException>"
  remarks: "Ez a módszer általában segítségével biztonságos szalagtárak győződjön meg arról, hogy hívóknak engedélye az erőforrás eléréséhez. Például egy fájl osztály egy biztonságos osztálytár meghívja a szükséges az igény szerinti <xref:System.Security.Permissions.FileIOPermission>egy a hívó által a kért művelet végrehajtása előtt.</xref:System.Security.Permissions.FileIOPermission>       Ez a módszer behívó kód engedélyei nem vizsgálják; az ellenőrzés, hogy a kód a közvetlen hívónak kezdődik, és folytatja a verem be. A hívási verem általában jelzi, növekvő, hogy a hívási verem módszereket metódushívások alacsonyabb a hívási veremben. Igény szerint csak akkor, ha nem sikerül <xref:System.Security.SecurityException>következik be.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Egy hívó magasabb a hívási veremben nincs engedélye az az aktuális példány által megadott.       – vagy – a hívási veremben magasabb hívó hívják <xref:System.Security.CodeAccessPermission.Deny*>az aktuális engedély-objektumon.</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Deny
  id: Deny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Megakadályozza, hogy a hívási veremben magasabb hívóknak Ez a módszer az aktuális példány által megadott erőforrás eléréséhez behívó kód használatával."
  remarks: "> [!IMPORTANT]> A Megtagadás metódus teljesen megbízható kód által használandó csak a véletlen hozzáférés elleni védelmének erőforrásokat. Nem lehet megjeleníteni az erőforrások szándékos visszaélés elleni védelméhez nem megbízható kód által. Például ha metódus `A` egy engedély megtagadási állít ki, és ekkor meghívja a metódus `B`, metódus `B` overtly felülírhatja az elutasítás <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A> kiadása A hívott metódus mindig magasabb a veremben. Ezért ha metódus `B` próbál meg hozzáférni védett erőforrásokhoz, a biztonsági rendszer kezdődik, mert az engedélyek ellenőrzése metódus `B` a közvetlen hívónak, és bemutatja, hogyan le annak ellenőrzéséhez, hogy nincs Megtagadás verem vagy <xref:System.Security.CodeAccessPermission.PermitOnly%2A>alacsonyabb a verem.</xref:System.Security.CodeAccessPermission.PermitOnly%2A> Módszer `B`, amely az erőforrás elérésére tett kísérlet lehet állítani a verembejárás azonnal használatával a <xref:System.Security.CodeAccessPermission.Assert%2A>metódus.</xref:System.Security.CodeAccessPermission.Assert%2A> Ebben az esetben a Megtagadás helyezve a verem módszerrel `A` (a hívó metódus) soha nem fel van derítve.       Ez a módszer megakadályozza, hogy a hívóknak magasabb a hívási veremben a védett erőforrásokhoz el ezzel a módszerrel behívó kód az akkor is, ha ezek hívóknak elérésére engedélyt kaptak. A hívási verem általában jelzi, növekvő, hogy a hívási verem módszereket metódushívások alacsonyabb a hívási veremben.       Megtagadás korlátozza a programozói felelőssége, vagy véletlen biztonsági problémák megelőzése, mivel segíti a módszert, amelyet a megtagadott engedélyek által védett erőforrás eléréséhez használt Megtagadás hívásait megelőzése érdekében. Ha egy metódus meghívja a Megtagadás engedélyt, és egy <xref:System.Security.CodeAccessPermission.Demand%2A>az, hogy egy alacsonyabb a hívási veremben a hívó által indított, adott biztonsági ellenőrzés sikertelen lesz, amikor eléri a Megtagadás.</xref:System.Security.CodeAccessPermission.Demand%2A>       Megtagadás hívása nem hatékony, amíg a hívó kód visszatér a hívójához. Lehet, hogy csak egy megtagadási keret aktív. Egy aktív Megtagadás létezik-e a <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> keret eredmények Megtagadás hívására tett kísérlet Hívás <xref:System.Security.CodeAccessPermission.RevertDeny%2A>vagy <xref:System.Security.CodeAccessPermission.RevertAll%2A>eltávolítása egy aktív Megtagadás.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertDeny%2A> Megtagadási ignorálja a rendszer nem biztosítani, mert nem lesz sikeres, az engedélyt kér engedélyt."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Már létezik az aktuális keret egy aktív Megtagadás."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Meghatározza, hogy a megadott <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektum megegyezik a jelenlegi <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>."
  remarks: "További információkért lásd: <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "A <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> való összehasonlításra az aktuális objektum <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a megadott <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektum megegyezik a jelenlegi <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.CodeAccessPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Ha felül van bírálva a származtatott osztály, Rekonstruálja egy biztonsági objektumhoz, az XML-kódolás a megadott állapotú."
  remarks: "Egyéni kód, amely kiterjeszti a biztonsági objektumok kell megvalósítania a <xref:System.Security.CodeAccessPermission.ToXml%2A>és FromXml módszerek, hogy az objektumok biztonsági kódolható.</xref:System.Security.CodeAccessPermission.ToXml%2A>"
  example:
  - "The following code example shows an override of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/csharp/m-system.security.codeac_1_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/cpp/m-system.security.codeac_1_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/visualbasic/m-system.security.codeac_1_1.vb)]"
  syntax:
    content: public abstract void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "Az XML-hozza létre újból a biztonsági objektum használandó kódolás."
  overload: System.Security.CodeAccessPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> elem </code> paraméter nem tartalmaz ugyanolyan típusú, mint a jelenlegi példány példányt XML-kódolás.       – vagy – verziószáma a <code> elem </code> paraméter nem támogatott."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Egy kivonatoló kódot lekérdezi a <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektum, amely lehetővé teszi a kivonatoló algoritmusok és adatok struktúrák, például egy kivonattáblát a használatra."
  remarks: "A kivonatkód ugyanazt az engedélyt két példánya esetén eltérők lehetnek, ezért egy kivonatkód nem használható két összehasonlítandó <xref:System.Security.CodeAccessPermission>objektumok.</xref:System.Security.CodeAccessPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Az aktuális kivonatoló kódot <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektum."
  overload: System.Security.CodeAccessPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "A származtatott osztály által megvalósított hoz létre, és adja vissza, amely az aktuális engedély és a megadott engedéllyel engedély."
  remarks: "Két engedélyek metszetét, amely ismerteti a műveletek mindkét leírják közös engedély. Csak egy igény szerinti mindkét eredeti engedélyt kapott metszetének sikeres lesz."
  example:
  - "The following code example shows an override of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/csharp/m-system.security.codeac_3_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/cpp/m-system.security.codeac_3_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/visualbasic/m-system.security.codeac_3_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Az aktuális engedéllyel rendelkező intersect engedély. Az aktuális engedélyt a azonos típusúnak kell lennie."
    return:
      type: System.Security.IPermission
      description: "Új engedéllyel, amely jelöli az aktuális engedély és a megadott engedélyt. Ez az új engedély <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha metszetének üres."
  overload: System.Security.CodeAccessPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> target </code> paraméter nem <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , és nem ugyanahhoz az osztályhoz tartozik, mint az aktuális engedély példánya."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "A származtatott osztály által megvalósított határozza meg, hogy az aktuális engedély a megadott engedéllyel egy részét."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all overrides of the IsSubsetOf method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState>.  \n  \n-   *X*.IsSubsetOf(*X*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \n  \n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*U*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*N*) returns `false`.  \n  \n-   *N*.IsSubsetOf(*X*) returns `true`.  \n  \n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission."
  example:
  - "The following code example shows an override of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/csharp/m-system.security.codeac_5_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/cpp/m-system.security.codeac_5_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/visualbasic/m-system.security.codeac_5_1.vb)]"
  syntax:
    content: public abstract bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Egy engedély, amely a részhalmaza kapcsolat tesztelése. Ezt az engedélyt az aktuális engedélyt a azonos típusúnak kell lennie."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az aktuális engedély alkészlete a megadott engedéllyel; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.CodeAccessPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A <code> target </code> paraméter nem <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , és nem ugyanabba a típusba tartozik, mint az aktuális engedély."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.PermitOnly
  id: PermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Megakadályozza, hogy magasabb a hívási veremben hívóknak Ez a módszer az aktuális példány a megadott erőforrás kivételével minden erőforrások eléréséhez behívó kód használatával."
  remarks: "> [!IMPORTANT]> A PermitOnly metódus teljesen megbízható kód által használandó csak a véletlen hozzáférés elleni védelmének erőforrásokat. Nem lehet megjeleníteni az erőforrások szándékos visszaélés elleni védelméhez nem megbízható kód által. Például ha metódus `A` állít ki a PermitOnly egy engedélyt, és ekkor meghívja a metódus `B`, metódus `B` overtly felülírhatja a PermitOnly <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A> kiadása A hívott metódus mindig magasabb a veremben. Ezért ha metódus `B` próbál meg hozzáférni védett erőforrásokhoz, a biztonsági rendszer kezdődik, mert az engedélyek ellenőrzése metódus `B` a közvetlen hívónak, és bemutatja, hogyan le annak ellenőrzéséhez, hogy a verem nem <xref:System.Security.CodeAccessPermission.Deny%2A>vagy alacsonyabb a verem PermitOnly.</xref:System.Security.CodeAccessPermission.Deny%2A> Módszer `B`, amely az erőforrás elérésére tett kísérlet lehet állítani a verembejárás azonnal használatával a <xref:System.Security.CodeAccessPermission.Assert%2A>metódus.</xref:System.Security.CodeAccessPermission.Assert%2A> Ebben az esetben a PermitOnly helyezve a verem módszerrel `A` (a hívó metódus) soha nem fel van derítve.       PermitOnly hasonlít <xref:System.Security.CodeAccessPermission.Deny%2A>, abban az is okozhatja, verem bemutatja, hogyan sikertelen lehet, ha más módon járnak.</xref:System.Security.CodeAccessPermission.Deny%2A> A különbség az, hogy <xref:System.Security.CodeAccessPermission.Deny%2A>, akkor a verem engedélyeket ismerteti az sikertelen lesz, de a PermitOnly nem indítják el a verembejárás sikertelen csak engedélyeket adja meg.</xref:System.Security.CodeAccessPermission.Deny%2A>       Ez a metódushívás győződjön meg arról, hogy használható-e a kód csak a megadott erőforrások eléréséhez. A hívás PermitOnly nem hatékony, amíg a hívó kód visszatér a hívójához. Lehet, hogy csak egy PermitOnly keret aktív. Egy aktív PermitOnly létezik-e a <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> keret eredmények PermitOnly hívására tett kísérlet Hívás <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>vagy <xref:System.Security.CodeAccessPermission.RevertAll%2A>eltávolítása egy aktív PermitOnly.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>       PermitOnly nem biztosítani, mert nem lesz sikeres, az engedélyt kér engedélyt figyelmen kívül hagyva. Azonban ha alacsonyabb hívásakor kódot később a verem hívások <xref:System.Security.CodeAccessPermission.Demand%2A>számára, egy <xref:System.Security.SecurityException>fordul elő, amikor a verembejárás eléri a kódot, amely megpróbáltuk felhívni a PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> Ennek az az oka a kódot, amelyeket a PermitOnly nem rendelkezik az engedéllyel, akkor is, ha az engedélyt a PermitOnly meghívta. A hívási verem általában jelzi, növekvő, hogy a hívási verem módszereket metódushívások alacsonyabb a hívási veremben."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.PermitOnly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Már van egy aktív PermitOnly az aktuális keret."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAll
  id: RevertAll
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hatására az összes korábbi felülbírálást el kell távolítani az aktuális keret és már nem érvényes."
  remarks: "Ha nincs felülbírálások (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, vagy <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) az aktuális keret egy <xref:System.ExecutionEngineException>vált ki.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A> </xref:System.Security.CodeAccessPermission.Deny%2A> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAll ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAll*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem korábbi van <> </> *>, <> </> *>, vagy <xref:System.Security.CodeAccessPermission.PermitOnly*>az aktuális keret.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAssert
  id: RevertAssert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Minden korábbi okok <xref:System.Security.CodeAccessPermission.Assert*>el kell távolítani az aktuális keret és már nem érvényes.</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "Ha nincs <xref:System.Security.CodeAccessPermission.Assert%2A>az aktuális keret egy <xref:System.ExecutionEngineException>vált ki.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem korábbi van <xref:System.Security.CodeAccessPermission.Assert*>az aktuális keret.</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertDeny
  id: RevertDeny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Minden korábbi okok <xref:System.Security.CodeAccessPermission.Deny*>el kell távolítani az aktuális keret és már nem érvényes.</xref:System.Security.CodeAccessPermission.Deny*>"
  remarks: "Ha nincs <xref:System.Security.CodeAccessPermission.Deny%2A>az aktuális keret egy <xref:System.ExecutionEngineException>vált ki.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Deny%2A>"
  syntax:
    content: public static void RevertDeny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertDeny*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem korábbi van <xref:System.Security.CodeAccessPermission.Deny*>az aktuális keret.</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  id: RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Minden korábbi okok <xref:System.Security.CodeAccessPermission.PermitOnly*>el kell távolítani az aktuális keret és már nem érvényes.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  remarks: "Ha nincs <xref:System.Security.CodeAccessPermission.PermitOnly%2A>az aktuális keret egy <xref:System.ExecutionEngineException>vált ki.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A>"
  syntax:
    content: public static void RevertPermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertPermitOnly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem korábbi van <xref:System.Security.CodeAccessPermission.PermitOnly*>az aktuális keret.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToString
  id: ToString
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hoz létre, és az aktuális engedély objektum karakterlánc alakot adja vissza."
  remarks: "Ezt a módszert akkor hasznos, ha az engedély megjelenítendő karakterláncként kell megoldani."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Az aktuális engedély objektum karakterlánc-ábrázolása."
  overload: System.Security.CodeAccessPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToXml
  id: ToXml
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Felülbírálja a származtatott osztály, létrehoz egy XML-kódolás az biztonsági objektum és a jelenlegi állapotában."
  remarks: "Egyéni kód, amely kiterjeszti a biztonsági objektumok meg kell valósítania a ToXml és <xref:System.Security.CodeAccessPermission.FromXml%2A>módszerek annak az objektumok biztonsági kódolható.</xref:System.Security.CodeAccessPermission.FromXml%2A>"
  example:
  - "The following code example shows an override of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/csharp/m-system.security.codeac_4_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/cpp/m-system.security.codeac_4_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/visualbasic/m-system.security.codeac_4_1.vb)]"
  syntax:
    content: public abstract System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Az XML-kódolás biztonsági objektum, beleértve a semmilyen állapotra vonatkozó információt."
  overload: System.Security.CodeAccessPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Felülbírálja a származtatott osztály, hoz létre, amely az aktuális engedély és a megadott engedéllyel az Unió engedély."
  remarks: "A Union hívása eredménye jelölt összes műveletet képviselő egy engedély az aktuális engedély és a megadott engedéllyel is. Bármely igény szerint vagy engedélyt kapott az Unió továbbítja."
  example:
  - "The following code example shows an override of the Union method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/csharp/m-system.security.codeac_2_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/cpp/m-system.security.codeac_2_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/visualbasic/m-system.security.codeac_2_1.vb)]"
  syntax:
    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "Az aktuális engedély egyesítenie engedély. Az aktuális engedélyt a azonos típusúnak kell lennie."
    return:
      type: System.Security.IPermission
      description: "Az aktuális engedély és a megadott engedéllyel az Unió jelölő új engedély."
  overload: System.Security.CodeAccessPermission.Union*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>other</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. Ez a módszer csak ezt a szintet, ha a jelenleg támogatott <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.CodeAccessPermission.#ctor
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
- uid: System.Security.CodeAccessPermission.Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
- uid: System.Security.CodeAccessPermission.Copy
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.CodeAccessPermission.Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
- uid: System.Security.CodeAccessPermission.Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.CodeAccessPermission.GetHashCode
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
- uid: System.Security.CodeAccessPermission.PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
- uid: System.Security.CodeAccessPermission.RevertAll
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
- uid: System.Security.CodeAccessPermission.RevertAssert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
- uid: System.Security.CodeAccessPermission.RevertDeny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
- uid: System.Security.CodeAccessPermission.ToString
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.CodeAccessPermission.ToXml
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
- uid: System.Security.CodeAccessPermission.#ctor*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission.CodeAccessPermission
- uid: System.Security.CodeAccessPermission.Assert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert
  nameWithType: CodeAccessPermission.Assert
- uid: System.Security.CodeAccessPermission.Copy*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy
  nameWithType: CodeAccessPermission.Copy
- uid: System.Security.CodeAccessPermission.Demand*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand
  nameWithType: CodeAccessPermission.Demand
- uid: System.Security.CodeAccessPermission.Deny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny
  nameWithType: CodeAccessPermission.Deny
- uid: System.Security.CodeAccessPermission.Equals*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals
  nameWithType: CodeAccessPermission.Equals
- uid: System.Security.CodeAccessPermission.FromXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml
  nameWithType: CodeAccessPermission.FromXml
- uid: System.Security.CodeAccessPermission.GetHashCode*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode
  nameWithType: CodeAccessPermission.GetHashCode
- uid: System.Security.CodeAccessPermission.Intersect*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect
  nameWithType: CodeAccessPermission.Intersect
- uid: System.Security.CodeAccessPermission.IsSubsetOf*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: CodeAccessPermission.IsSubsetOf
- uid: System.Security.CodeAccessPermission.PermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly
  nameWithType: CodeAccessPermission.PermitOnly
- uid: System.Security.CodeAccessPermission.RevertAll*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll
  nameWithType: CodeAccessPermission.RevertAll
- uid: System.Security.CodeAccessPermission.RevertAssert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert
  nameWithType: CodeAccessPermission.RevertAssert
- uid: System.Security.CodeAccessPermission.RevertDeny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny
  nameWithType: CodeAccessPermission.RevertDeny
- uid: System.Security.CodeAccessPermission.RevertPermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly
  nameWithType: CodeAccessPermission.RevertPermitOnly
- uid: System.Security.CodeAccessPermission.ToString*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString
  nameWithType: CodeAccessPermission.ToString
- uid: System.Security.CodeAccessPermission.ToXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml
  nameWithType: CodeAccessPermission.ToXml
- uid: System.Security.CodeAccessPermission.Union*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union
  nameWithType: CodeAccessPermission.Union
