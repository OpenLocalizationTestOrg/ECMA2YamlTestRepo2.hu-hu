### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.SymMethod
  id: SymMethod
  children:
  - System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  - System.Diagnostics.SymbolStore.SymMethod.Dispose
  - System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  - System.Diagnostics.SymbolStore.SymMethod.Finalize
  - System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  - System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetParameters
  - System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.RootScope
  - System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  - System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  - System.Diagnostics.SymbolStore.SymMethod.Token
  langs:
  - csharp
  name: SymMethod
  nameWithType: SymMethod
  fullName: System.Diagnostics.SymbolStore.SymMethod
  type: Class
  summary: "A szimbólum tárolóban metódus jelöli."
  remarks: "A SymMethod osztály csak egy módszer, például a feladatütemezési pontok lexikális hatókörök és paraméterinformáció szimbólumokkal kapcsolatos attribútumait hozzáférést biztosít. Használja a <xref:System.Reflection>osztályok metódus típus kapcsolatos attribútumait elolvasására.</xref:System.Reflection>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SymMethod : System.Diagnostics.SymbolStore.SymMethodBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolMethod
  inheritance:
  - System.Object
  - System.Diagnostics.SymbolStore.SymMethodBase
  implements:
  - System.Diagnostics.SymbolStore.ISymbolMethod
  - System.IDisposable
  inheritedMembers:
  - System.Diagnostics.SymbolStore.SymMethodBase.{dtor}
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)'
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
  type: Constructor
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  syntax:
    content: public SymMethod (System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod);
    parameters:
    - id: pMethod
      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*
      description: "Fel kell venni a párbeszédpanelre."
  overload: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  id: Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Feloldja a jelenlegi példány által használt erőforrások a <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> osztály."
  syntax:
    content: public override sealed void Dispose ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Hívja a <> </> *> és <> </> *> módszerek kijelölése az aktuális példány által használt kezelt és nem kezelt erőforrások a <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> osztály."
  remarks: "Ez a metódus csak a nyilvános hívja <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>és <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A>módszerek; Ez a módszer ne hívja közvetlenül.</xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> </xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>"
  syntax:
    content: protected virtual void Dispose (bool A_0);
    parameters:
    - id: A_0
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a kibocsátási kezelt és nem kezelt erőforrások; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> csak a nem felügyelt erőforrások kijelölése."
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  id: Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Feloldja a nem felügyelt erőforrást és egyéb törlési műveletek előtt elvégzi a <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> szemétgyűjtés által felszabadul."
  remarks: "Ezt a módszert felülbírálja <xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> Alkalmazás kódja nem teheti ezt a módszert; az objektum `Finalize` metódus automatikusan megnyílik, során szemétgyűjtés, kivéve, ha a szemétgyűjtő véglegesítés hívásával le van tiltva a <xref:System.GC.SuppressFinalize%2A>metódus.</xref:System.GC.SuppressFinalize%2A>"
  syntax:
    content: ~SymMethod ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  id: GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Okoz a <xref:System.NotSupportedException>minden esetben.</xref:System.NotSupportedException>"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace
      description: "Okoz a <xref:System.NotSupportedException>minden esetben.</xref:System.NotSupportedException>"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Minden esetben."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Lekérdezi a Microsoft köztes nyelv (MSIL) eltolás: a metódus, amely megfelel a megadott pozíciónál belül."
  syntax:
    content: public virtual int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "A dokumentum, amelynek az eltolás van szükség."
    - id: line
      type: System.Int32
      description: "A sor, amelynek az eltolás van szükség."
    - id: column
      type: System.Int32
      description: "A dokumentum oszlop, amelynek az eltolás van szükség."
    return:
      type: System.Int32
      description: "Az IL-eltolást belül a megadott helyen, a dokumentum aktuális módja."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  id: GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "A paraméterek lekérdezi az aktuális metódus."
  remarks: "A paraméterek vissza a sorrendet, hogy azok a metódus aláírása vannak meghatározva. A visszaadott tömb üres, ha a metódus nem rendelkezik paraméterekkel."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "A jelenlegi metódus paramétereinek tömbje."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Lekérdezi a kezdő és befejező eltolás párokból áll, hogy a Microsoft köztes nyelv (MSIL) tolódnak, hogy egy adott helyen belül ezt a módszert lefedi tartományait tömbjét."
  remarks: "A tömb egész számok formátumban {{Kezdés1, end1}, {Kezdés2 end2}...}, ahol minden párt jelenti egy IL tartományon belül a metódust. Tartományok száma pedig 2 osztva a tömb hossza."
  syntax:
    content: public virtual int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "A dokumentum, amelyekre a IL eltolásnál tartományok kérnek."
    - id: line
      type: System.Int32
      description: "A sor IL eltolásnál tartományok kérnek."
    - id: column
      type: System.Int32
      description: "A dokumentum oszlop, amelyekre IL eltolásnál tartományok kérnek."
    return:
      type: System.Int32[]
      description: "Bájttömb kezdő és záró IL eltolás párokat."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  id: GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "A legtöbb befoglaló lexikális hatókörön belül metódus eltolás megfelelő adja vissza."
  remarks: "Használhatja a <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>történő helyi változó keresések indítása.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Az IL-eltolást belül megkeresheti a metódust."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "A megadott IL-eltolást belül a metódust a befoglaló lexikális hatóköre."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "A feladatütemezési pontok lekérdezi az aktuális metódus, és tárolja az adatokat a megadott tömb."
  remarks: "Adatforrás-fájl helyének és IL eltolás közötti feladatütemezési pontokat használ.  Az IL-eltolást minden sorozatpontok áll, és a kezdő és a sor végén/oszlop megadott forrás fájl régió számok viszonyítva egy <xref:System.Diagnostics.SymbolStore.ISymbolDocument>objektum.</xref:System.Diagnostics.SymbolStore.ISymbolDocument>  Egy adott sorozatpont megfelel egy adott indexű minden tömb egyes elemei. A hívó adjon meg előre lefoglalt tömbök visszaadandó adatok tárolására. Bármely-értékekkel azokban a tömbökben felülíródnak. Használjon <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A>az összes feladatütemezési a pontok számának lekérése, valamint a megfelelő méretű tömbök létrehozására.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> A feladatütemezési pontok eltolás alapján vannak rendezve, és az összes dokumentum a metódusban. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A>Minden tömb mérete ellenőrzi, és a pont adatai mindegyik helyezi.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> Ha a tömb `null`, az adatokat az adott tömb nem ad vissza."
  syntax:
    content: public virtual void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
    parameters:
    - id: offsets
      type: System.Int32[]
      description: "A közbenső nyelvű kód tárolására tömb tolódnak feladatütemezési pontok metódus az elejétől."
    - id: documents
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "Egy tömb, amely tárolja a dokumentumokat, amelyben a feladatütemezési pontok találhatók."
    - id: lines
      type: System.Int32[]
      description: "Egy tömb, amely tárolja a sorokat a dokumentumok, amelynél a feladatütemezési pontok találhatók."
    - id: columns
      type: System.Int32[]
      description: "Egy tömb, amely az oszlopok tárolja a dokumentumok, amelynél a feladatütemezési pontok találhatók."
    - id: endLines
      type: System.Int32[]
      description: "A tömb sorok a dokumentumok, ahol a feladatütemezési end mutat."
    - id: endColumns
      type: System.Int32[]
      description: "A tömb az oszlopok a dokumentumok, ahol a feladatütemezési end mutat."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Okoz a <xref:System.NotSupportedException>minden esetben.</xref:System.NotSupportedException>"
  syntax:
    content: public virtual bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);
    parameters:
    - id: docs
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "Ez a paraméter nem használható."
    - id: lines
      type: System.Int32[]
      description: "Ez a paraméter nem használható."
    - id: columns
      type: System.Int32[]
      description: "Ez a paraméter nem használható."
    return:
      type: System.Boolean
      description: "Okoz a <xref:System.NotSupportedException>minden esetben.</xref:System.NotSupportedException>"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Minden esetben."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  id: RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Lekérdezi az aktuális módszer a legfelső szintű lexikális hatóköre. Ebben a hatókörben elfedi a teljes metódust."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "A legfelső szintű lexikális hatókör, amely a teljes metódus helyezi."
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  id: RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Lekérdezi az aktuális módszer a legfelső szintű lexikális hatóköre. Ebben a hatókörben elfedi a teljes metódust."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "A legfelső szintű lexikális hatókör, amely a teljes metódus helyezi."
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  id: SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Lekérdezi a feladatütemezési pontok számát a metódusban."
  syntax:
    content: public virtual int SequencePointCount { get; }
    return:
      type: System.Int32
      description: "A metódus feladatütemezési pontok számát."
  overload: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  id: Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Lekérdezi a <xref href=&quot;System.Diagnostics.SymbolStore.SymbolToken&quot;> </xref> tartalmazó az aktuális módszer metaadatait."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.SymbolToken Token { get; }
    return:
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "Az aktuális metódus metaadat lexikális eleme."
  overload: System.Diagnostics.SymbolStore.SymMethod.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.SymMethodBase
  isExternal: false
  name: System.Diagnostics.SymbolStore.SymMethodBase
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.ISymbolDocument
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolScope
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolDocument
    name: ISymbolDocument
    nameWithType: ISymbolDocument
    fullName: ISymbolDocument[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod
  nameWithType: SymMethod.SymMethod
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose
  nameWithType: SymMethod.Dispose
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize
  nameWithType: SymMethod.Finalize
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace
  nameWithType: SymMethod.GetNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset
  nameWithType: SymMethod.GetOffset
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters
  nameWithType: SymMethod.GetParameters
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges
  nameWithType: SymMethod.GetRanges
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope
  nameWithType: SymMethod.GetScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints
  nameWithType: SymMethod.GetSequencePoints
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd
  nameWithType: SymMethod.GetSourceStartEnd
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal
  nameWithType: SymMethod.RootScopeInternal
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
