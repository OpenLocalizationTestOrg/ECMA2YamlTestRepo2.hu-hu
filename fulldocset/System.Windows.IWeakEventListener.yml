### YamlMime:ManagedReference
items:
- uid: System.Windows.IWeakEventListener
  id: IWeakEventListener
  children:
  - System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  langs:
  - csharp
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
  type: Interface
  summary: "Esemény figyelő támogatást nyújt az osztályokkal rendelkezik, amelyek a WeakEvent mintát keresztül számít, és egy <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref>."
  remarks: "A <xref:System.Windows.WeakEventManager>(egy kézbesítő) esemény továbbítja meghívásával a <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>osztályok, amelyek megvalósítják az adott csatolón, és, a Kiszolgálókezelőhöz adott figyelőként mert meghívásával metódusa <xref:System.Windows.WeakEventManager>módszerek előzetesen.</xref:System.Windows.WeakEventManager> </xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> </xref:System.Windows.WeakEventManager>       A fő oka a WeakEvent mintát a következő akkor, ha az eseményforrás élettartama egy objektum, amely potenciálisan független a esemény figyelők. Használja a központi esemény terjesztéséhez egy <xref:System.Windows.WeakEventManager>kell lennie a szemétgyűjtési figyelők kezelők gyűjtött (vagy manuális kiürítése) lehetővé teszi, hogy akkor is, ha a forrás objektum élettartama túlnyúlik a figyelők.</xref:System.Windows.WeakEventManager> Ezzel szemben egy normál esemény hookup használatával `+=` , vagy ezzel egyenértékű nyelvspecifikus esemény szintaxis miatt a potenciálisan még csatlakozó forrás ahhoz, hogy a kezelők erős hivatkozást. Így a szemétgyűjtő időben nem figyelő hivatkozásokat.       Egy gyakori helyzet, ahol a forrás és a figyelők közötti kapcsolatokat javasol a minta használata az adatkötések forrásokból származó (update) események kezelésére.       A WeakEvent minta segítségével hallgassa meg, hogy az alkalmazás külső eseményeit. Csak meg kell határoznia egy <xref:System.Windows.WeakEventManager>, adja meg a figyelő viselkedés <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, és használja a <xref:System.Windows.WeakEventManager>csatolni a kezelő hivatkozik helyett `+=`.</xref:System.Windows.WeakEventManager> </xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> </xref:System.Windows.WeakEventManager>"
  syntax:
    content: public interface IWeakEventListener
  implements: []
  platform:
  - net462
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  id: ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  langs:
  - csharp
  name: ReceiveWeakEvent(Type,Object,EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  fullName: System.Windows.IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "A központi eseménykezelője események kap."
  remarks: ''
  example:
  - "The following example implements ReceiveWeakEvent to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown). This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`). The implementation returns `false` if the event received is not one that is expected.  \n  \n [!code-cs[CorePseudocode#IWeakEventListener](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#iweakeventlistener)]\n [!code-vb[CorePseudocode#IWeakEventListener](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#iweakeventlistener)]"
  syntax:
    content: public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);
    parameters:
    - id: managerType
      type: System.Type
      description: "Milyen típusú a <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> a metódus hívása."
    - id: sender
      type: System.Object
      description: "Objektum, amely az esemény származik."
    - id: e
      type: System.EventArgs
      description: "Eseményadatok."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a figyelő az esemény kezeli. Akkor tekinthető hiba által a <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> kezelése, [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] egy figyelőt a következő esemény nem kezeli a figyelő regisztrálása. Függetlenül attól, a metódus visszaadja-e <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Ha kap egy eseményt, amely nem ismeri fel és nem kezeli."
  overload: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent(Type,Object,EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  fullName: System.Windows.IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent
  nameWithType: IWeakEventListener.ReceiveWeakEvent
