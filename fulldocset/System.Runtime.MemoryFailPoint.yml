### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Ellenőrzi, hogy elegendő memória egy művelet végrehajtása előtt. Ez az osztály nem örökölhető."
  remarks: "> [!NOTE]> Ez az osztály a speciális fejlesztési használatra készült.       Memória kaput a MemoryFailPoint osztály példányának létrehozása hoz létre. Memória kaput jelentős mennyiségű memóriát igényel tevékenység kezdeményezése előtt ellenőrzi a szükséges erőforrásokat. Az ellenőrzés sikertelen eredményezi egy <xref:System.InsufficientMemoryException>merültek fel kivételhiba.</xref:System.InsufficientMemoryException> Ez a kivétel megakadályozza, hogy egy folyamat elindul, és erőforráshiány kiküszöbölhetők hibája miatt. Ez lehetővé teszi, hogy Ön miatta a teljesítmény elkerülése érdekében egy <xref:System.OutOfMemoryException>kivétel és e állapot sérülés, amelyek eredménye lehet, hogy hibás a kódban tetszőleges helyen kivétel kezelése.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Ez a típus megvalósítja az <xref:System.IDisposable>felületet.</xref:System.IDisposable> Ha befejezte a típussal, ezért fel kell azt közvetve vagy közvetlenül. Arra, hogy a típus közvetlenül, hívja az <xref:System.IDisposable.Dispose%2A>metódust egy `try` / `catch` blokk.</xref:System.IDisposable.Dispose%2A> Eltávolítása után közvetve, használjon egy nyelvi szerkezet például `using` (a C#) vagy `Using` (a Visual Basic nyelvben). A &quot;Használatával az objektum, amely megvalósítja IDisposable&quot; szakaszában talál további információt a <xref:System.IDisposable>felületet a témakörben.</xref:System.IDisposable>       Kivétel által egy <xref:System.InsufficientMemoryException>kivétel, egy alkalmazás is megkülönböztetni becsült érték, amely egy művelet nem fogják tudni megváltoztatni a részlegesen elkészült művelet, amely lehet sérülése az alkalmazásállapot.</xref:System.InsufficientMemoryException> Ez lehetővé teszi az csökkentse az pesszimista eszkalációs házirend, amely előfordulhat, hogy az aktuális memóriából való <xref:System.AppDomain>vagy a folyamat újrahasznosítását.</xref:System.AppDomain>       MemoryFailPoint ellenőrzi, hogy elegendő memória áll rendelkezésre, és egymást követő virtuáliscím-tartomány érhetők el az összes szemétgyűjtés halommemória, és előfordulhat, hogy növelje a lapozófájl méretét.  MemoryFailPoint lehetővé teszi a hosszú távú rendelkezésre állását a memória a kapu tartama alatt nem garanciát, de hívóknak mindig használjon a <xref:System.Runtime.MemoryFailPoint.Dispose%2A>módszer annak biztosítására, hogy MemoryFailPoint társított erőforrások felszabadítása.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Memória kaput használatához meg kell MemoryFailPoint objektum létrehozása és az itt megadott memória megabájtban (MB), amely a következő művelet kellene használni. Ha elegendő memória nem érhető el, egy <xref:System.InsufficientMemoryException>kivétel történt.</xref:System.InsufficientMemoryException>       A paraméter konstruktorának pozitív egész számnak kell lennie. Negatív értéket kivált egy <xref:System.ArgumentOutOfRangeException>kivétel.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint működnek 16 MB részletességű összegzése. 16 MB-nál kisebb értékeket 16 MB számít, és más értékek a következő legnagyobb több 16 MB tekintendők."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> osztály, adja meg a sikeres végrehajtáshoz szükséges memória mennyiségét."
  remarks: "A munkaelem feldolgozása az alkalmazás által használt memória mennyiségét empirically lehet meghatározni.  Becsléséhez memória az alkalmazás kell feldolgozni a kérelmet, fontolja meg a <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>metódus elérhető előtt és után hívni a metódust, amely feldolgozza a munkaelem meghatározásához.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Tekintse meg a <xref:System.Runtime.MemoryFailPoint>dinamikusan határozza meg, hogy a következő kódrészlet például az osztály a `sizeInMegabytes` paraméter.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "A szükséges memória mérete megabájtban. Ennek egy pozitív számnak kell lennie."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A megadott memóriaméret negatív."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Nincs elegendő memória a kapu védi a kód végrehajtásának megkezdésére."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Feloldja a által használt erőforrások a <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "Dispose hívható, amikor végzett a <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> használatával A Dispose metódus elhagyja a <xref:System.Runtime.MemoryFailPoint>használhatatlan állapotban.</xref:System.Runtime.MemoryFailPoint> Hívása után <xref:System.Runtime.MemoryFailPoint>, fel kell szabadítania mutató összes hivatkozást az <xref:System.Runtime.MemoryFailPoint>, a szemétgyűjtő is visszaszerezni a memória, amely a <xref:System.Runtime.MemoryFailPoint>lett elfoglaló.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> További információkért lásd: [nem felügyelt erőforrások tisztítására](~/add/includes/ajax-current-ext-md.md) és [eldobásakor metódusának](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Mindig hívás eldobásakor az <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> utolsó referenciaként a engedélyezés előtt Ellenkező esetben az erőforrásoknak nem szabadul szemétgyűjtő hívást csak a <xref:System.Runtime.MemoryFailPoint>objektum `Finalize` metódus.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Ellenőrzi, hogy az erőforrások felszabadítását, és egyéb törlési művelet végrehajtása közben a szemétgyűjtő úgy szabadít fel a <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> objektum."
  remarks: "A szemétgyűjtő meghívja a véglegesítő metódust, ha az aktuális objektum véglegesítésre készen áll."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
