### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Lehetővé teszi, hogy egy nem kötelező elvégezni az egyéni hiba például naplózásra feldolgozásakor, és szabályozhatja a hibaüzenetet, a hívónak végrehajtó."
  remarks: "Explicit módon szabályozhatja a az alkalmazás működését, amikor a rendszer kivételt hoz létre, az IErrorHandler illesztőfelülettel, és hozzá kell adnia a <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>tartozó <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>tulajdonság.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler lehetővé teszi, hogy explicit módon szabályozhatja a SOAP-hibát generált, határozza meg, hogy elküldi az ügyfélnek, és a kapcsolódó feladatok végrehajtása, például a naplózás. Hibakezelők hívják a sorrendben, amelyben bekerültek a <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>tulajdonság.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Alkalmazzon a <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>metódus a hibaüzenetet, az ügyfél számára visszaadott szabályozására.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Alkalmazzon a <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metódus hiba kapcsolódó viselkedéshez, beleértve a hiba naplózása, biztosítva ezzel egy sikertelen gyors, az alkalmazás leállítása és így tovább.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Mert a <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>a különböző helyeken vannak nincs garancia végrehajtott kapcsolatos mely szál a a metódus lehívásra kerül a metódus nem hívható.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Nem függ <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metódushívás művelet szálban.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Minden <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>megvalósítások válaszüzenetet küld előtt először nevezzük.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Ha minden <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>megoldások volna hívni, és visszatér, ha `fault` értéke nem`null`, műveleti egyezmény megfelelően az ügyfélnek küldött.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Ha `fault` van `null` összes megvalósítások hívása után a válaszüzenetet vezérli a <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>tulajdonság értéke.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Kivételek összes fordulhat <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>megvalósítások hívják, és a csatornára összevont válaszüzenetet.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Ha a csatorna kivétel történt (például az üzenet szerializálása nehezen) IErrorHandler objektumok értesítést kap. Ebben az esetben Ön továbbra is győződjön meg arról, hogy a fejlesztési környezet ki, és megjeleníti az ilyen kivételek, vagy alkalmazza a nyomkövetés a probléma felderítéséhez. További információ a nyomkövetési: [alkalmazás hibaelhárításához használja követést](~/add/includes/ajax-current-ext-md.md).       A hibaválasz-üzenet elküldése után, az összes <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>megvalósítások nevezzük ugyanabban a sorrendben.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Általában az IErrorHandler megvalósítása hozzáadódik a <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>tulajdonság a szolgáltatás (és az ügyfél kétirányú kommunikáció esetén).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Adhat hozzá az IErrorHandler a futtatási viselkedés megvalósításával (vagy egy <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, vagy <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>objektum) használatával viselkedését programozott módon, a konfigurációs fájlból származó, vagy egy egyéni attribútumnál csatolhat a IErrorHandler és.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Használatával a viselkedés a futtatókörnyezet kapcsolatos további információkért lásd: [konfigurálása és a viselkedés futásidejű kiterjesztése](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Lehetővé teszi, hogy a hiba a hálózattal kapcsolatos feldolgozásból, és visszaad egy értéket, amely jelzi, hogy a kézbesítő megszakítja a munkamenetet, és bizonyos esetekben a példányt a környezetben."
  remarks: "A HandleError metódust valósítja meg a hiba-kapcsolódó viselkedések például hiba jelentkezik, a rendszer értesítést, az alkalmazás, és így tovább, leállítása és ad vissza értéket, amely meghatározza, hogy a kivétel megfelelő kezelését.      > [!NOTE] >, Mert a HandleError metódus nem hívható a különböző helyeken vannak nincs garancia végrehajtott kapcsolatos mely szál a módszer a neve. A művelet szál hívott HandleError módszer nem függ.       Minden <xref:System.ServiceModel.Dispatcher.IErrorHandler>megvalósítások nevezzük.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Alapértelmezés szerint (amikor visszatérési értéke `false`), ha kivétel történik, a kézbesítő bármely munkamenet megszakítása és megszakítja a <xref:System.ServiceModel.InstanceContext>Ha <xref:System.ServiceModel.InstanceContextMode> <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> csakis</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  A kivételt relevánsnak majd nem kezelt és a bármely állapota sérült.       Térjen vissza `true` a HandleError Ez az alapértelmezett viselkedés megelőzése érdekében. Ha bármilyen hiba kezelő azt `true` utasít [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] , hogy a rendszer csökkentett továbbra is használja a sikertelen kérelmek társított állapotát.       Ha nincs hiba kezelő függvény `true` a a HandleError a kivételt relevánsnak metódus nem kezelt és az alapértelmezett válasz vonatkozik, azzal járhat, hogy a megszakított <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>és a munkameneti csatorna vagy a <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>tulajdonság nincs beállítva a <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> ügyfélböngészőkkel csatorna</xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       A `error` paraméter soha nem `null` és lépett fel kivételhiba objektum tartalmazza."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "A kivétel a feldolgozás során."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] nem a munkamenet megszakítása (ha van ilyen) és helyi példány, ha a példány környezet nem <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Létrehozását lehetővé tevő egyéni &lt;xref:System.ServiceModel.FaultException%601&gt; , amely során egy metódus kivételt küld vissza."
  remarks: "Valósítja meg a ProvideFault létrehozni egy egyéni hibaüzenetet küld vissza az ügyfélnek.  A ProvideFault metódus mindig az kivételekhez, amelyek hagyja műveletek, kivéve, ha a WCF-futtatókörnyezet, különösen akkor végzetes kivétel felismeri, és magát a kivétel rethrows hívható meg. Minden ProvideFault megvalósítások volna hívni, amikor a hibaüzenetet küldött-e az ügyfél (Ha `fault` nem -`null`). Ha a `fault` paraméter `null` az alapértelmezett hibaüzenetet küldött az ügyfélnek.      > [!NOTE] > A bejövő üzenet, ami miatt a feldolgozási hiba érhető el ezt a módszert a során a <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>tulajdonság.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] >, Mert a ProvideFault metódus nem hívható a különböző helyeken vannak nincs garancia végrehajtott kapcsolatos mely szál a módszer a neve. A művelet szál hívott ProvideFault módszer nem függ."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "A <xref:System.Exception>objektum szolgáltatás működése során történt.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "Az üzenet SOAP-verziószáma."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "A &lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; objektum, amely az ügyfél vagy a szolgáltatást, abban az esetben, kétirányú küld vissza."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
