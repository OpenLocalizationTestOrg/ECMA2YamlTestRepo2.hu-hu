### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedPhrase
  id: RecognizedPhrase
  children:
  - System.Speech.Recognition.RecognizedPhrase.Confidence
  - System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics
  - System.Speech.Recognition.RecognizedPhrase.Grammar
  - System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  - System.Speech.Recognition.RecognizedPhrase.Homophones
  - System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  - System.Speech.Recognition.RecognizedPhrase.Semantics
  - System.Speech.Recognition.RecognizedPhrase.Text
  - System.Speech.Recognition.RecognizedPhrase.Words
  langs:
  - csharp
  name: RecognizedPhrase
  nameWithType: RecognizedPhrase
  fullName: System.Speech.Recognition.RecognizedPhrase
  type: Class
  summary: "A beszédfelismerés nyelvével, a felismerhető bemeneti kapcsolatos által létrehozott részletes információkat tartalmaz."
  remarks: "Ez az osztály tartalmaz részletes információkat szavak és kifejezések feldolgozott Beszéd felismerés műveletek, beleértve a következőket: - a <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>tulajdonsághivatkozást a <xref:System.Speech.Recognition.Grammar>, hogy a felismerő a bemeneti azonosítására szolgál.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>      -A <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>tulajdonsága tartalmazza a normalizált kifejezés szövege.</xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>      -A <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>tulajdonság hivatkozik a szemantikus információk is található az eredmény.</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> A szemantikus információk is a kulcs neve és a kapcsolódó szemantikai adatok dictionary.      -A <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>tulajdonság egy rendezett gyűjteményét tartalmazza <xref:System.Speech.Recognition.RecognizedWordUnit>, amelyek megfelelnek az egyes objektumok ismeri fel a bemeneti adatok word.</xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Word tárolóegységekhez megjelenítési formátum, lexikális formátumú, és kiejtés vonatkozó információkat tartalmaz a megfelelő szó.      -A <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A>tulajdonság speciális word helyettesítés információkat tartalmaz.</xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A>      -A <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A>és <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A>Tulajdonságok információkkal szolgálnak, amelyek az ugyanazon vagy hasonló kiejtés felismerés helyettesek.</xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> </xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A>      -A értékének a <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>tulajdonság jelöli a fokú biztonságot, a beszédfelismerés nyelvével által hozzárendelt, hogy a felismert kifejezés megegyezik-e a bemeneti.</xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>       A beszédfelismerési felismerési eredmények adja vissza egy <xref:System.Speech.Recognition.RecognitionResult>objektum, amely örökli az RecognizedPhrase.</xref:System.Speech.Recognition.RecognitionResult> A felismerési eredmények <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>tulajdonsága tartalmazza egy rendezett RecognizedPhrase objektumok gyűjteménye, amely egy lehetséges egyezik a bemeneti a felismerő.</xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>"
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=fullName>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=fullName>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event and some of the information associated with the <xref:System.Speech.Recognition.RecognitionResult> object. The <xref:System.Speech.Recognition.RecognitionResult> class derives from the RecognizedPhrase class.  \n  \n```c#  \nvoid SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  // Add event handler code here.  \n  \n  // The following code illustrates some of the information available  \n  // in the recognition result.  \n  Console.WriteLine(\"Recognition result summary:\");  \n  Console.WriteLine(  \n    \"  Recognized phrase: {0}\\n\" +   \n    \"  Confidence score {1}\\n\" +   \n    \"  Grammar used: {2}\\n\",   \n    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  \n  \n  // Display the semantic values in the recognition result.  \n  Console.WriteLine(\"  Semantic results:\");  \n  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  \n  {  \n    Console.WriteLine(\"    The {0} city is {1}\",  \n      child.Key, child.Value.Value ?? \"null\");  \n  }  \n  Console.WriteLine();  \n  \n  // Display information about the words in the recognition result.  \n  Console.WriteLine(\"  Word summary: \");  \n  foreach (RecognizedWordUnit word in e.Result.Words)  \n  {  \n    Console.WriteLine(  \n      \"    Lexical form ({1})\" +  \n      \" Pronunciation ({0})\" +  \n      \" Display form ({2})\",  \n      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  \n  }  \n  \n  // Display information about the audio in the recognition result.  \n  Console.WriteLine(\"  Input audio summary:\\n\" +  \n    \"    Candidate Phrase at:       {0} mSec\\n\" +  \n    \"    Phrase Length:             {1} mSec\\n\" +  \n    \"    Input State Time:          {2}\\n\" +  \n    \"    Input Format:              {3}\\n\",  \n    e.Result.Audio.AudioPosition,  \n    e.Result.Audio.Duration,  \n    e.Result.Audio.StartTime,  \n    e.Result.Audio.Format.EncodingFormat);  \n  \n  // Display information about the alternate recognitions in the recognition result.  \n  Console.WriteLine(\"  Alternate phrase collection:\");  \n  foreach (RecognizedPhrase phrase in e.Result.Alternates)  \n  {  \n    Console.WriteLine(\"    Phrase: \" + phrase.Text);  \n    Console.WriteLine(\"    Confidence score: \" + phrase.Confidence);  \n  }  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{Text}")]

      public class RecognizedPhrase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedPhrase.Confidence
  fullName: System.Speech.Recognition.RecognizedPhrase.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Lekérdezi a felismerő, annak a valószínűségét jelölő által hozzárendelt értéket, amely egy <xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;> </xref> megegyezik a megadott bemeneti."
  remarks: "Pontszámok abban, hogy nem jelzik a abszolút valószínűségét, hogy egy kifejezés megfelelően ismeri-e. Ehelyett a abban, hogy eredmények összehasonlítása a megadott bemeneti több felismerés helyettesek relatív pontosságát egy olyan mechanizmus biztosítása. Ez lehetővé teszi, hogy a legpontosabb felismerés eredményt ad vissza. Például ha egy felismert kifejezés egy megbízhatósági pontszám 0,8, ez nem jelenti, hogy rendelkezik-e egy 80 % esélye, hogy a megfelelő nevet a bemeneti kifejezést.  Ez azt jelenti, hogy a kifejezés nagyobb eséllyel tartják be a megfelelő nevet, mint más eredmények, amelyek lehet abban, hogy a bemeneti pontszámaihoz kisebb, mint a 0,8 értéket kell.       A saját abban, hogy pontszámot nincs értelme használni, ha nincs alternatív eredmények hasonlítani, a felismerési műveletet vagy ugyanazon előző bizonyítványoknak. Az értékeket fogja használni a minősítéséhez alternatív jelölt által eredményül adott kifejezések a <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>tulajdonságának <xref:System.Speech.Recognition.RecognitionResult>objektumok.</xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>       Megbízhatósági értékei relatív és egyedi minden motor számára. Ha két különböző végrehajtót által visszaadott abban, hogy értékek készítéséhez nem hasonlítható össze.       A beszédfelismerés különböző okokból, beleértve a háttérben zavaró tényező, inarticulate beszéd- vagy a nem várt szavak vagy word sorozatok átruházhatja szóbeli bemeneti alacsony abban, hogy pontszámot. Ha az alkalmazás egy <xref:System.Speech.Recognition.SpeechRecognitionEngine>példány, a megbízhatósági szint, mely Beszéd bemeneti van vagy egyike sem módosíthatja a <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>módszerek.</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> A megosztott felismerés során kezeli abban, hogy küszöbértékek <xref:System.Speech.Recognition.SpeechRecognizer>, az adott felhasználói profilhoz társított és a Windows beállításjegyzékben tárolt.</xref:System.Speech.Recognition.SpeechRecognizer> Alkalmazások kell írni tulajdonságait a megosztott felismerés során a beállításjegyzék módosításait.       A <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>tulajdonsága a <xref:System.Speech.Recognition.RecognitionResult>objektum tartalmaz egy rendezett gyűjteménye <xref:System.Speech.Recognition.RecognizedPhrase>objektumok, amelyek egy lehetséges egyezik a bemeneti a felismerő.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> A helyettesek a legalacsonyabb abban, hogy a legnagyobb vannak rendezve."
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=fullName>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=fullName>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event. The example shows information associated with the <xref:System.Speech.Recognition.RecognitionResult> object, some of which is derived from <xref:System.Speech.Recognition.RecognizedPhrase>. The handler displays confidence scores for a recognized phrase as well as for recognition alternates.  \n  \n```c#  \nvoid SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  // Add event handler code here.  \n  \n  // The following code illustrates some of the information available  \n  // in the recognition result.  \n  Console.WriteLine(\"Recognition result summary:\");  \n  Console.WriteLine(  \n    \"  Recognized phrase: {0}\\n\" +   \n    \"  Confidence score {1}\\n\" +   \n    \"  Grammar used: {2}\\n\",   \n    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  \n  \n  // Display the semantic values in the recognition result.  \n  Console.WriteLine(\"  Semantic results:\");  \n  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  \n  {  \n    Console.WriteLine(\"    The {0} city is {1}\",  \n      child.Key, child.Value.Value ?? \"null\");  \n  }  \n  Console.WriteLine();  \n  \n  // Display information about the words in the recognition result.  \n  Console.WriteLine(\"  Word summary: \");  \n  foreach (RecognizedWordUnit word in e.Result.Words)  \n  {  \n    Console.WriteLine(  \n      \"    Lexical form ({1})\" +  \n      \" Pronunciation ({0})\" +  \n      \" Display form ({2})\",  \n      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  \n  }  \n  \n  // Display information about the audio in the recognition result.  \n  Console.WriteLine(\"  Input audio summary:\\n\" +  \n    \"    Candidate Phrase at:       {0} mSec\\n\" +  \n    \"    Phrase Length:             {1} mSec\\n\" +  \n    \"    Input State Time:          {2}\\n\" +  \n    \"    Input Format:              {3}\\n\",  \n    e.Result.Audio.AudioPosition,  \n    e.Result.Audio.Duration,  \n    e.Result.Audio.StartTime,  \n    e.Result.Audio.Format.EncodingFormat);  \n  \n  // Display information about the alternate recognitions in the recognition result.  \n  Console.WriteLine(\"  Alternate phrase collection:\");  \n  foreach (RecognizedPhrase phrase in e.Result.Alternates)  \n  {  \n    Console.WriteLine(\"    Phrase: \" + phrase.Text);  \n    Console.WriteLine(\"    Confidence score: \" + phrase.Confidence);  \n  }  \n}  \n  \n```"
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "A megfelelő felismerését a kifejezés valószínűségét relatív mértékegysége. Értéke 0,0 1.0, az alacsony, magas megbízhatósági, illetve."
  overload: System.Speech.Recognition.RecognizedPhrase.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics
  id: ConstructSmlFromSemantics
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: ConstructSmlFromSemantics()
  nameWithType: RecognizedPhrase.ConstructSmlFromSemantics()
  fullName: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "A szemantikai markup language (SML) dokumentumban a szemantikai adja vissza a <xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;> </xref> objektum."
  remarks: "A szemantikus kódnyelv (SML) kapcsolatos információkért tekintse meg a [szemantikai Markup Language Reference](http://msdn.microsoft.com/en-us/f9d83443-2cac-49bc-a447-210feda62f5d)."
  example:
  - "In the following example, a method returns a string that contains the SML for the semantics of a recognized phrase.  \n  \n```  \nprivate string GetSemanticsSML(RecognizedPhrase result)  \n{  \n  if (result.Semantics.Count > 0)  \n  {  \n    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  \n  }  \n  else  \n  {  \n    return null;  \n  }  \n}  \n```"
  syntax:
    content: public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();
    parameters: []
    return:
      type: System.Xml.XPath.IXPathNavigable
      description: "Egy szemantikáját SML leírását adja eredményül a <xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;> </xref> , egy [XPath](http://msdn.microsoft.com/library/ms256115.aspx) hajózható objektum."
  overload: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Grammar
  id: Grammar
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Grammar
  nameWithType: RecognizedPhrase.Grammar
  fullName: System.Speech.Recognition.RecognizedPhrase.Grammar
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Lekérdezi a <xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref> , amely a beszédfelismerés nyelvével ad vissza a <xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;> </xref>."
  syntax:
    content: public System.Speech.Recognition.Grammar Grammar { get; }
    return:
      type: System.Speech.Recognition.Grammar
      description: "A nyelvtan objektum, amely a bemeneti azonosítására szolgál a beszédfelismerés nyelvével."
  overload: System.Speech.Recognition.RecognizedPhrase.Grammar*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  id: HomophoneGroupId
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: HomophoneGroupId
  nameWithType: RecognizedPhrase.HomophoneGroupId
  fullName: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Az azonosító lekérése a homophone csoport a kifejezést."
  remarks: "A beszédfelismerési összes felismerési helyettesek, amelyek az ugyanazon kiejtés rendel hozzá egy csoport azonosítója. Az egyes másodlagos, amely rendelkezik egy egyedi kiejtés a felismerő homophone csoportot hoz létre. A beszédfelismerés nyelvével minden felismerés művelethez azonosítók új csoportot hoz létre, és az azonosítók nem használható a változatok összehasonlítása külön felismerés műveletek alapján generált.       Például felismerés eredményez, amely a változatok tartalmazott &quot;lámpa&quot;, &quot;a naplóvég&quot; és &quot;ale&quot;, az első két helyettesek több homophone csoportba volna tartozik, és az utolsó másodlagos lenne egy második homophone csoport egy tagja."
  syntax:
    content: public int HomophoneGroupId { get; }
    return:
      type: System.Int32
      description: "A kifejezés a homophone csoportjának azonosítója."
  overload: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Homophones
  id: Homophones
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Homophones
  nameWithType: RecognizedPhrase.Homophones
  fullName: System.Speech.Recognition.RecognizedPhrase.Homophones
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Lekérdezi a felismerés helyettesek, mint a felismert kifejezés azonos kiejtés rendelkező gyűjteménye."
  remarks: "Ezt a tulajdonságot minden más rendelkezik, mint a felismert kifejezés azonos kiejtés felismerés helyettesek adja vissza.       Felismerés eredményez, amely a változatok, &quot;a lámpa&quot; és &quot;a naplóvég&quot; tartalmazott, például az első helyettesítő &quot;lámpa&quot; homophones gyűjteményében tartalmazná a második kifejezés, &quot;a naplóvég&quot;. A második helyettesítő, &quot;a naplóvég&quot; homophones gyűjteményében tartalmazza egyrészt az első &quot;lámpa&quot; kifejezésre."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedPhrase> Homophones { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedPhrase}
      description: "A felismerés helyettesek, mint a felismert kifejezés azonos kiejtés rendelkező írásvédett gyűjteménye."
  overload: System.Speech.Recognition.RecognizedPhrase.Homophones*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  id: ReplacementWordUnits
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: ReplacementWordUnits
  nameWithType: RecognizedPhrase.ReplacementWordUnits
  fullName: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "A szöveg, amelynek része a beszéd-szöveg normalizálási módosult a beszédfelismerés nyelvével információ lekérése."
  remarks: "A beszédfelismerés felismerési folyamat részeként a beszédfelismerés nyelvével Normalizálja a felismerhető bemeneti megjelenítési űrlapot.       Például a szóbeli bemenet, a &quot;erdőtopológia kezelésre öt dolláros&quot; hoz létre a felismerési eredmények ahol a <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>tulajdonsága tartalmazza a szavakat, &quot;20&quot;, &quot;öt&quot; és &quot;dolláros&quot; és a <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>tulajdonsága tartalmazza az &quot;25,00&quot; kifejezésre.</xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Szöveg normalizálási kapcsolatos további információkért tekintse meg az <xref:System.Speech.Recognition.ReplacementText>osztályhoz.</xref:System.Speech.Recognition.ReplacementText>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Speech.Recognition.ReplacementText> ReplacementWordUnits { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Speech.Recognition.ReplacementText}
      description: "A gyűjtemény <xref href=&quot;System.Speech.Recognition.ReplacementText&quot;> </xref> írják le szakaszok, amely a beszédfelismerés nyelvével cserélni, ha azt a felismerhető bemeneti normalizált objektumokat."
  overload: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Semantics
  id: Semantics
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Semantics
  nameWithType: RecognizedPhrase.Semantics
  fullName: System.Speech.Recognition.RecognizedPhrase.Semantics
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "A szemantikus információk is a felismert kifejezés társított lekérdezi."
  remarks: "A beszédfelismerés felismerés nyelvtan Szemantikus információk is tartalmazhatnak. A beszédfelismerési ilyen nyelvtanhoz felismerés eredményt hoz létre, amikor a szemantikus információk is tartalmazhatja a használatát, így a szintaxis és a felismerő bemeneti szabályainak megfelelően. A szemantikus információk is kapcsolatos további információkért lásd: [ismertetése szemantikai eredmények](http://msdn.microsoft.com/en-us/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) és a <xref:System.Speech.Recognition.SemanticResultKey>és <xref:System.Speech.Recognition.SemanticResultValue>osztályok.</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey>"
  example:
  - "The following example defines a method that gets specific semantic information from a recognized phrase. When this method returns, it contains the value for the semantic key, or null if the value was not retrieved. This method checks only for top-level keys. Since the semantic information is contained in a tree of values, lower-level keys must be accessed through the returned semantic value.  \n  \n```  \nstatic bool TryGetSemanticValue(  \n      RecognizedPhrase phrase, string key, out SemanticValue value)  \n{  \n  value = null;  \n  bool found = phrase.Semantics.ContainsKey(key);  \n  if (found)  \n  {  \n    value = phrase.Semantics[key];  \n  }  \n  \n  return found;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.SemanticValue Semantics { get; }
    return:
      type: System.Speech.Recognition.SemanticValue
      description: "A szemantikus információk is társítva vannak a felismert kifejezés."
  overload: System.Speech.Recognition.RecognizedPhrase.Semantics*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedPhrase.Text
  fullName: System.Speech.Recognition.RecognizedPhrase.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Lekérdezi a beszédfelismerési felismerhető bemeneti által generált normalizált szöveg."
  remarks: "A beszédfelismerés felismerési folyamat részeként a beszédfelismerés nyelvével beszéd-szöveg normalizálási megjelenítési formába felismerhető bemeneti hajt végre.       Például a szóbeli bemenet, a &quot;erdőtopológia kezelésre öt dolláros&quot; hoz létre a felismerési eredmények ahol a <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>tulajdonsága tartalmazza a szavakat, &quot;20&quot;, &quot;öt&quot; és &quot;dollár&quot;, és a szöveg tulajdonsága tartalmazza az &quot;25,00&quot; kifejezésre.</xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Szöveg normalizálási kapcsolatos további információkért lásd: <xref:System.Speech.Recognition.ReplacementText>.</xref:System.Speech.Recognition.ReplacementText>"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "A beszédfelismerési felismerhető bemeneti által generált normalizált szöveg."
  overload: System.Speech.Recognition.RecognizedPhrase.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Words
  id: Words
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Words
  nameWithType: RecognizedPhrase.Words
  fullName: System.Speech.Recognition.RecognizedPhrase.Words
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Lekérdezi a szavakat a beszédfelismerési felismerhető bemeneti állítja elő."
  remarks: "Ezt a tulajdonságot a bemeneti a beszédfelismerés nyelvével, az eredmény a felismerő beszéd-szöveg normalizálását előtt által előállított szavakat tartalmaz.       Például a szóbeli bemenet, a &quot;erdőtopológia kezelésre öt dolláros&quot; állít elő, ha a szavakat tulajdonság tartalmazza a szavakat, &quot;20&quot;, &quot;öt&quot; és &quot;dolláros&quot; felismerés eredményt és a <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>tulajdonsága tartalmazza az &quot;25,00&quot; kifejezésre.</xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> Szöveg normalizálási kapcsolatos további információkért lásd: <xref:System.Speech.Recognition.ReplacementText>.</xref:System.Speech.Recognition.ReplacementText>"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedWordUnit> Words { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedWordUnit}
      description: "A gyűjtemény <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> egy beszédfelismerési felismerhető bemeneti által létrehozott objektumok."
  overload: System.Speech.Recognition.RecognizedPhrase.Words*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedPhrase.Confidence
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Confidence
  nameWithType: RecognizedPhrase.Confidence
  fullName: System.Speech.Recognition.RecognizedPhrase.Confidence
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ConstructSmlFromSemantics()
  nameWithType: RecognizedPhrase.ConstructSmlFromSemantics()
  fullName: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics()
- uid: System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: false
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Speech.Recognition.RecognizedPhrase.Grammar
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Grammar
  nameWithType: RecognizedPhrase.Grammar
  fullName: System.Speech.Recognition.RecognizedPhrase.Grammar
- uid: System.Speech.Recognition.Grammar
  parent: System.Speech.Recognition
  isExternal: false
  name: Grammar
  nameWithType: Grammar
  fullName: System.Speech.Recognition.Grammar
- uid: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: HomophoneGroupId
  nameWithType: RecognizedPhrase.HomophoneGroupId
  fullName: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.RecognizedPhrase.Homophones
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Homophones
  nameWithType: RecognizedPhrase.Homophones
  fullName: System.Speech.Recognition.RecognizedPhrase.Homophones
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedPhrase}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<RecognizedPhrase>
  nameWithType: ReadOnlyCollection<RecognizedPhrase>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedPhrase>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Recognition.RecognizedPhrase>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.RecognizedPhrase
    name: RecognizedPhrase
    nameWithType: RecognizedPhrase
    fullName: RecognizedPhrase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ReplacementWordUnits
  nameWithType: RecognizedPhrase.ReplacementWordUnits
  fullName: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
- uid: System.Collections.ObjectModel.Collection{System.Speech.Recognition.ReplacementText}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ReplacementText>
  nameWithType: Collection<ReplacementText>
  fullName: System.Collections.ObjectModel.Collection<System.Speech.Recognition.ReplacementText>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Speech.Recognition.ReplacementText>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.ReplacementText
    name: ReplacementText
    nameWithType: ReplacementText
    fullName: ReplacementText
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.RecognizedPhrase.Semantics
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Semantics
  nameWithType: RecognizedPhrase.Semantics
  fullName: System.Speech.Recognition.RecognizedPhrase.Semantics
- uid: System.Speech.Recognition.SemanticValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticValue
  nameWithType: SemanticValue
  fullName: System.Speech.Recognition.SemanticValue
- uid: System.Speech.Recognition.RecognizedPhrase.Text
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Text
  nameWithType: RecognizedPhrase.Text
  fullName: System.Speech.Recognition.RecognizedPhrase.Text
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.RecognizedPhrase.Words
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Words
  nameWithType: RecognizedPhrase.Words
  fullName: System.Speech.Recognition.RecognizedPhrase.Words
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedWordUnit}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<RecognizedWordUnit>
  nameWithType: ReadOnlyCollection<RecognizedWordUnit>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedWordUnit>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Recognition.RecognizedWordUnit>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.RecognizedWordUnit
    name: RecognizedWordUnit
    nameWithType: RecognizedWordUnit
    fullName: RecognizedWordUnit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.RecognizedPhrase.Confidence*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Confidence
  nameWithType: RecognizedPhrase.Confidence
- uid: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ConstructSmlFromSemantics
  nameWithType: RecognizedPhrase.ConstructSmlFromSemantics
- uid: System.Speech.Recognition.RecognizedPhrase.Grammar*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Grammar
  nameWithType: RecognizedPhrase.Grammar
- uid: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: HomophoneGroupId
  nameWithType: RecognizedPhrase.HomophoneGroupId
- uid: System.Speech.Recognition.RecognizedPhrase.Homophones*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Homophones
  nameWithType: RecognizedPhrase.Homophones
- uid: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ReplacementWordUnits
  nameWithType: RecognizedPhrase.ReplacementWordUnits
- uid: System.Speech.Recognition.RecognizedPhrase.Semantics*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Semantics
  nameWithType: RecognizedPhrase.Semantics
- uid: System.Speech.Recognition.RecognizedPhrase.Text*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Text
  nameWithType: RecognizedPhrase.Text
- uid: System.Speech.Recognition.RecognizedPhrase.Words*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Words
  nameWithType: RecognizedPhrase.Words
