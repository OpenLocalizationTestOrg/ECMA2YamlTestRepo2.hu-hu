### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACRIPEMD160
  id: HMACRIPEMD160
  children:
  - System.Security.Cryptography.HMACRIPEMD160.#ctor
  - System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160
  fullName: System.Security.Cryptography.HMACRIPEMD160
  type: Class
  summary: "A kivonat-alapú üzenethitelesítési kód (HMAC) használatával kiszámítja a <xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;> </xref> kivonatoló függvényt."
  remarks: "HMACRIPEMD160 típus, amely a RIPEMD-160 kivonatoló függvényt értékekből összeállított és használni, mint a kivonat-alapú üzenethitelesítési kód (HMAC) létre kivonatoló kulcsalgoritmus. A HMAC-folyamat egy titkos kulcsot kever az üzenet adataihoz, a kivonatoló függvényt eredményét, a titkos kulccsal rendelkező keveri újra és majd még egyszer alkalmazza a kivonatoló függvényt. A kimeneti kivonat 160 bit hosszúságú.       Egy HMAC használható annak meghatározásához, hogy egy nem biztonságos csatornán keresztül küldött üzenet módosították, feltéve, hogy a küldő és fogadó ugyanazt a titkos kulcsot. A küldő kiszámítja a kivonatot az eredeti adatokkal, és az eredeti adatok, mind a kivonat értéke, egy üzenet küld. A fogadó újraszámítja a kivonat értéke a fogadott üzenethez, és ellenőrzi, hogy a számított HMAC megegyezik-e a továbbított HMAC.       Bármi is módosul az adatokat, vagy a kivonat értéke nem egyezik, eredményez, mert a titkos kulcs ismerete szükséges módosítani az üzenetet, és Reprodukálja a megfelelő kivonat értéke. Ezért ha az eredeti és számított kivonati értékek egyeznek, az üzenet hitelesítése.       HMACRIPEMD160 kulcsok bármilyen méretű fogad, és 160 bites kimenettel kivonatoló sorrend eredményez.       A RIPEMD kivonatoló algoritmus és a követő tevékenységek az Európai érett projekt fejlesztette ki. Az eredeti RIPEMD algoritmus MD4 és MD5 helyett, és később kell erősíteni, és RIPEMD-160 átnevezték. A RIPEMD-160 kivonatoló algoritmus 160 bites üzenetkivonatot értéket eredményez. Az algoritmus tervezők be van jelölve, a nyilvános tartomány."
  example:
  - "The following example shows how to sign a file by using the HMACRIPEMD160 object and then how to verify the file.  \n  \n [!code-vb[HMACRIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_102_1.vb)]\n [!code-cpp[HMACRIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_102_1.cpp)]\n [!code-cs[HMACRIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_102_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACRIPEMD160 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> osztály egy véletlenszerűen generált 64 bájtos kulccsal."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>egy olyan típusú, amely a RIPEMD-160 kivonatoló függvényt értékekből összeállított és használni, mint a kivonat-alapú üzenethitelesítési kód (HMAC) létre kivonatoló kulcsalgoritmus.</xref:System.Security.Cryptography.HMACRIPEMD160> A HMAC-folyamat egy titkos kulcsot kever az üzenet adataihoz, a kivonatoló függvényt eredményét, a titkos kulccsal rendelkező keveri újra és majd még egyszer alkalmazza a kivonatoló függvényt. A kimeneti kivonat 160 bájt hosszúságú.       Ez a konstruktor 64 bájtos, véletlenszerűen létrehozott kulcsot használ."
  syntax:
    content: public HMACRIPEMD160 ();
    parameters: []
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> osztály a megadott kulcs adatokkal."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>egy olyan típusú, amely a RIPEMD-160 kivonatoló függvényt értékekből összeállított és használni, mint a kivonat-alapú üzenethitelesítési kód (HMAC) létre kivonatoló kulcsalgoritmus.</xref:System.Security.Cryptography.HMACRIPEMD160> A HMAC-folyamat egy titkos kulcsot kever az üzenet adataihoz, a kivonatoló függvényt eredményét, a titkos kulccsal rendelkező keveri újra és majd még egyszer alkalmazza a kivonatoló függvényt. A kimeneti kivonat 160 bájt hosszúságú."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.
  syntax:
    content: public HMACRIPEMD160 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "A titkos kulcs <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> titkosítás. A kulcs hossza lehet, de ha több mint 64 bájt hosszú megtörténik annak kivonatolása (használatával SHA-1) egy 64 bájtos kulcs létrehozására. Ezért ajánlott a titkos kulcs mérete 64 bájt."
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160.HMACRIPEMD160
