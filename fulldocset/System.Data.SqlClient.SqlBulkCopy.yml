### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  summary: "Lehetővé teszi a hatékony tömeges betöltés más forrásból származó adatokat tartalmazó SQL Server táblát."
  remarks: "Microsoft SQL Server tartalmaz egy népszerű nevű parancssori segédprogramot **bcp** az adatok áthelyezése egy táblából egy másik, hogy egy kiszolgálón vagy a kiszolgálók között. A SqlBulkCopy osztály lehetővé teszi a felügyelt kód megoldásokat hasonló funkciójú írását. Egyéb módon lehet adatokat betölteni az SQL Server tábla (például a INSERT utasításokhoz), de SqlBulkCopy biztosítja a jelentős teljesítménybeli előnyök felettük.       A SqlBulkCopy osztály használható az adatok írása csak SQL Server-táblákra. Nincs korlátozva az SQL Server; azonban az adatforrás használható bármilyen adatforrást, mindaddig, amíg az adatok tölthetők be a egy <xref:System.Data.DataTable>példányt, vagy olvassa el az olyan <xref:System.Data.IDataReader>példány.</xref:System.Data.IDataReader> </xref:System.Data.DataTable>       SqlBulkCopy sikertelen lesz, ha a tömeges betöltés egy <xref:System.Data.DataTable>típusú oszlop <xref:System.Data.SqlTypes.SqlDateTime>egy SQL-kiszolgálóra való oszlop, amelynek típusa a dátum/idő típusú hozzáadni az SQL Server 2008.</xref:System.Data.SqlTypes.SqlDateTime> </xref:System.Data.DataTable>"
  example:
  - "The following console application demonstrates how to load data using the SqlBulkCopy class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/t-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> osztály használatával megadott megnyitott várólistapéldány <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: "Mivel a kapcsolat már meg nyitva mikor a <xref:System.Data.SqlClient.SqlBulkCopy>példányának inicializálása, a kapcsolat megnyitása után továbbra is a <xref:System.Data.SqlClient.SqlBulkCopy>példány le van zárva.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Ha a `connection` argumentum értéke null, egy <xref:System.ArgumentNullException>vált ki.</xref:System.ArgumentNullException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/759c1349-38f0-4ca1-9e42-_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/759c1349-38f0-4ca1-9e42-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "A már meg van nyitva <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> a tömeges másolási művelet végrehajtására használt példány. Ha nem használja a kapcsolati karakterlánc <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, használhat <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> felelt meg a felhasználói Azonosítót és jelszót a biztonságosabb, mint a felhasználói azonosító és jelszó megadásával szövegként a kapcsolati karakterláncban."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Inicializálja, és megnyílik egy új példányát <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> a megadott alapján <code> connectionString </code>. A konstruktor használja a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> új példányának inicializálása a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> osztály."
  remarks: "A tömeges másolási művelet végén automatikusan lezárta a kapcsolatot.       Ha `connectionString` értéke null, egy <xref:System.ArgumentNullException>vált ki.</xref:System.ArgumentNullException> Ha `connectionString` üres karakterlánc, egy <xref:System.ArgumentException>vált ki.</xref:System.ArgumentException>"
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "A karakterlánc, amely meghatározza a kapcsolat által használható megnyitott a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> példány. Ha nem használja a kapcsolati karakterlánc <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, használhat &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; vagy &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; és <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> felelt meg a felhasználói Azonosítót és jelszót a biztonságosabb, mint a felhasználói azonosító és jelszó megadásával szövegként a kapcsolati karakterláncban."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Inicializálja, és megnyílik egy új példányát <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> a megadott alapján <code> connectionString </code>. A konstruktor használ, amely <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> új példányának inicializálása a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> osztály. A <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> példány viselkedik-e a megadott beállításoknak megfelelően a <code> copyOptions </code> paraméter."
  remarks: "Ezt úgy szerezheti be az összes tömeges másolási beállításokkal kapcsolatos részletes információk a <xref:System.Data.SqlClient.SqlBulkCopyOptions>témakörre.</xref:System.Data.SqlClient.SqlBulkCopyOptions>"
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/csharp/9a723f0e-d2b0-40de-a13f-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/visualbasic/9a723f0e-d2b0-40de-a13f-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: "A karakterlánc, amely meghatározza a kapcsolat által használható megnyitott a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> példány. Ha nem használja a kapcsolati karakterlánc <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, használhat &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; vagy &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; és <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> felelt meg a felhasználói Azonosítót és jelszót a biztonságosabb, mint a felhasználói azonosító és jelszó megadásával szövegként a kapcsolati karakterláncban."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "Az érték kombinációja a <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> határozza meg, hogy mely adatok Forrássorok kerülnek a célként megadott táblája enumerálása."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> osztály használata a megadott meglévő megnyitott várólistapéldány <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>. A <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> példány viselkedik-e a megadott beállításoknak megfelelően a <code> copyOptions </code> paraméter. Ha egy nem null értékű <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> van megadva, a másolási műveletek történik, hogy a tranzakción belül."
  remarks: "Ha a választható lehetőségek `UseInternalTransaction` és a `externalTransaction` argumentum értéke nem null, egy **InvalidArgumentException** vált ki.       A példa bemutatja, hogyan lehet használni `SqlBulkCopy` tranzakcióban, lásd: [tranzakció és a tömeges másolási műveletek](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "A már meg van nyitva <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -példányt, a tömeges másolás végrehajtásához használható. Ha nem használja a kapcsolati karakterlánc <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, használhat <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> felelt meg a felhasználói Azonosítót és jelszót a biztonságosabb, mint a felhasználói azonosító és jelszó megadásával szövegként a kapcsolati karakterláncban."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "Az érték kombinációja a <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> határozza meg, hogy mely adatok Forrássorok kerülnek a célként megadott táblája enumerálása."
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: "Egy meglévő <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> példány alatt tömeges másolás történik."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Az egyes kötegekben sorok száma. Egy köteg végén a sorokat a kötegben a rendszer kiszolgálóra küldi."
  remarks: "A kötegelt kész, amikor BatchSize sorok dolgozott, vagy nincsenek a célként megadott adatforráshoz küldendő további sorok.       Nulla (alapértelmezett) azt jelzi, hogy minden egyes <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>művelet egy tételt.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Ha a <xref:System.Data.SqlClient.SqlBulkCopy>példány nélkül deklaráltak a <xref:System.Data.SqlClient.SqlBulkCopyOptions>beállítás érvényben van sorok a kiszolgáló BatchSize sorok egyszerre küldött, de nincs tranzakciókkal kapcsolatos műveletet.</xref:System.Data.SqlClient.SqlBulkCopyOptions> </xref:System.Data.SqlClient.SqlBulkCopy> Ha <xref:System.Data.SqlClient.SqlBulkCopyOptions>érvényben, minden egyes-sorok kötegét egészül ki egy külön tranzakcióban.</xref:System.Data.SqlClient.SqlBulkCopyOptions>       A BatchSize tulajdonság bármikor állítható be. A tömeges másolási már folyamatban van, ha az aktuális köteg mérete alapján az előző köteg mérete. További kötegek használja új méretét. Ha a BatchSize kezdetben nulla és során módosított egy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>művelet már folyamatban van, az, hogy a művelet betölti az adatok egy kötegben.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Minden további <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>ugyanazon műveletek <xref:System.Data.SqlClient.SqlBulkCopy>példánynak használnia az új BatchSize.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>"
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see [Transaction and Bulk Copy Operations](~/add/includes/ajax-current-ext-md.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/csharp/p-system.data.sqlclient._2_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._2_1.vb)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: "Az egész számú értékét a BatchSize tulajdonság, vagy nulla, ha nincs érték van beállítva."
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "A művelet befejezését, mielőtt azt az időkorlátot másodpercben száma."
  remarks: "Ha a művelet időtúllépés, a tranzakció nincs véglegesítve, és minden másolt sor el lesznek távolítva a célként megadott táblája."
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/add/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._14_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: "Az egész szám, a BulkCopyTimeout tulajdonság. Az alapértelmezett érték 30 másodperc. A 0 érték azt jelzi, nincs korlátozás; a tömeges másolási várakozik."
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Bezárja a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> példány."
  remarks: "Miután lezárása hívható meg a <xref:System.Data.SqlClient.SqlBulkCopy>objektum nincs a művelet sikeres lesz.</xref:System.Data.SqlClient.SqlBulkCopy> A <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>metódus egy <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> kivételhibát</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> hívások       A Close metódus hívása a <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>esemény egy <xref:System.InvalidOperationException>jelezni, hogy.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>       Vegye figyelembe, hogy nyílt <xref:System.Data.SqlClient.SqlBulkCopy>példányok be van zárva, amely implicit módon végén egy `using` blokk.</xref:System.Data.SqlClient.SqlBulkCopy>"
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._43_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/csharp/m-system.data.sqlclient._43_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gyűjteményének beolvasása az <xref href=&quot;System.Data.SqlClient.SqlBulkCopyColumnMapping&quot;> </xref> elemeket. Oszlop-hozzárendelések a cél határozza meg az adatforrás és oszlopok közötti kapcsolatokat."
  remarks: "Ha az adatforrás és a céltábla rendelkezik azonos számú oszlopot, és a helyen belül az adatforrás minden forrásoszlop megegyezik a megfelelő céloszlop helyen, a ColumnMappings gyűjtemény nem szükséges. Azonban ha az oszlop számát térnek el egymástól, vagy nincsenek összhangban a sorszámmal, kell használnia ColumnMappings győződjön meg arról, hogy a rendszer átmásolja az adatokat a megfelelő oszlopra.       A tömeges másolási műveletek végrehajtása során ez a gyűjtemény is elérhetők, de nem módosítható. Bármilyen módosításhoz kísérlet kivételhibát <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: "Oszlop-hozzárendelések gyűjteménye. Alapértelmezés szerint üres gyűjtemény esetén."
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "A célként megadott táblája a kiszolgáló neve."
  remarks: "Ha a DestinationTableName nincs megadva mikor <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>nevezik, egy <xref:System.ArgumentNullException>vált ki.</xref:System.ArgumentNullException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Ha DestinationTableName módosítása során egy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>művelet fut, a változás nincs hatással az aktuális művelet.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Az új DestinationTableName értéket használja a következő alkalommal a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>metódust.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       DestinationTableName egy háromrészes név (`<database>.<owningschema>.<name>`). Az adatbázis és a tulajdonos séma a tábla neve is csak akkor, ha úgy dönt. Azonban ha a tábla neve az aláhúzás (&quot;_&quot;) vagy a különleges karaktereket használ, meg kell escape-karakterekkel a nevét és a környező zárójelek közé (`[<database>.<owningschema>.<name_01>]`). További információkért tekintse meg az SQL Server Online könyvek &quot;azonosítók&quot;.       Tömeges másolási adatok ideiglenes táblájába érték használatával is `tempdb..#table` vagy `tempdb.<owner>.#table` a a DestinationTableName tulajdonságot."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/csharp/p-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: "A DestinationTableName tulajdonságot, vagy null karakterlánc értékét none szerint lett megadva."
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Engedélyezheti vagy letilthatja a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> adatait adatfolyam-objektum egy <xref href=&quot;System.Data.IDataReader&quot;> </xref> objektum"
  remarks: "Ha EnableStreaming van `true`, <xref:System.Data.SqlClient.SqlBulkCopy>olvassa be az egy <xref:System.Data.IDataReader>objektumba <xref:System.Data.CommandBehavior>, használatával memóriahasználatát optimalizálása a <xref:System.Data.IDataReader>képességek streaming.</xref:System.Data.IDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy> Ha ezt a beállítást hamis, a <xref:System.Data.SqlClient.SqlBulkCopy>osztály által visszaadott összes adatot tölt be a <xref:System.Data.IDataReader>a memóriába való elküldés előtt objektum [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] vagy az SQL Azure.</xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha egy <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum is adatfolyam-adatokat egy <xref href=&quot;System.Data.IDataReader&quot;> </xref> ; objektum esetén pedig false. Az alapértelmezett érték <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Határozza meg egy értesítési esemény létrehozása előtt feldolgozandó sorok száma."
  remarks: "Ez a tulajdonság a felhasználói felület összetevők, amelyek bemutatják a tömeges másolási művelet előrehaladását szolgál. Azt jelzi, hogy egy értesítési esemény létrehozása előtt feldolgozandó sorok száma. A NotifyAfter tulajdonság állítható bármikor, még akkor is, amíg a tömeges másolási műveletek feldolgozása folyamatban van. A tömeges másolási műveletek során végrehajtott módosítások érvénybe lépéséhez a következő értesítés után. Az új beállítás azonos példányon lévő minden műveleti vonatkozik.       Ha több NotifyAfter értéke kisebb, mint nulla, egy <xref:System.ArgumentOutOfRangeException>vált ki.</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._11_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/p-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: "A NotifyAfter tulajdonság, vagy nulla, ha a tulajdonság nincs megadva az egész szám."
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Akkor következik be, minden egyes megadott sorok száma a <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>tulajdonság dolgozott.</xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>"
  remarks: "Vegye figyelembe, hogy a beállítások <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>és <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>független.</xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> </xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Az egy SqlRowsCopied esemény fogadását nem feltétlenül jelenti azt, hogy a sorokat a kiszolgálónak küldött vagy véglegesítve lett.       Nem hívható meg SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) vagy SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) az ezt az eseményt.</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Ez azt eredményezi, ezzel egy <xref:System.InvalidOperationException>merültek fel, és a <xref:System.Data.SqlClient.SqlBulkCopy>objektum állapota nem változik.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.InvalidOperationException> Ha megszakítja a műveletet az esemény azt a <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>tulajdonsága a <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>is használható.</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> </xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> (Lásd: [tranzakció és a tömeges másolási műveletek](~/add/includes/ajax-current-ext-md.md) példák, amelyek használják a <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>tulajdonságot.)</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>       Nincs művelet, például a tranzakciós tevékenység, támogatott a tömeges másolási művelet végrehajtása közben a kapcsolaton, és javasolt, hogy nem használhatja ugyanazt a kapcsolatot a SqlRowsCopied esemény során használt. Azonban úgy is megnyithatja egy másik kapcsolat."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._2_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/e-system.data.sqlclient._2_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Feloldja a jelenlegi példány által használt erőforrások a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> osztály."
  remarks: "Hívás `Dispose` amikor elkészült, a <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> használatával A `Dispose` metódus leaves a <xref:System.Data.SqlClient.SqlBulkCopy>használhatatlan állapotban.</xref:System.Data.SqlClient.SqlBulkCopy> Hívása után `Dispose`, fel kell szabadítania mutató összes hivatkozást az <xref:System.Data.SqlClient.SqlBulkCopy>, a szemétgyűjtő is visszaszerezni a memória, amely a <xref:System.Data.SqlClient.SqlBulkCopy>volt elfoglaló.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       További információkért lásd: [nem felügyelt erőforrások tisztítására](~/add/includes/ajax-current-ext-md.md) és [eldobásakor metódusának](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Mindig hívás `Dispose` az <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> utolsó referenciaként a engedélyezés előtt Ellenkező esetben az erőforrásoknak nem szabadul szemétgyűjtő hívást csak a <xref:System.Data.SqlClient.SqlBulkCopy>objektum `Finalize` metódus.</xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Másolja át a megadott összes sort <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> a céltábla által meghatározott tömbben az <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Másolja át a megadott összes sort <xref href=&quot;System.Data.DataRow&quot;> </xref> a céltábla által meghatározott tömbben az <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Amíg a tömeges másolási művelet van folyamatban, a társított cél <xref:System.Data.SqlClient.SqlConnection>foglalt szolgál, és nincsenek egyéb műveletek hajtható végre a kapcsolat.</xref:System.Data.SqlClient.SqlConnection>       A <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>gyűjtése a maps a <xref:System.Data.DataRow>a céltábla adatbázis egy oszlopot.</xref:System.Data.DataRow> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/csharp/m-system.data.sqlclient._3_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "A tömb <xref href=&quot;System.Data.DataRow&quot;> </xref> objektumok, amelyet a rendszer a célként megadott táblája."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Átmásolja a terjesztendő összes sort a megadott <xref href=&quot;System.Data.DataTable&quot;> </xref> a céltáblába, amelyet a <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>tulajdonsága az <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Az összes sort a <xref:System.Data.DataTable>kivéve azokat, hogy törölték a célként megadott táblája kerülnek.</xref:System.Data.DataTable>       Amíg a tömeges másolási művelet van folyamatban, a társított cél <xref:System.Data.SqlClient.SqlConnection>foglalt szolgál, és nincsenek egyéb műveletek hajtható végre a kapcsolat.</xref:System.Data.SqlClient.SqlConnection>       A <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>gyűjtemény leképezi a a <xref:System.Data.DataTable>oszlopok adatbázis céltábla.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/csharp/m-system.data.sqlclient._16_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._16_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Átmásolja a terjesztendő összes sort a megadott <xref href=&quot;System.Data.IDataReader&quot;> </xref> a céltáblába, amelyet a <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>tulajdonsága az <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "A másolási művelet indítása a következő rendelkezésre álló sort az olvasó. Az esetek többségében az olvasó csak által visszaadott <xref:System.Data.IDbCommand.ExecuteReader%2A>vagy hasonló hívás, így a következő elérhető sor első sorában.</xref:System.Data.IDbCommand.ExecuteReader%2A> Több eredmény feldolgozása, hívja meg a <xref:System.Data.IDataReader.NextResult%2A>Adatolvasó és újra WriteToServer hívás.</xref:System.Data.IDataReader.NextResult%2A>       Vegye figyelembe, hogy az olvasó állapota WriteToServer használatával módosítja. A metódus hívni fogja <xref:System.Data.IDataReader.Read%2A>hamis értéket ad vissza, a művelet végrehajtása megszakadt, vagy a hiba akkor fordul elő.</xref:System.Data.IDataReader.Read%2A> Ez azt jelenti, hogy az Adatolvasó állapotban lesz egy másik, valószínűleg az eredménykészlet végén a WriteToServer művelet befejezésekor.       Amíg a tömeges másolási művelet van folyamatban, a társított cél <xref:System.Data.SqlClient.SqlConnection>foglalt szolgál, és nincsenek egyéb műveletek hajtható végre a kapcsolat.</xref:System.Data.SqlClient.SqlConnection>       A <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>gyűjtemény van leképezve az adatokból olvasó oszlopok adatbázis céltábla.</xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._35_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._35_1.cs)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Másolja át a csak a megadott a megadott sor állapotnak megfelelő sorok <xref href=&quot;System.Data.DataTable&quot;> </xref> a céltáblába, amelyet a <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Csak sort a <xref:System.Data.DataTable>, amelyek szerepelnek a állapotban a `rowState` argumentum nem törölték és kerülnek céltábla.</xref:System.Data.DataTable>      > [!NOTE] > Ha <xref:System.Data.DataRowState>meg van adva, a <xref:System.Data.DataRowState>, <xref:System.Data.DataRowState>, és <xref:System.Data.DataRowState>sort is kell a kiszolgálóra történő átmásolása.</xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> Nincs kivétel generál.       Amíg a tömeges másolási művelet van folyamatban, a társított cél <xref:System.Data.SqlClient.SqlConnection>foglalt szolgál, és nincsenek egyéb műveletek hajtható végre a kapcsolat.</xref:System.Data.SqlClient.SqlConnection>       A <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>gyűjtemény leképezi a a <xref:System.Data.DataTable>oszlopok adatbázis céltábla.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a `DataRowState.Unchanged``rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/csharp/65bb2b63-7c25-4470-9a90-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/visualbasic/65bb2b63-7c25-4470-9a90-_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    - id: rowState
      type: System.Data.DataRowState
      description: "Egy értéket a <xref href=&quot;System.Data.DataRowState&quot;> </xref> enumerálása. A cél csak a sor állapota megfelelő sorok lesz másolva."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aszinkron verzióját <> </> *>, amely átmásolja az összes sort a megadott <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> tömb a megadott céltáblába a <> </> *> tulajdonsága az <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aszinkron verzióját <> </> *>, amely átmásolja az összes sort a megadott <xref href=&quot;System.Data.DataRow&quot;> </xref> tömb a megadott céltáblába a <> </> *> tulajdonsága az <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "A tömb <xref href=&quot;System.Data.DataRow&quot;> </xref> objektumok, amelyet a rendszer a célként megadott táblája."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "WriteToServerAsync többször hívja a példányt a feladat befejezése előtt.       Hívása WriteToServerAsync és <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>ugyanazon feladat befejezése előtt.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       A kapcsolat esik, vagy lezárt WriteToServerAsync végrehajtása során.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Az aszinkron verzióját <> </> *>, amely átmásolja a terjesztendő összes sort a megadott <xref href=&quot;System.Data.DataTable&quot;> </xref> a céltáblába, amelyet a <> </> *> tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "WriteToServerAsync többször hívja a példányt a feladat befejezése előtt.       Hívása WriteToServerAsync és <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>ugyanazon feladat befejezése előtt.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       A kapcsolat esik, vagy lezárt WriteToServerAsync végrehajtása során.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Az aszinkron verzióját <> </> *>, amely átmásolja a terjesztendő összes sort a megadott <xref href=&quot;System.Data.IDataReader&quot;> </xref> a céltáblába, amelyet a <> </> *> tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "WriteToServerAsync többször hívja a példányt a feladat befejezése előtt.       Hívása WriteToServerAsync és <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>ugyanazon feladat befejezése előtt.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       A kapcsolat esik, vagy lezárt WriteToServerAsync végrehajtása során.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       A <xref href=&quot;System.Data.IDataReader&quot;> </xref> be lett zárva a befejezett előtt <xref:System.Threading.Tasks.Task>adott vissza.</xref:System.Threading.Tasks.Task>       A <xref href=&quot;System.Data.IDataReader&quot;> </xref>tartozó társított kapcsolat nem volt bezárása előtt a befejezett <xref:System.Threading.Tasks.Task>adott vissza.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aszinkron verzióját <> </> *>, amely átmásolja az összes sort a megadott <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> tömb a megadott céltáblába a <> </> *> tulajdonsága az <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A megszakítási utasítás. A <> </> *> érték ebben a paraméterben teszi ezt a módszert egyenértékű <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "<xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task> Beolvasása"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aszinkron verzióját <> </> *>, amely átmásolja az összes sort a megadott <xref href=&quot;System.Data.DataRow&quot;> </xref> tömb a megadott céltáblába a <> </> *> tulajdonsága az <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.       A megszakítási jogkivonatot kérni, hogy a művelet elhagyásra kerül, az időkorlát lejárta előtt használható.  Kivételek az keresztül a visszaadott feladat objektum megjelenik."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "A tömb <xref href=&quot;System.Data.DataRow&quot;> </xref> objektumok, amelyet a rendszer a célként megadott táblája."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A megszakítási utasítás. A <> </> *> érték ebben a paraméterben teszi ezt a módszert egyenértékű <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hívása <> </> *> többször a feladat befejezése előtt ugyanezen példányában.       Hívása <> </> *> és <> </> *> ugyanazon feladat befejezése előtt.       A kapcsolat esik, vagy bezárása során <> </> *> végrehajtása.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aszinkron verzióját <> </> *>, amely csak a megadott a megadott sor állapotnak megfelelő sorok másolja <xref href=&quot;System.Data.DataTable&quot;> </xref> a céltáblába, amelyet a <> </> *> tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    - id: rowState
      type: System.Data.DataRowState
      description: "Egy értéket a <xref href=&quot;System.Data.DataRowState&quot;> </xref> enumerálása. A cél csak a sor állapota megfelelő sorok lesz másolva."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "WriteToServerAsync többször hívja a példányt a feladat befejezése előtt.       Hívása WriteToServerAsync és <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>ugyanazon feladat befejezése előtt.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       A kapcsolat esik, vagy lezárt WriteToServerAsync végrehajtása során.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Az aszinkron verzióját <> </> *>, amely átmásolja a terjesztendő összes sort a megadott <xref href=&quot;System.Data.DataTable&quot;> </xref> a céltáblába, amelyet a <> </> *> tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.       A megszakítási jogkivonatot kérni, hogy a művelet elhagyásra kerül, az időkorlát lejárta előtt használható.  Kivételek az keresztül a visszaadott feladat objektum megjelenik."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A megszakítási utasítás. A <> </> *> érték ebben a paraméterben teszi ezt a módszert egyenértékű <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hívása <> </> *> többször a feladat befejezése előtt ugyanezen példányában.       Hívása <> </> *> és <> </> *> ugyanazon feladat befejezése előtt.       A kapcsolat esik, vagy bezárása során <> </> *> végrehajtása.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Az aszinkron verzióját <> </> *>, amely átmásolja a terjesztendő összes sort a megadott <xref href=&quot;System.Data.IDataReader&quot;> </xref> a céltáblába, amelyet a <> </> *> tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.       A megszakítási jogkivonatot kérni, hogy a művelet elhagyásra kerül, az időkorlát lejárta előtt használható.  Kivételek az keresztül a visszaadott feladat objektum megjelenik."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A megszakítási utasítás. A <> </> *> érték ebben a paraméterben teszi ezt a módszert egyenértékű <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hívása <> </> *> többször a feladat befejezése előtt ugyanezen példányában.       Hívása <> </> *> és <> </> *> ugyanazon feladat befejezése előtt.       A kapcsolat esik, vagy bezárása során <> </> *> végrehajtása.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       A <xref href=&quot;System.Data.IDataReader&quot;> </xref> be lett zárva a befejezett előtt <xref:System.Threading.Tasks.Task>adott vissza.</xref:System.Threading.Tasks.Task>       A <xref href=&quot;System.Data.IDataReader&quot;> </xref>tartozó társított kapcsolat nem volt bezárása előtt a befejezett <xref:System.Threading.Tasks.Task>adott vissza.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aszinkron verzióját <> </> *>, amely csak a megadott a megadott sor állapotnak megfelelő sorok másolja <xref href=&quot;System.Data.DataTable&quot;> </xref> a céltáblába, amelyet a <> </> *> tulajdonsága a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum.       A megszakítási jogkivonatot kérni, hogy a művelet elhagyásra kerül, az időkorlát lejárta előtt használható.  Kivételek az keresztül a visszaadott feladat objektum megjelenik."
  remarks: "Aszinkron programozásba a további információt a [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] adatszolgáltatója [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], lásd: [aszinkron programozás](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> amelynek sorok lesznek másolva a célként megadott táblája."
    - id: rowState
      type: System.Data.DataRowState
      description: "Egy értéket a <xref href=&quot;System.Data.DataRowState&quot;> </xref> enumerálása. A cél csak a sor állapota megfelelő sorok lesz másolva."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A megszakítási utasítás. A <> </> *> érték ebben a paraméterben teszi ezt a módszert egyenértékű <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Az aszinkron művelet képviselő feladat."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Hívása <> </> *> többször a feladat befejezése előtt ugyanezen példányában.       Hívása <> </> *> és <> </> *> ugyanazon feladat befejezése előtt.       A kapcsolat esik, vagy bezárása során <> </> *> végrehajtása.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektum be lett zárva a metódus végrehajtása során.       Vissza a feladatobjektum, történt egy kapcsolatkészleti időkorlátot.       Az eredmény abban a feladatobjektum a <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektum be van zárva a metódus végrehajtása előtt.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>van megadva a kapcsolati karakterláncban."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Vissza a feladatobjektum, bármely által visszaadott hiba: [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , amely a kapcsolat megnyitása során történt."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
