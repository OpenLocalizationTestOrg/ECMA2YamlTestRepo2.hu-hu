### YamlMime:ManagedReference
items:
- uid: System.Reflection.TypeDelegator
  id: TypeDelegator
  children:
  - System.Reflection.TypeDelegator.#ctor
  - System.Reflection.TypeDelegator.#ctor(System.Type)
  - System.Reflection.TypeDelegator.Assembly
  - System.Reflection.TypeDelegator.AssemblyQualifiedName
  - System.Reflection.TypeDelegator.BaseType
  - System.Reflection.TypeDelegator.FullName
  - System.Reflection.TypeDelegator.GetAttributeFlagsImpl
  - System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)
  - System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.TypeDelegator.GetElementType
  - System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetEvents
  - System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)
  - System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)
  - System.Reflection.TypeDelegator.GetInterfaces
  - System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeDelegator.GUID
  - System.Reflection.TypeDelegator.HasElementTypeImpl
  - System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.TypeDelegator.IsArrayImpl
  - System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.TypeDelegator.IsByRefImpl
  - System.Reflection.TypeDelegator.IsCOMObjectImpl
  - System.Reflection.TypeDelegator.IsConstructedGenericType
  - System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)
  - System.Reflection.TypeDelegator.IsPointerImpl
  - System.Reflection.TypeDelegator.IsPrimitiveImpl
  - System.Reflection.TypeDelegator.IsValueTypeImpl
  - System.Reflection.TypeDelegator.MetadataToken
  - System.Reflection.TypeDelegator.Module
  - System.Reflection.TypeDelegator.Name
  - System.Reflection.TypeDelegator.Namespace
  - System.Reflection.TypeDelegator.TypeHandle
  - System.Reflection.TypeDelegator.typeImpl
  - System.Reflection.TypeDelegator.UnderlyingSystemType
  langs:
  - csharp
  name: TypeDelegator
  nameWithType: TypeDelegator
  fullName: System.Reflection.TypeDelegator
  type: Class
  summary: "Fussa egy &lt;xref:System.Type?displayProperty=fullName&gt; objektum és -delegáltaknak módszereket, amelyek <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Ez a típus származik, és a felülíró csak az érintett tagok, meg kell adnia a testreszabás, valamint azokat a tagokat, a program szükséges és TypeDelegator még nincs megvalósítva.       A <xref:System.Type?displayProperty=fullName>legtöbb tulajdonságok és metódusok <xref:System.Type>.</xref:System.Type> , és</xref:System.Type?displayProperty=fullName> származik TypeDelegator Végrehajtja az tagjaihoz tartozó TypeDelegator automatikusan delegálja a megfelelő tagjára belső <xref:System.Type>objektum, amely a konstruktor argumentumként van megadva.</xref:System.Type> A belső <xref:System.Type>objektum fel van fedve osztályok által célja, hogy a `protected` <xref:System.Reflection.TypeDelegator.typeImpl>mező.</xref:System.Reflection.TypeDelegator.typeImpl> </xref:System.Type>      > [!NOTE] > Néhány TypeDelegator tagjai rendelkeznek a megvalósításokhoz, annak ellenére, hogy a tagok egyszerűen öröklődtek <xref:System.Type>.</xref:System.Type> Ezekben az esetekben a megvalósítás biztosított által egy felülbírált `protected` módszer, amelynek a neve, amely a &quot;Impl&quot; karakterlánccal végződik-e. Például az összes túlterhelések végrehajtására a <xref:System.Reflection.TypeDelegator.GetMethod%2A>megadott metódus által a felülbírált <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A>metódus.</xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> </xref:System.Reflection.TypeDelegator.GetMethod%2A> Végrehajtására örökölt tulajdonságok például <xref:System.Type.IsPublic%2A>és <xref:System.Type.IsNestedAssembly%2A>biztosítja a felülbírált által <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A>metódus.</xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> </xref:System.Type.IsNestedAssembly%2A> </xref:System.Type.IsPublic%2A>       Osztályok való származtatás nyilvános konstruktort biztosít egy <xref:System.Type>a paraméter és egyszerűen a objektum fázisok objektum a <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29>konstruktor, vagy beállíthatja, hogy a belső <xref:System.Type>más módon objektum.</xref:System.Type> </xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> </xref:System.Type>       Ha deriving osztály, amely nem valósítja meg TypeDelegator tag használ, azt bírálja felül az adott tagot, és megvalósítást. A legegyszerűbb megvalósítás, hogy a megfelelő tag hívható meg a belső <xref:System.Type>objektum által elérhetővé tett a <xref:System.Reflection.TypeDelegator.typeImpl>mező, de biztosíthat az alkalmazás által igényelt megvalósítási.</xref:System.Reflection.TypeDelegator.typeImpl> </xref:System.Type> Nincs szükség, ha az alkalmazás nem használja, vagy Library működik az alkalmazás hívások ezekről a tagokról felülbírálására (például úgy, hogy a <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName>konstruktorban).</xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName>       A következő virtuális módszerek (`Overridable` módszerek a Visual Basic nyelvben) a <xref:System.Type>vannak TypeDelegator nincs megvalósítva: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A> <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A> <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A> <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A> <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A> <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A> <xref:System.Type.IsEquivalentTo%2A>.</xref:System.Type.IsEquivalentTo%2A> </xref:System.Type.IsEnumDefined%2A> </xref:System.Type.GetTypeCodeImpl%2A> </xref:System.Type.GetEnumUnderlyingType%2A> </xref:System.Type.GetEnumValues%2A> </xref:System.Type.GetEnumNames%2A> </xref:System.Type.MakePointerType%2A> </xref:System.Type.MakeByRefType%2A> </xref:System.Type.MakeArrayType%2A> </xref:System.Type.GetGenericParameterConstraints%2A> </xref:System.Type.GetGenericArguments%2A> </xref:System.Type.GetGenericTypeDefinition%2A> </xref:System.Type.MakeGenericType%2A> </xref:System.Type>       A következő virtuális tulajdonságai (`Overridable` tulajdonságok a Visual Basic nyelvben) a <xref:System.Type>vannak TypeDelegator nincs megvalósítva: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A> <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A> <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A> <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A> <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</xref:System.Type.IsSecurityTransparent%2A> </xref:System.Type.IsSecuritySafeCritical%2A> </xref:System.Type.IsSecurityCritical%2A> </xref:System.Type.GenericParameterPosition%2A> </xref:System.Type.GenericParameterAttributes%2A> </xref:System.Type.DeclaringMethod%2A> </xref:System.Type.ContainsGenericParameters%2A> </xref:System.Type.IsGenericParameter%2A> </xref:System.Type.IsGenericTypeDefinition%2A> </xref:System.Type.IsGenericType%2A> </xref:System.Type>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TypeDelegator : System.Reflection.TypeInfo
  inheritance:
  - System.Reflection.TypeInfo
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.#ctor
  id: '#ctor'
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: TypeDelegator()
  nameWithType: TypeDelegator.TypeDelegator()
  fullName: System.Reflection.TypeDelegator.TypeDelegator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref> osztály alapértelmezett tulajdonságokkal."
  syntax:
    content: protected TypeDelegator ();
    parameters: []
  overload: System.Reflection.TypeDelegator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: TypeDelegator(Type)
  nameWithType: TypeDelegator.TypeDelegator(Type)
  fullName: System.Reflection.TypeDelegator.TypeDelegator(Type)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref> adja meg a beágyazott példány osztály."
  remarks: "Ez a konstruktor neve alapján delegált létrehozásához osztályból a `Type` meg az osztályt definiáló metódus objektum."
  syntax:
    content: public TypeDelegator (Type delegatingType);
    parameters:
    - id: delegatingType
      type: System.Type
      description: "Az osztály példánya <xref:System.Type>, amely magában foglalja az objektum metódus hívása.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>delegatingType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Assembly
  id: Assembly
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Assembly
  nameWithType: TypeDelegator.Assembly
  fullName: System.Reflection.TypeDelegator.Assembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "A szerelvény a megvalósított típus beolvasása."
  remarks: "Szerelvények a központi telepítési egység a közös nyelvi futtatókörnyezet. Szerelvények kérések megoldásához névtér létrehozásához, és határozza meg, mely erőforrásokat külsőleg ki vannak téve, és amelyeket a szerelvény belülről érhetők el. A közös nyelvi futtatókörnyezet határozza meg, és keresse meg az összes futó objektum szerelvény."
  syntax:
    content: public override System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: "Egy &lt;xref:System.Reflection.Assembly?displayProperty=fullName&gt; megvalósított típus a szerelvény képviselő objektum."
  overload: System.Reflection.TypeDelegator.Assembly*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: AssemblyQualifiedName
  nameWithType: TypeDelegator.AssemblyQualifiedName
  fullName: System.Reflection.TypeDelegator.AssemblyQualifiedName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a szerelvény teljesen minősített neve."
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tartalmazó teljesen minősített szerelvénynév."
  overload: System.Reflection.TypeDelegator.AssemblyQualifiedName*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.BaseType
  id: BaseType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: BaseType
  nameWithType: TypeDelegator.BaseType
  fullName: System.Reflection.TypeDelegator.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Az alaptípus tartalomtípusa lekérdezi az aktuális típus."
  remarks: "Az alaptípus tartalomtípusa nem, amelyből közvetlenül örökli az ilyen típusú. Mivel a <xref:System.Object>osztálytípus, az ultimate alaposztály minden más típusú, de az egyetlen típus, amely nem lehet alaptípusa.</xref:System.Object> Ebben az esetben `null` adja vissza a rendszer a alaptípusa a `Object` típusa."
  syntax:
    content: public override Type BaseType { get; }
    return:
      type: System.Type
      description: "Az alaptípus típusok esetében."
  overload: System.Reflection.TypeDelegator.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.FullName
  id: FullName
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: FullName
  nameWithType: TypeDelegator.FullName
  fullName: System.Reflection.TypeDelegator.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a megvalósított típus teljesen minősített neve."
  remarks: "Az aktuális teljesen minősített nevét tartalmazó karakterlánc `TypeDelegator`."
  syntax:
    content: public override string FullName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tartalmazó teljesen minősített típusnév."
  overload: System.Reflection.TypeDelegator.FullName*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetAttributeFlagsImpl()
  nameWithType: TypeDelegator.GetAttributeFlagsImpl()
  fullName: System.Reflection.TypeDelegator.GetAttributeFlagsImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Az attribútumok rendelt lekérdezi a <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  remarks: "Ez a módszer segítségével határozza meg, hogy a `TypeDelegator` absztrakt, nyilvános, és így tovább."
  syntax:
    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
      description: "A <xref uid=&quot;langword_csharp_TypeAttributes&quot; name=&quot;TypeAttributes&quot; href=&quot;&quot;> </xref> a attribútum jelzők képviselő objektum."
  overload: System.Reflection.TypeDelegator.GetAttributeFlagsImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "A konstruktornak, amelyeket a lekérdezi a <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  remarks: "A `callConvention` paraméter jelzi a belépési pont a hívási konvenció. Ha nincs hívási konvenció meg van adva, az alapértelmezett <xref:System.Reflection.CallingConventions>értékének `Standard` szolgál.</xref:System.Reflection.CallingConventions>"
  syntax:
    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: binder
      type: System.Reflection.Binder
      description: "Olyan objektum, amely lehetővé teszi, hogy a kötés argumentum adhatók meg kell adnia, meghívási tagok, és lekérése <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> objektumokat a következőt reflexió használatával. Ha `binder` van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, az alapértelmezett kötő szolgál."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: "A hívó egyezmények."
    - id: types
      type: System.Type[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> tartalmazó a számú paraméter, a sorrendje, illetve a típusok listája. Típusok nem lehetnek <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; használja a megfelelő <xref uid=&quot;langword_csharp_GetMethod&quot; name=&quot;GetMethod&quot; href=&quot;&quot;> </xref> metódus vagy kereséséhez paraméterek nélkül metódus üres tömb."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_ParameterModifier&quot; name=&quot;ParameterModifier&quot; href=&quot;&quot;> </xref> amelynek hossza megegyezik a `types` tömb, amelynek elemei meghatároznia a metódus használatával kérje le a paraméterekkel tartozó attribútumok."
    return:
      type: System.Reflection.ConstructorInfo
      description: "A <xref uid=&quot;langword_csharp_ConstructorInfo&quot; name=&quot;ConstructorInfo&quot; href=&quot;&quot;> </xref> a metódus, amely a megadott feltételeknek megfelelő objektum vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha nem található egyezés."
  overload: System.Reflection.TypeDelegator.GetConstructorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetConstructors(BindingFlags)
  nameWithType: TypeDelegator.GetConstructors(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetConstructors(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Tömbjét adja vissza <xref:System.Reflection.ConstructorInfo>konstruktorok az aktuális által becsomagolt meghatározott objektumokból <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.ConstructorInfo>"
  remarks: "Az osztály az inicializálók csak keresztül érhetők el `GetMember`, `GetMembers`, `FindMembers`, és `GetConstructors`."
  syntax:
    content: public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.ConstructorInfo[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_ConstructorInfo&quot; name=&quot;ConstructorInfo&quot; href=&quot;&quot;> </xref> tartalmazó a megadott osztály definiálva konstruktor. Ha nem konstruktor meghatározása, üres tömböt ad vissza. Attól függően, hogy a megadott paraméter értékét csak a nyilvános konstruktor vagy a nyilvános és a nem nyilvános konstruktorok eredmény."
  overload: System.Reflection.TypeDelegator.GetConstructors*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Az egyéni attribútumok definiálva ehhez a típushoz, adja meg, hogy a típus öröklési lánc adja vissza."
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: "Megadja, hogy ez a típus öröklési lánc az attribútumok kereséséhez keressen-e."
    return:
      type: System.Object[]
      description: "Ehhez a típushoz megadott egyéni attribútumok tartalmazó objektumokból álló tömb."
  overload: System.Reflection.TypeDelegator.GetCustomAttributes*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "Egy egyéni attribútum típusa nem tölthető be."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Az egyéni attribútumok típus azonosíthatók tömbjét adja vissza."
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: "Egyéni attribútumok azonosíthatók típus tömbje."
    - id: inherit
      type: System.Boolean
      description: "Megadja, hogy ez a típus öröklési lánc az attribútumok kereséséhez keressen-e."
    return:
      type: System.Object[]
      description: "Az egyéni attribútumok ehhez a típushoz definiálva megfelelő tartalmazó objektumokból álló tömb a <code> attributeType </code> paraméter megadása, hogy a típus öröklési lánc, vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> adott típus nem egyedi attribútum megadása esetén."
  overload: System.Reflection.TypeDelegator.GetCustomAttributes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>attributeType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "Egy egyéni attribútum típusa nem tölthető be."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetElementType
  id: GetElementType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetElementType()
  nameWithType: TypeDelegator.GetElementType()
  fullName: System.Reflection.TypeDelegator.GetElementType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Vissza a <xref:System.Type>objektum lefedett vagy az aktuális tömb, mutató vagy hivatkozással (ByRef) által hivatkozott.</xref:System.Type>"
  syntax:
    content: public override Type GetElementType ();
    parameters: []
    return:
      type: System.Type
      description: "A <xref:System.Type>objektum lefedett vagy a jelenlegi tömb által hivatkozott mutató vagy <xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref>, vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha az aktuális <xref:System.Type>nincs tömb, egy mutatót, vagy egy <xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref>.</xref:System.Type> </xref:System.Type>"
  overload: System.Reflection.TypeDelegator.GetElementType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetEvent(String,BindingFlags)
  nameWithType: TypeDelegator.GetEvent(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvent(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "A megadott esemény adja vissza."
  remarks: "Ha `bindingAttr` van <xref:System.Reflection.BindingFlags>.`IgnoreCase`, a nagybetűk, a `name` paraméter a rendszer figyelmen kívül hagyja.</xref:System.Reflection.BindingFlags>"
  syntax:
    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "A beolvasandó esemény neve."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.EventInfo
      description: "Egy <xref:System.Reflection.EventInfo>jelző esemény deklarálva, vagy a megadott nevű ilyen örökölt objektumot.</xref:System.Reflection.EventInfo> Ez a metódus visszaadja <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , ha nincs ilyen esemény megtalálható."
  overload: System.Reflection.TypeDelegator.GetEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetEvents
  id: GetEvents
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetEvents()
  nameWithType: TypeDelegator.GetEvents()
  fullName: System.Reflection.TypeDelegator.GetEvents()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Tömbjét adja vissza <xref:System.Reflection.EventInfo>a nyilvános események képviselő deklarálva, vagy az aktuális örökölt objektumok <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.EventInfo>"
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents ();
    parameters: []
    return:
      type: System.Reflection.EventInfo[]
      description: "Adja vissza a típusú tömb <xref uid=&quot;langword_csharp_EventInfo&quot; name=&quot;EventInfo&quot; href=&quot;&quot;> </xref> az eseményeket tartalmazó deklarálva, vagy az aktuális típus örökölt. Nincsenek események, ha üres tömböt ad vissza."
  overload: System.Reflection.TypeDelegator.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetEvents(BindingFlags)
  nameWithType: TypeDelegator.GetEvents(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvents(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja a megadott események <code> bindingAttr </code> , amely deklarálva, vagy a jelenlegi örökölt <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.EventInfo[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_EventInfo&quot; name=&quot;EventInfo&quot; href=&quot;&quot;> </xref> a megadott eseményeket tartalmazó <code> bindingAttr </code>. Nincsenek események, ha üres tömböt ad vissza."
  overload: System.Reflection.TypeDelegator.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: TypeDelegator.GetField(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Értéket ad vissza egy <xref:System.Reflection.FieldInfo>a megadott nevű mezőt jelképező.</xref:System.Reflection.FieldInfo>"
  remarks: "Használja a `bindingAttr` a <xref:System.Reflection.BindingFlags>. Vissza az összes nyilvános és bizalmasként mezők nonPublic.</xref:System.Reflection.BindingFlags> Használjon `BindingFlags.IgnoreCase` figyelmen kívül hagyja a kis-és a mezőket, mert a Keresés a kis-és nagybetűket alapértelmezés szerint."
  syntax:
    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "A mező található neve."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.FieldInfo
      description: "A <xref uid=&quot;langword_csharp_FieldInfo&quot; name=&quot;FieldInfo&quot; href=&quot;&quot;> </xref> mezőknek deklarálva, vagy ez örökölt objektum <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref> a megadott névvel. Beolvasása <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha ilyen mező nem található."
  overload: System.Reflection.TypeDelegator.GetField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: TypeDelegator.GetFields(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Tömbjét adja vissza <xref:System.Reflection.FieldInfo>objektumot képviselő adatmezők meghatározott beburkolva az aktuális <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.FieldInfo>"
  remarks: "A GetFields metódus nem térhet vissza mezők meghatározott sorrendben, például szedett vagy deklaráció sorrendet. A kód nem függhet a sorrendet, amelyben mezőket ad vissza, mivel nem minden sorrendben.       Használja a `bindingAttr` a <xref:System.Reflection.BindingFlags>. Vissza az összes nyilvános és bizalmasként mezők nonPublic.</xref:System.Reflection.BindingFlags>"
  syntax:
    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.FieldInfo[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_FieldInfo&quot; name=&quot;FieldInfo&quot; href=&quot;&quot;> </xref> mezőket tartalmazó deklarálva, vagy az aktuális örökölt <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>. Üres tömböt ad vissza, ha nincsenek egyező mezők."
  overload: System.Reflection.TypeDelegator.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetInterface(String,Boolean)
  nameWithType: TypeDelegator.GetInterface(String,Boolean)
  fullName: System.Reflection.TypeDelegator.GetInterface(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja a megadott kapcsolat beburkolva az aktuális típus által megvalósított <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>."
  syntax:
    content: public override Type GetInterface (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: "Az aktuális osztály által megvalósított illesztőfelület teljesen minősített neve."
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az eset az, hogy figyelmen kívül lesz hagyva; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Type
      description: "A <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> a (közvetlenül vagy közvetetten) az aktuális osztály által megvalósított a megadott névnek megfelelő teljesen minősített nevű felület képviselő objektum. Ha nincs kapcsolat nevével egyező található, null adja vissza."
  overload: System.Reflection.TypeDelegator.GetInterface*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)
  id: GetInterfaceMap(System.Type)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetInterfaceMap(Type)
  nameWithType: TypeDelegator.GetInterfaceMap(Type)
  fullName: System.Reflection.TypeDelegator.GetInterfaceMap(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "A megadott illesztőfelület-típus egy felület leképezést adja vissza."
  remarks: "A felület leképezés azt jelzi, hogyan hozzá van rendelve egy felület egy osztály, amely megvalósítja az, hogy a illesztő tényleges módszerek."
  syntax:
    content: public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);
    parameters:
    - id: interfaceType
      type: System.Type
      description: "A <xref:System.Type>a felület egy táblázatot a beolvasandó.</xref:System.Type>"
    return:
      type: System.Reflection.InterfaceMapping
      description: "Egy <xref:System.Reflection.InterfaceMapping>a felület leképezést képviselő objektum <code> interfaceType </code>.</xref:System.Reflection.InterfaceMapping>"
  overload: System.Reflection.TypeDelegator.GetInterfaceMap*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetInterfaces
  id: GetInterfaces
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetInterfaces()
  nameWithType: TypeDelegator.GetInterfaces()
  fullName: System.Reflection.TypeDelegator.GetInterfaces()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Az aktuális osztály és alaposztálya végrehajtott összes illesztő adja vissza."
  syntax:
    content: public override Type[] GetInterfaces ();
    parameters: []
    return:
      type: System.Type[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> tartalmazó végrehajtani az aktuális osztály és alaposztályainak összes felületet. Ha nincs definiálva vannak, akkor üres tömböt adott vissza."
  overload: System.Reflection.TypeDelegator.GetInterfaces*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Tagot (tulajdonságait, módszerek, konstruktorok, mezők, eseményeket és beágyazott típus) által megadott ad vissza a megadott <code> name </code>, <code> type </code>, és <code> bindingAttr </code>."
  remarks: "If `bindingAttr` is <xref:System.Reflection.BindingFlags>. NonPublic, a tagok akkor veszi figyelembe.</xref:System.Reflection.BindingFlags> Ha nincs találat, akkor üres tömböt adott vissza."
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "A beolvasandó tag nevét."
    - id: type
      type: System.Reflection.MemberTypes
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A tagokat típusa."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> az aktuális osztály és annak alaposztályát, a megadott feltételeknek megfelelő összes tagját tartalmazó."
  overload: System.Reflection.TypeDelegator.GetMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: TypeDelegator.GetMembers(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Megadott tagot ad vissza <code> bindingAttr </code>."
  remarks: "If `bindingAttr` is <xref:System.Reflection.BindingFlags>. NonPublic, a tagok akkor veszi figyelembe.</xref:System.Reflection.BindingFlags> Ha nincs találat, akkor üres tömböt adott vissza."
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> tartalmazó összes tagjai az aktuális osztály és alaposztálya, amelyek megfelelnek a <code> bindingAttr </code> szűrő."
  overload: System.Reflection.TypeDelegator.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "A megadott metódust, amelynek a paraméterek megegyeznek a megadott argumentumtípusok és módosítók, a megadott kötési megszorításoknak és a megadott hívási konvenció használatával keres."
  remarks: "A `callConvention` paraméter jelzi a belépési pont a hívási konvenció. Ha nincs <xref:System.Reflection.CallingConventions>meg van adva, az alapértelmezett `CallingConventions` értékének `Standard` szolgál.</xref:System.Reflection.CallingConventions>"
  syntax:
    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "A metódus nevét."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: binder
      type: System.Reflection.Binder
      description: "Olyan objektum, amely lehetővé teszi, hogy a kötés argumentum adhatók meg kell adnia, meghívási tagok, és lekérése <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> objektumokat a következőt reflexió használatával. Ha `binder` van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, az alapértelmezett kötő szolgál."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: "A hívó egyezmények."
    - id: types
      type: System.Type[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> tartalmazó a számú paraméter, a sorrendje, illetve a típusok listája. Típusok nem lehetnek <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; használja a megfelelő <xref uid=&quot;langword_csharp_GetMethod&quot; name=&quot;GetMethod&quot; href=&quot;&quot;> </xref> metódus vagy kereséséhez paraméterek nélkül metódus üres tömb."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_ParameterModifier&quot; name=&quot;ParameterModifier&quot; href=&quot;&quot;> </xref> amelynek hossza megegyezik a `types` tömb, amelynek elemei meghatároznia a metódus használatával kérje le a paraméterekkel tartozó attribútumok."
    return:
      type: System.Reflection.MethodInfo
      description: "A <xref uid=&quot;langword_csharp_MethodInfoInfo&quot; name=&quot;MethodInfoInfo&quot; href=&quot;&quot;> </xref> a végrehajtási metódus, amely a megadott feltételeknek megfelelő objektum vagy <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Ha nem található egyezés."
  overload: System.Reflection.TypeDelegator.GetMethodImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: TypeDelegator.GetMethods(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Tömbjét adja vissza <xref:System.Reflection.MethodInfo>képviselő megadott módszerek az aktuális által becsomagolt típusú objektumok <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.MethodInfo[]
      description: "A tömb <xref uid=&quot;langword_csharp_MethodInfo&quot; name=&quot;MethodInfo&quot; href=&quot;&quot;> </xref> az itt megadott módszerek objektumokból <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetNestedType(String,BindingFlags)
  nameWithType: TypeDelegator.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedType(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy beágyazott által megadott típust ad vissza <code> name </code> és a <code> bindingAttr </code> , amely deklarálva, vagy az aktuális által képviselt típus által örökölt <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>."
  syntax:
    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "A beágyazott típus neve."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Type
      description: "A <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> a beágyazott típus képviselő objektum."
  overload: System.Reflection.TypeDelegator.GetNestedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetNestedTypes(BindingFlags)
  nameWithType: TypeDelegator.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedTypes(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja a megadott beágyazott típusok <code> bindingAttr </code> , amely deklarálva, vagy az aktuális által becsomagolt típus által örökölt <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>."
  syntax:
    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Type[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> tartalmazó beágyazott típusok."
  overload: System.Reflection.TypeDelegator.GetNestedTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: TypeDelegator.GetProperties(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Tömbjét adja vissza <xref:System.Reflection.PropertyInfo>beburkolva az aktuális típusú tulajdonságok objektumokból <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "A tömb <xref uid=&quot;langword_csharp_PropertyInfo&quot; name=&quot;PropertyInfo&quot; href=&quot;&quot;> </xref> itt definiált tulajdonságok objektumokból <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Ha felül van bírálva a származtatott osztály, megkeresi a megadott tulajdonságot, amelynek a paraméterek megegyeznek a megadott argumentumtípusok és módosítók, a megadott kötési megszorításoknak használatával."
  syntax:
    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "A tulajdonság használatával beolvassa."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitmaszk, amely érinti a, amelyben a keresés végzik. Az érték nulla vagy több bit jelzők a kombinációja <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: binder
      type: System.Reflection.Binder
      description: "Olyan objektum, amely lehetővé teszi, hogy a kötés argumentum adhatók meg kell adnia, meghívási tagok, és lekérése <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> objektumok reflexió útján. Ha `binder` van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, az alapértelmezett kötő szolgál. See <xref href=&quot;System.Reflection.Binder&quot;></xref>."
    - id: returnType
      type: System.Type
      description: "A tulajdonság visszatérési típusával."
    - id: types
      type: System.Type[]
      description: "A paraméter típusainak listáját. A lista a számát, a sorrendje, illetve a paramétertípusainak jelöli. Típusok nem lehet null. használja a megfelelő <xref uid=&quot;langword_csharp_GetMethod&quot; name=&quot;GetMethod&quot; href=&quot;&quot;> </xref> metódus vagy kereséséhez paraméterek nélkül metódus üres tömb."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "A hossza megegyezik az elemek, amelyek megfelelnek a paraméterek a metódus használatával kérje le a hozzá kapcsolódó attribútumok típusok egy tömbjét."
    return:
      type: System.Reflection.PropertyInfo
      description: "A <xref:System.Reflection.PropertyInfo>a tulajdonsághoz, amely a megadott feltételeknek megfelelő objektum, vagy null, ha nem található egyezés.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.TypeDelegator.GetPropertyImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GUID
  id: GUID
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GUID
  nameWithType: TypeDelegator.GUID
  fullName: System.Reflection.TypeDelegator.GUID
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a globálisan egyedi azonosítót (GUID) a megvalósított típus."
  remarks: "A globálisan egyedi azonosítót (GUID): egy osztály vagy illesztőfelület azonosítására használt egyedi azonosító 128 bites karakterlánc. Elsősorban hasznos lehet a Microsoft .NET-keretrendszer és a COM-környezetbe."
  syntax:
    content: public override Guid GUID { get; }
    return:
      type: System.Guid
      description: "EGY GUID AZONOSÍTÓT."
  overload: System.Reflection.TypeDelegator.GUID*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: HasElementTypeImpl()
  nameWithType: TypeDelegator.HasElementTypeImpl()
  fullName: System.Reflection.TypeDelegator.HasElementTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy az aktuális <xref:System.Type>foglal magában, vagy egy másik típussal; hivatkozik, hogy az aktuális <xref:System.Type>tömb, mutató vagy egy hivatkozással (ByRef).</xref:System.Type> </xref:System.Type>"
  syntax:
    content: protected override bool HasElementTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Type>tömb, mutató vagy egy hivatkozással (ByRef); egyéb esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.HasElementTypeImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "A megadott tag hív meg. A meghívni kívánt metódus elérhető legyen, és adja meg a leginkább megegyező a megadott argumentum listájával, a megadott kötő és meghívása attribútumok korlátai alapján."
  remarks: "A módszer akkor kell meghívni, mindkét alábbi feltétel teljesülése esetén: - a metódus deklarációjában paraméterek egyenlő a megadott argumentum listában argumentumok száma (kivéve, ha az alapértelmezett argumentum van megadva a tagra).      -A paraméter típusának kötő által minden argumentumok típusa alakíthatók ki.       A binder megtalálja a megfelelő módszert. Ezek a módszerek található a kért kötése típusának alapján (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, és így tovább). A rendszer módszerek készletét a nevét, az argumentumok száma és a binder definiált keresési módosítók készlete alapján szűri.       Miután a módszer van kiválasztva, akkor kell meghívni. Kisegítő lehetőségek ezen a ponton be van jelölve. A keresési metódusok körét történik a Keresés a metódus társított kisegítő attribútum alapján szabályozhatja. A <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName>metódus felelős meghívandó módszer választása.</xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> Az alapértelmezett kötő kiválasztja a leginkább megegyező.      > [!NOTE] > Korlátozza a hozzáférést a rendszer figyelmen kívül hagyja a teljesen megbízható kód. Ez azt jelenti, hogy személyes konstruktorok, a metódusok, a mezők és a tulajdonságok és elérhető meghívni a következőt reflexió használatával, amikor a kód teljesen megbízható.       Jelenleg `InvokeMember` hajtja végre a Microsoft .NET-keretrendszer reflexiós szemantika minden típusú objektum.       Ha a megadott tag egy tömb és a `BindingFlags.GetField` jelző be van állítva `invokeAttr`, a `args` tömb határozza meg az elemek, amelyek értékét elő kell állítani. Például a következő hívnia `Type` objektum `t` a karakterlánc-tömbben tömb, amely tagja a hívó objektum első elemének értékét adja vissza: `String ret = (String) t.InvokeMember (&quot;MyArray&quot;, BindingFlags.GetField, null, this, new Variant[]{0});` használható `InvokeMember` legalább egy tagot tömb elemei beállítása. Összes eleme ugyanarra az értékre vannak állítva. A `args` tömb az alábbiak szerint kell formázni: ```   {index1,       index2,, value}   ``` például, hogy a tömb első tagja az előző példából, a szintaxisa a következő:```   t.InvokeMember (&quot;MyArray&quot;, BindingFlags.SetField, null, this, new       Variant[]{0,&quot;Updated&quot;});   ```"
  syntax:
    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "A meghívni kívánt tag nevét. Erre akkor lehet egy konstruktor, metódus, tulajdonság vagy mező. Ha üres karakterláncot (&quot;&quot;) átadása, az alapértelmezett tag hívják."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: 'A meghívási attribútum. This must be one of the following <xref href=&quot;System.Reflection.BindingFlags&quot;></xref> : <xref uid=&quot;langword_csharp_InvokeMethod&quot; name=&quot;InvokeMethod&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CreateInstance&quot; name=&quot;CreateInstance&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Static&quot; name=&quot;Static&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_GetField&quot; name=&quot;GetField&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_SetField&quot; name=&quot;SetField&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_GetProperty&quot; name=&quot;GetProperty&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_SetProperty&quot; name=&quot;SetProperty&quot; href=&quot;&quot;></xref>. A megfelelő meghívása attribútumot meg kell adni. Ha egy statikus tag nem hívható meg, hogy a <xref uid=&quot;langword_csharp_Static&quot; name=&quot;Static&quot; href=&quot;&quot;> </xref> jelzőt kell beállítani.'
    - id: binder
      type: System.Reflection.Binder
      description: "Olyan objektum, amely lehetővé teszi, hogy a kötés argumentum adhatók meg kell adnia, meghívási tagok, és lekérése <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> objektumok reflexió útján. Ha `binder` van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, az alapértelmezett kötő szolgál. See <xref href=&quot;System.Reflection.Binder&quot;></xref>."
    - id: target
      type: System.Object
      description: "Az objektum, amelyen meghívni a megadott tag."
    - id: args
      type: System.Object[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> , amely tartalmazza a száma, sorrendben és paraméterek tag típusának meg kell hívni. Ha `args` tartalmaz egy nem inicializált <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, akkor a rendszer üres, amely az alapértelmezett kötő is lehet játékosokat 0, 0,0 vagy egy karakterláncot."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_ParameterModifer&quot; name=&quot;ParameterModifer&quot; href=&quot;&quot;> </xref> , amely a hossza megegyezik `args`, az elemek, amelyek megfelelnek a tag meg kell hívni az argumentumokkal tartozó attribútumok. A paraméter a tag aláírásban társított attribútumokkal rendelkezik. A hivatkozási (ByRef), használjon <xref uid=&quot;langword_csharp_ParameterModifer.ByRef&quot; name=&quot;ParameterModifer.ByRef&quot; href=&quot;&quot;> </xref>, és sem, használjon <xref uid=&quot;langword_csharp_ParameterModifer.None&quot; name=&quot;ParameterModifer.None&quot; href=&quot;&quot;> </xref>. Az alapértelmezett kötő pontos ezekkel megfelelő. Attribútumok például <xref uid=&quot;langword_csharp_In&quot; name=&quot;In&quot; href=&quot;&quot;> </xref> és <xref uid=&quot;langword_csharp_InOut&quot; name=&quot;InOut&quot; href=&quot;&quot;> </xref> kötése nem szerepel, és megtekintheti a <xref uid=&quot;langword_csharp_ParameterInfo&quot; name=&quot;ParameterInfo&quot; href=&quot;&quot;> </xref>."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Példányának <xref uid=&quot;langword_csharp_CultureInfo&quot; name=&quot;CultureInfo&quot; href=&quot;&quot;> </xref> annak a szabályozására, a kényszerítési típusú használt. Szükség, például 1000-jelölő karakterlánccá konvertálni a <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> érték, mivel 1000 eltérő kulturális környezetek másképp képviseli. Ha `culture` van <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_CultureInfo&quot; name=&quot;CultureInfo&quot; href=&quot;&quot;> </xref> az aktuális szál <xref uid=&quot;langword_csharp_CultureInfo&quot; name=&quot;CultureInfo&quot; href=&quot;&quot;> </xref> szolgál."
    - id: namedParameters
      type: System.String[]
      description: "Típusú tömb <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tartalmazó paraméterek nevei, amelyek megfelelnek, kezdve elemben nulla, a `args` tömb. A tömb nem lyuk kell lennie. If `args`. <xref uid=&quot;langword_csharp_Length&quot; name=&quot;Length&quot; href=&quot;&quot;></xref>nagyobb, mint `namedParameters`. <xref uid=&quot;langword_csharp_Length&quot; name=&quot;Length&quot; href=&quot;&quot;></xref>, a fennmaradó paraméterek kitölti a sorrendben."
    return:
      type: System.Object
      description: "Egy <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> képviselő az eredményül kapott értéket a meghívott tag."
  overload: System.Reflection.TypeDelegator.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsArrayImpl
  id: IsArrayImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsArrayImpl()
  nameWithType: TypeDelegator.IsArrayImpl()
  fullName: System.Reflection.TypeDelegator.IsArrayImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja egy érték, amely azt jelzi, hogy a <xref:System.Type>tömb.</xref:System.Type>"
  syntax:
    content: protected override bool IsArrayImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Type>tömb; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsArrayImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsAssignableFrom(TypeInfo)
  nameWithType: TypeDelegator.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeDelegator.IsAssignableFrom(TypeInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy érték, amely azt jelzi, hogy kell-e a megadott típus rendelve ehhez a típushoz adja vissza."
  syntax:
    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: "Ellenőrizze a típus."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a megadott típus rendelhető ehhez a típushoz; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsAssignableFrom*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsByRefImpl
  id: IsByRefImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsByRefImpl()
  nameWithType: TypeDelegator.IsByRefImpl()
  fullName: System.Reflection.TypeDelegator.IsByRefImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja egy érték, amely azt jelzi, hogy a <xref:System.Type>hivatkozással lett átadva.</xref:System.Type>"
  syntax:
    content: protected override bool IsByRefImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Type>; hivatkozás szerinti átadása ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsByRefImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsCOMObjectImpl()
  nameWithType: TypeDelegator.IsCOMObjectImpl()
  fullName: System.Reflection.TypeDelegator.IsCOMObjectImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja egy érték, amely azt jelzi, hogy a <xref:System.Type>egy COM-objektum.</xref:System.Type>"
  syntax:
    content: protected override bool IsCOMObjectImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Type>egy COM objektum; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsCOMObjectImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsConstructedGenericType
  nameWithType: TypeDelegator.IsConstructedGenericType
  fullName: System.Reflection.TypeDelegator.IsConstructedGenericType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy érték, amely azt jelzi, hogy az objektum által jelképezett létrehozott általános típus beolvasása."
  syntax:
    content: public override bool IsConstructedGenericType { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha az objektum által jelképezett létrehozott általános típusú; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsConstructedGenericType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: TypeDelegator.IsDefined(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Azt jelzi, hogy egy egyéni attribútum által azonosított <code> attributeType </code> van definiálva."
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: "Megadja, hogy ez a típus öröklési lánc az attribútumok kereséséhez keressen-e."
    - id: inherit
      type: System.Boolean
      description: "Egyéni attribútumok azonosíthatók típus tömbje."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha egy egyéni attribútum által azonosított <code> attributeType </code> meghatározott; egyéb, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsDefined*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>attributeType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Reflection.ReflectionTypeLoadException
    commentId: T:System.Reflection.ReflectionTypeLoadException
    description: "Az egyéni attribútum típusa nem tölthető be."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsPointerImpl
  id: IsPointerImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsPointerImpl()
  nameWithType: TypeDelegator.IsPointerImpl()
  fullName: System.Reflection.TypeDelegator.IsPointerImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja egy érték, amely azt jelzi, hogy a <xref:System.Type>mutató.</xref:System.Type>"
  syntax:
    content: protected override bool IsPointerImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Type>mutató; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsPointerImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsPrimitiveImpl()
  nameWithType: TypeDelegator.IsPrimitiveImpl()
  fullName: System.Reflection.TypeDelegator.IsPrimitiveImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Visszaadja egy érték, amely azt jelzi, hogy a <xref:System.Type>a primitív típusok egyike.</xref:System.Type>"
  syntax:
    content: protected override bool IsPrimitiveImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref:System.Type>a primitív típusok egyike; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsPrimitiveImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsValueTypeImpl
  id: IsValueTypeImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsValueTypeImpl()
  nameWithType: TypeDelegator.IsValueTypeImpl()
  fullName: System.Reflection.TypeDelegator.IsValueTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Jelzi, hogy a típus egy értéktípus; értéket ad vissza Ez azt jelenti, hogy nem egy osztály vagy illesztőfelület."
  syntax:
    content: protected override bool IsValueTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a típusa nem értéktípus; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsValueTypeImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.MetadataToken
  id: MetadataToken
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: MetadataToken
  nameWithType: TypeDelegator.MetadataToken
  fullName: System.Reflection.TypeDelegator.MetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy érték, amely azonosítja az ehhez az entitáshoz metaadatok lekérése."
  remarks: "A jogkivonatok segítségével ezt a tulajdonságot a nem felügyelt reflexiós API adható át. További információkért lásd: [nem felügyelt reflexiós API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)."
  syntax:
    content: public override int MetadataToken { get; }
    return:
      type: System.Int32
      description: "Egy érték, a modul együtt egyedileg azonosítja a metaadatok ehhez az entitáshoz."
  overload: System.Reflection.TypeDelegator.MetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Module
  id: Module
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Module
  nameWithType: TypeDelegator.Module
  fullName: System.Reflection.TypeDelegator.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a megvalósított típusnak tartalmazó modult."
  remarks: "A modul az egy betölthető egység, amely tartalmazhat típusdeklarációkban és hitelesítés megvalósításához. Modulok tartalmaz elég információt minden megvalósítási bit megkeresése, ha a modul be van töltve a közös nyelvi futtatókörnyezet engedélyezéséhez."
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: "A <xref:System.Reflection.Module>a megvalósított típusnak modult képviselő objektum.</xref:System.Reflection.Module>"
  overload: System.Reflection.TypeDelegator.Module*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Name
  id: Name
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Name
  nameWithType: TypeDelegator.Name
  fullName: System.Reflection.TypeDelegator.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a megvalósított típus neve eltávolítani az elérési úttal."
  remarks: "Az aktuális nevét tartalmazó karakterlánc `TypeDelegator`. Csak az egyszerű nevet, a teljesen minősített név nem ad vissza. A neve és elérési útját, amelyet <xref:System.Reflection.TypeDelegator.FullName%2A>.</xref:System.Reflection.TypeDelegator.FullName%2A>"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tartalmazó a típusú, nem minősített név."
  overload: System.Reflection.TypeDelegator.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Namespace
  id: Namespace
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Namespace
  nameWithType: TypeDelegator.Namespace
  fullName: System.Reflection.TypeDelegator.Namespace
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a megvalósított típusnak névtere."
  remarks: "Ez a tulajdonság lekérdezi az aktuális a névteret tartalmazó karakterláncot `TypeDelegator`. Például ha a `TypeDelegator` , akkor <xref:System.Reflection.TypeFilter>a visszaadott névtere <xref:System.Reflection>.</xref:System.Reflection> </xref:System.Reflection.TypeFilter>"
  syntax:
    content: public override string Namespace { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tartalmazó a típusú névtér."
  overload: System.Reflection.TypeDelegator.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.TypeHandle
  id: TypeHandle
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: TypeHandle
  nameWithType: TypeDelegator.TypeHandle
  fullName: System.Reflection.TypeDelegator.TypeHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi a belső metaadatok ábrázolását megvalósított típusa leírót."
  remarks: "Egy típus leíró egyedi egész szám érték minden egyes társítva. A leíró egyedi a futtatás során."
  syntax:
    content: public override RuntimeTypeHandle TypeHandle { get; }
    return:
      type: System.RuntimeTypeHandle
      description: "A <xref uid=&quot;langword_csharp_RuntimeTypeHandle&quot; name=&quot;RuntimeTypeHandle&quot; href=&quot;&quot;></xref> object."
  overload: System.Reflection.TypeDelegator.TypeHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.typeImpl
  id: typeImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: typeImpl
  nameWithType: TypeDelegator.typeImpl
  fullName: System.Reflection.TypeDelegator.typeImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Egy érték jelző típussal kapcsolatos információk."
  syntax:
    content: protected Type typeImpl;
    return:
      type: System.Type
      description: "Fel kell venni a párbeszédpanelre."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: TypeDelegator.UnderlyingSystemType
  fullName: System.Reflection.TypeDelegator.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Lekérdezi az alapul szolgáló <xref:System.Type>, amely a megvalósított típust jelöli.</xref:System.Type>"
  syntax:
    content: public override Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "Az alapul szolgáló típusa."
  overload: System.Reflection.TypeDelegator.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.TypeInfo
  isExternal: false
  name: System.Reflection.TypeInfo
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.TypeLoadException
  isExternal: true
  name: System.TypeLoadException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.ReflectionTypeLoadException
  isExternal: true
  name: System.Reflection.ReflectionTypeLoadException
- uid: System.Reflection.TypeDelegator.#ctor
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeDelegator()
  nameWithType: TypeDelegator.TypeDelegator()
  fullName: System.Reflection.TypeDelegator.TypeDelegator()
- uid: System.Reflection.TypeDelegator.#ctor(System.Type)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeDelegator(Type)
  nameWithType: TypeDelegator.TypeDelegator(Type)
  fullName: System.Reflection.TypeDelegator.TypeDelegator(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.TypeDelegator.Assembly
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Assembly
  nameWithType: TypeDelegator.Assembly
  fullName: System.Reflection.TypeDelegator.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: TypeDelegator.AssemblyQualifiedName
  fullName: System.Reflection.TypeDelegator.AssemblyQualifiedName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeDelegator.BaseType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: BaseType
  nameWithType: TypeDelegator.BaseType
  fullName: System.Reflection.TypeDelegator.BaseType
- uid: System.Reflection.TypeDelegator.FullName
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: FullName
  nameWithType: TypeDelegator.FullName
  fullName: System.Reflection.TypeDelegator.FullName
- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetAttributeFlagsImpl()
  nameWithType: TypeDelegator.GetAttributeFlagsImpl()
  fullName: System.Reflection.TypeDelegator.GetAttributeFlagsImpl()
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: true
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructors(BindingFlags)
  nameWithType: TypeDelegator.GetConstructors(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetConstructors(BindingFlags)
- uid: System.Reflection.ConstructorInfo[]
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo[]
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: ConstructorInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Boolean)
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Type,Boolean)
- uid: System.Reflection.TypeDelegator.GetElementType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetElementType()
  nameWithType: TypeDelegator.GetElementType()
  fullName: System.Reflection.TypeDelegator.GetElementType()
- uid: System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvent(String,BindingFlags)
  nameWithType: TypeDelegator.GetEvent(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvent(String,BindingFlags)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Reflection.TypeDelegator.GetEvents
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvents()
  nameWithType: TypeDelegator.GetEvents()
  fullName: System.Reflection.TypeDelegator.GetEvents()
- uid: System.Reflection.EventInfo[]
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo[]
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: EventInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvents(BindingFlags)
  nameWithType: TypeDelegator.GetEvents(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvents(BindingFlags)
- uid: System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: TypeDelegator.GetField(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: TypeDelegator.GetFields(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterface(String,Boolean)
  nameWithType: TypeDelegator.GetInterface(String,Boolean)
  fullName: System.Reflection.TypeDelegator.GetInterface(String,Boolean)
- uid: System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaceMap(Type)
  nameWithType: TypeDelegator.GetInterfaceMap(Type)
  fullName: System.Reflection.TypeDelegator.GetInterfaceMap(Type)
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: true
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
- uid: System.Reflection.TypeDelegator.GetInterfaces
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaces()
  nameWithType: TypeDelegator.GetInterfaces()
  fullName: System.Reflection.TypeDelegator.GetInterfaces()
- uid: System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: TypeDelegator.GetMembers(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMembers(BindingFlags)
- uid: System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: TypeDelegator.GetMethods(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedType(String,BindingFlags)
  nameWithType: TypeDelegator.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedType(String,BindingFlags)
- uid: System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedTypes(BindingFlags)
  nameWithType: TypeDelegator.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedTypes(BindingFlags)
- uid: System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: TypeDelegator.GetProperties(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.TypeDelegator.GUID
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GUID
  nameWithType: TypeDelegator.GUID
  fullName: System.Reflection.TypeDelegator.GUID
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.TypeDelegator.HasElementTypeImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: HasElementTypeImpl()
  nameWithType: TypeDelegator.HasElementTypeImpl()
  fullName: System.Reflection.TypeDelegator.HasElementTypeImpl()
- uid: System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.IsArrayImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsArrayImpl()
  nameWithType: TypeDelegator.IsArrayImpl()
  fullName: System.Reflection.TypeDelegator.IsArrayImpl()
- uid: System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsAssignableFrom(TypeInfo)
  nameWithType: TypeDelegator.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeDelegator.IsAssignableFrom(TypeInfo)
- uid: System.Reflection.TypeDelegator.IsByRefImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsByRefImpl()
  nameWithType: TypeDelegator.IsByRefImpl()
  fullName: System.Reflection.TypeDelegator.IsByRefImpl()
- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsCOMObjectImpl()
  nameWithType: TypeDelegator.IsCOMObjectImpl()
  fullName: System.Reflection.TypeDelegator.IsCOMObjectImpl()
- uid: System.Reflection.TypeDelegator.IsConstructedGenericType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: TypeDelegator.IsConstructedGenericType
  fullName: System.Reflection.TypeDelegator.IsConstructedGenericType
- uid: System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: TypeDelegator.IsDefined(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.IsDefined(Type,Boolean)
- uid: System.Reflection.TypeDelegator.IsPointerImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPointerImpl()
  nameWithType: TypeDelegator.IsPointerImpl()
  fullName: System.Reflection.TypeDelegator.IsPointerImpl()
- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPrimitiveImpl()
  nameWithType: TypeDelegator.IsPrimitiveImpl()
  fullName: System.Reflection.TypeDelegator.IsPrimitiveImpl()
- uid: System.Reflection.TypeDelegator.IsValueTypeImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsValueTypeImpl()
  nameWithType: TypeDelegator.IsValueTypeImpl()
  fullName: System.Reflection.TypeDelegator.IsValueTypeImpl()
- uid: System.Reflection.TypeDelegator.MetadataToken
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: MetadataToken
  nameWithType: TypeDelegator.MetadataToken
  fullName: System.Reflection.TypeDelegator.MetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.TypeDelegator.Module
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Module
  nameWithType: TypeDelegator.Module
  fullName: System.Reflection.TypeDelegator.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.TypeDelegator.Name
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Name
  nameWithType: TypeDelegator.Name
  fullName: System.Reflection.TypeDelegator.Name
- uid: System.Reflection.TypeDelegator.Namespace
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Namespace
  nameWithType: TypeDelegator.Namespace
  fullName: System.Reflection.TypeDelegator.Namespace
- uid: System.Reflection.TypeDelegator.TypeHandle
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeHandle
  nameWithType: TypeDelegator.TypeHandle
  fullName: System.Reflection.TypeDelegator.TypeHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.TypeDelegator.typeImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: typeImpl
  nameWithType: TypeDelegator.typeImpl
  fullName: System.Reflection.TypeDelegator.typeImpl
- uid: System.Reflection.TypeDelegator.UnderlyingSystemType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: TypeDelegator.UnderlyingSystemType
  fullName: System.Reflection.TypeDelegator.UnderlyingSystemType
- uid: System.Reflection.TypeDelegator.#ctor*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeDelegator
  nameWithType: TypeDelegator.TypeDelegator
- uid: System.Reflection.TypeDelegator.Assembly*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Assembly
  nameWithType: TypeDelegator.Assembly
- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: TypeDelegator.AssemblyQualifiedName
- uid: System.Reflection.TypeDelegator.BaseType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: BaseType
  nameWithType: TypeDelegator.BaseType
- uid: System.Reflection.TypeDelegator.FullName*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: FullName
  nameWithType: TypeDelegator.FullName
- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetAttributeFlagsImpl
  nameWithType: TypeDelegator.GetAttributeFlagsImpl
- uid: System.Reflection.TypeDelegator.GetConstructorImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructorImpl
  nameWithType: TypeDelegator.GetConstructorImpl
- uid: System.Reflection.TypeDelegator.GetConstructors*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructors
  nameWithType: TypeDelegator.GetConstructors
- uid: System.Reflection.TypeDelegator.GetCustomAttributes*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetCustomAttributes
  nameWithType: TypeDelegator.GetCustomAttributes
- uid: System.Reflection.TypeDelegator.GetElementType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetElementType
  nameWithType: TypeDelegator.GetElementType
- uid: System.Reflection.TypeDelegator.GetEvent*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvent
  nameWithType: TypeDelegator.GetEvent
- uid: System.Reflection.TypeDelegator.GetEvents*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvents
  nameWithType: TypeDelegator.GetEvents
- uid: System.Reflection.TypeDelegator.GetField*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetField
  nameWithType: TypeDelegator.GetField
- uid: System.Reflection.TypeDelegator.GetFields*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetFields
  nameWithType: TypeDelegator.GetFields
- uid: System.Reflection.TypeDelegator.GetInterface*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterface
  nameWithType: TypeDelegator.GetInterface
- uid: System.Reflection.TypeDelegator.GetInterfaceMap*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaceMap
  nameWithType: TypeDelegator.GetInterfaceMap
- uid: System.Reflection.TypeDelegator.GetInterfaces*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaces
  nameWithType: TypeDelegator.GetInterfaces
- uid: System.Reflection.TypeDelegator.GetMember*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMember
  nameWithType: TypeDelegator.GetMember
- uid: System.Reflection.TypeDelegator.GetMembers*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMembers
  nameWithType: TypeDelegator.GetMembers
- uid: System.Reflection.TypeDelegator.GetMethodImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethodImpl
  nameWithType: TypeDelegator.GetMethodImpl
- uid: System.Reflection.TypeDelegator.GetMethods*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethods
  nameWithType: TypeDelegator.GetMethods
- uid: System.Reflection.TypeDelegator.GetNestedType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedType
  nameWithType: TypeDelegator.GetNestedType
- uid: System.Reflection.TypeDelegator.GetNestedTypes*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedTypes
  nameWithType: TypeDelegator.GetNestedTypes
- uid: System.Reflection.TypeDelegator.GetProperties*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetProperties
  nameWithType: TypeDelegator.GetProperties
- uid: System.Reflection.TypeDelegator.GetPropertyImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetPropertyImpl
  nameWithType: TypeDelegator.GetPropertyImpl
- uid: System.Reflection.TypeDelegator.GUID*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GUID
  nameWithType: TypeDelegator.GUID
- uid: System.Reflection.TypeDelegator.HasElementTypeImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: HasElementTypeImpl
  nameWithType: TypeDelegator.HasElementTypeImpl
- uid: System.Reflection.TypeDelegator.InvokeMember*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: InvokeMember
  nameWithType: TypeDelegator.InvokeMember
- uid: System.Reflection.TypeDelegator.IsArrayImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsArrayImpl
  nameWithType: TypeDelegator.IsArrayImpl
- uid: System.Reflection.TypeDelegator.IsAssignableFrom*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsAssignableFrom
  nameWithType: TypeDelegator.IsAssignableFrom
- uid: System.Reflection.TypeDelegator.IsByRefImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsByRefImpl
  nameWithType: TypeDelegator.IsByRefImpl
- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsCOMObjectImpl
  nameWithType: TypeDelegator.IsCOMObjectImpl
- uid: System.Reflection.TypeDelegator.IsConstructedGenericType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: TypeDelegator.IsConstructedGenericType
- uid: System.Reflection.TypeDelegator.IsDefined*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsDefined
  nameWithType: TypeDelegator.IsDefined
- uid: System.Reflection.TypeDelegator.IsPointerImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPointerImpl
  nameWithType: TypeDelegator.IsPointerImpl
- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPrimitiveImpl
  nameWithType: TypeDelegator.IsPrimitiveImpl
- uid: System.Reflection.TypeDelegator.IsValueTypeImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsValueTypeImpl
  nameWithType: TypeDelegator.IsValueTypeImpl
- uid: System.Reflection.TypeDelegator.MetadataToken*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: MetadataToken
  nameWithType: TypeDelegator.MetadataToken
- uid: System.Reflection.TypeDelegator.Module*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Module
  nameWithType: TypeDelegator.Module
- uid: System.Reflection.TypeDelegator.Name*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Name
  nameWithType: TypeDelegator.Name
- uid: System.Reflection.TypeDelegator.Namespace*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Namespace
  nameWithType: TypeDelegator.Namespace
- uid: System.Reflection.TypeDelegator.TypeHandle*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeHandle
  nameWithType: TypeDelegator.TypeHandle
- uid: System.Reflection.TypeDelegator.UnderlyingSystemType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: TypeDelegator.UnderlyingSystemType
