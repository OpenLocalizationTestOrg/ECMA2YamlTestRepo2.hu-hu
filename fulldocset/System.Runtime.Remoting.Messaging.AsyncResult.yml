### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.AsyncResult
  id: AsyncResult
  children:
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  - System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  - System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  - System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  - System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  - System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  - System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  - System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  langs:
  - csharp
  name: AsyncResult
  nameWithType: AsyncResult
  fullName: System.Runtime.Remoting.Messaging.AsyncResult
  type: Class
  summary: "Magában foglalja a delegált aszinkron művelet eredményét."
  remarks: "Az AsyncResult osztály delegáltak használatával végrehajtott aszinkron metódushívások együtt használatos. A <xref:System.IAsyncResult>a delegált által visszaadott `BeginInvoke` módszer is konvertálható egy AsyncResult objektumra.</xref:System.IAsyncResult> Az AsyncResult rendelkezik a <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>tulajdonság, amely tartalmazza a delegált objektum a következő az aszinkron hívás indították.</xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>       További információ `BeginInvoke` és aszinkron delegáltak használatával hívások [aszinkron programozás használatával delegáltak](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/t-system.runtime.remotin_18_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/t-system.runtime.remotin_18_1.cpp)]  \n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_2.vb)]\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/t-system.runtime.remotin_18_2.cpp)]\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/t-system.runtime.remotin_18_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.Runtime.Remoting.Messaging.IMessageSink
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  id: AsyncDelegate
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Lekérdezi a delegált objektum az aszinkron hívás elindítva."
  remarks: "A felhasználó által definiált delegált tényleges osztály is konvertálható AsyncDelegate tulajdonság.       Például, ha a meghatalmazott, és az aszinkron hívást használt típusú `MyDelegate`, a meghatalmazott, és ez a tulajdonság által visszaadott kell konvertálható `MyDelegate`. A visszahívási metódus majd meghívhatja a delegált `EndInvoke` aszinkron metódus hívása az eredmények elérése érdekében a megfelelő aláírással rendelkező metódust."
  example:
  - "The following code example demonstrates how to use the AsyncDelegate property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`. The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_95_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_95_1.cpp)]  \n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_95_2.cs)]\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_95_2.cpp)]\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_2.vb)]"
  syntax:
    content: public virtual object AsyncDelegate { get; }
    return:
      type: System.Object
      description: "A delegált objektum az aszinkron hívás elindítva."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  id: AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Megvalósítja a <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;> </xref> felületet."
  remarks: "Az <xref:System.Runtime.Remoting.Messaging.IMessageSink>illesztő nem megfelelő az <xref:System.Runtime.Remoting.Messaging.AsyncResult>osztály</xref:System.Runtime.Remoting.Messaging.AsyncResult> </xref:System.Runtime.Remoting.Messaging.IMessageSink> AsyncProcessMessage módszer Megvalósítás által <xref:System.Runtime.Remoting.Messaging.AsyncResult> <xref:System.NotSupportedException>.</xref:System.NotSupportedException> jelez</xref:System.Runtime.Remoting.Messaging.AsyncResult> Ehelyett az beszerzése egy <xref:System.Runtime.Remoting.Messaging.AsyncResult>leadó által a <xref:System.IAsyncResult>kapcsolat egy delegált használatával létrehozott egy aszinkron hívás által visszaadott.</xref:System.IAsyncResult> </xref:System.Runtime.Remoting.Messaging.AsyncResult>"
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "A kérelem <xref href=&quot;System.Runtime.Remoting.Messaging.IMessage&quot;> </xref> felületet."
    - id: replySink
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "A válasz <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;> </xref> felületet."
    return:
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "Nincs értéket adja vissza."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  id: AsyncState
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Az objektum utolsó paraméterének megadott lekérdezi egy <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> metódus hívása."
  remarks: "További információ a `BeginInvoke` módszer, lásd: [aszinkron programozás használatával delegáltak](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how the AsyncState property is used to pass information to a callback method. The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_83_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_83_1.cpp)]  \n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_83_2.cs)]\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_83_2.cpp)]\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_2.vb)]"
  syntax:
    content: public virtual object AsyncState { get; }
    return:
      type: System.Object
      description: "Az objektum utolsó paraméterének megadott egy <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> metódus hívása."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Lekérdezi a <xref:System.Threading.WaitHandle>, amely magában foglalja a Win32 szinkronizálási leíróknak, és lehetővé teszi, hogy az egyes szinkronizálási rendszerek.</xref:System.Threading.WaitHandle>"
  remarks: "A <xref:System.Threading.WaitHandle>által visszaadott metódus automatikusan leállítási jelzést kapott az aszinkron művelet befejeződésekor.</xref:System.Threading.WaitHandle>       A várakozási leíró nincs bezárva automatikusan, ha meghívja a `EndInvoke` a delegálton, ellenőrizze az aszinkron metódus hívása használt. Ha a várakozási leíró mutató összes hivatkozást, rendszererőforrásokat amikor szemétgyűjtés úgy szabadít fel a várakozási leíró felszabadítását. A rendszererőforrásokat felszabadítani, amint elkészült, a várakozási leíró használatával, hívja meg a <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName>metódus.</xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> A szemétgyűjtés hatékonyabban működik, ha a rendelkezésre álló objektumok explicit módon lezárták vagy eltávolították.      > [!CAUTION] > A <xref:System.Threading.WaitHandle>található a tulajdonság akkor használható, az aktuális szál letiltása, amíg befejeződik az aszinkron hívás AsyncWaitHandle.</xref:System.Threading.WaitHandle> Azonban a <xref:System.Threading.WaitHandle>figyelmen kívül hagyja a <xref:System.AsyncCallback>, ha közben megadott egyik a `BeginInvoke` hívása.</xref:System.AsyncCallback> </xref:System.Threading.WaitHandle> Ezért olyan helyzet akkor fordulhat elő, ha előtt leállítja az alkalmazás a <xref:System.AsyncCallback>, végrehajtása befejeződött akkor is, ha egy <xref:System.Threading.WaitHandle>használt címblokkra aszinkron hívás elvégzéséig.</xref:System.Threading.WaitHandle> </xref:System.AsyncCallback> Például egy ilyen helyzet, tekintse meg a következő példa a <xref:System.Runtime.Remoting.Messaging.AsyncResult>osztály, és távolítsa el a <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName>utasítást.</xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> </xref:System.Runtime.Remoting.Messaging.AsyncResult>"
  example:
  - "The following example demonstrates how to use the AsyncWaitHandle property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_47_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_47_1.cpp)]  \n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_2.vb)]\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/p-system.runtime.remotin_47_2.cpp)]\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/p-system.runtime.remotin_47_2.cs)]"
  syntax:
    content: public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A <xref:System.Threading.WaitHandle>, amely magában foglalja a Win32 szinkronizálási leíróknak, és lehetővé teszi, hogy az egyes szinkronizálási rendszerek.</xref:System.Threading.WaitHandle>"
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Lekérdezi, hogy egy érték, amely jelzi, hogy a <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> hívás szinkron módon befejeződött."
  remarks: "Ha észlelhető, amely a `BeginInvoke` hívás befejeződött, a szinkron módon történik a <xref:System.AsyncCallback>delegált, valószínű, hogy a szál BeginInvoke nevezett-e az aktuális szál.</xref:System.AsyncCallback> A legtöbb szolgáltatók esetén a <xref:System.IAsyncResult>felület a funkció nem fog használni, és visszatér az alapértelmezett `false`.</xref:System.IAsyncResult>       Jelenlegi implementációja CompletedSynchronously mindig adja vissza `false`."
  syntax:
    content: public virtual bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha a <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> hívás befejeződött, a szinkron módon történik; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  id: EndInvokeCalled
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Lekérdezi vagy beállítja, hogy egy érték, amely jelzi, hogy <xref uid=&quot;langword_csharp_EndInvoke&quot; name=&quot;EndInvoke&quot; href=&quot;&quot;> </xref> meghívása az aktuális <xref href=&quot;System.Runtime.Remoting.Messaging.AsyncResult&quot;> </xref>."
  syntax:
    content: public bool EndInvokeCalled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ha <xref uid=&quot;langword_csharp_EndInvoke&quot; name=&quot;EndInvoke&quot; href=&quot;&quot;> </xref> meghívása az aktuális <xref href=&quot;System.Runtime.Remoting.Messaging.AsyncResult&quot;> </xref>; ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  id: GetReplyMessage
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: GetReplyMessage()
  nameWithType: AsyncResult.GetReplyMessage()
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "A válaszüzenet lekérdezi az aszinkron hívás."
  remarks: "A GetReplyMessage metódus után objektum visszatérhet a <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A>metódust.</xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> A <xref:System.Runtime.Remoting.Messaging.IMessage>visszatérési érték is konvertálható <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.</xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> </xref:System.Runtime.Remoting.Messaging.IMessage>       Azonban nem kell hívnia egyik módszert sem közvetlenül. Ezek használatra lettek tervezve a távelérési infrastruktúra a .NET-keretrendszer."
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();
    parameters: []
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Kell meghatároznia a metódus hívásakor a távoli objektumon történő távoli eljáráshívási üzenet."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Egy érték, amely jelzi, hogy a kiszolgáló befejezte a hívás lekéri."
  remarks: "A kiszolgáló nem használhatják a megállapodás szerinti kívül bármely ügyfél által megadott erőforrások megosztása szemantikájának módosítása után a IsCompleted tulajdonság értékre állítja, `true`. Így az ügyfél számára után a IsCompleted tulajdonság adja vissza, szüntesse meg az erőforrások biztonságos `true`."
  example:
  - "The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes. You might do this when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_39_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_39_1.cpp)]  \n[!code-cpp[AsyncDelegateExamples#4](~/add/codesnippet/cpp/p-system.runtime.remotin_39_2.cpp)]\n[!code-cs[AsyncDelegateExamples#4](~/add/codesnippet/csharp/p-system.runtime.remotin_39_2.cs)]\n[!code-vb[AsyncDelegateExamples#4](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_2.vb)]"
  syntax:
    content: public virtual bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Miután a kiszolgáló befejezte a hívás; Ellenkező esetben <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  id: NextSink
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: NextSink
  nameWithType: AsyncResult.NextSink
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "A következő üzenetet fogadó a fogadó lánc lekérdezi."
  remarks: "A jelenlegi implementációja NextSink adja vissza `null`."
  syntax:
    content: public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }
    return:
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "Egy <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;> </xref> a fogadó lánc gyűjtése felület, amely a következő üzenet jelöli."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  id: SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: SetMessageCtrl(IMessageCtrl)
  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Beállítja egy <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;> </xref> az aktuális távoli metódus hívásához, amely biztosítja az aszinkron üzenetek szabályozásához, azok elküldése után."
  remarks: "Nem kell a SetMessageCtrl metódus meghívására."
  syntax:
    content: public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);
    parameters:
    - id: mc
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "A <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;> </xref> az aktuális távoli metódus hívásához."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  id: SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: SyncProcessMessage(IMessage)
  nameWithType: AsyncResult.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Szinkron módon dolgozza fel a távoli objektumon található metódus hívásával vissza válaszüzenetet."
  remarks: "A SyncProcessMessage metódus valósítja meg a <xref:System.Runtime.Remoting.Messaging.IMessageSink>felületet.</xref:System.Runtime.Remoting.Messaging.IMessageSink> Nem kell közvetlenül ez a metódus meghívható. Azt a távoli eljáráshívási infrastruktúrában a .NET-keretrendszer készült való használatra.       SyncProcessMessage hív meg, a felhasználói kód <xref:System.AsyncCallback>delegálása.</xref:System.AsyncCallback> Azt állítja be a <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>által visszaadott példány a <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>metódus.</xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> </xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> Ha a `msg` paraméter típusa <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>.</xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> ugyanazt az objektumot ad vissza</xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> Ellenkező esetben a válaszüzenet, amely tartalmazza a távoli eljáráshívás kivételt adott vissza.       SyncProcessMessage módosítja a által visszaadott érték a <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>tulajdonság.</xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>"
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "A távoli objektumon metódus hívásakor a válaszüzenetet."
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
- uid: System.Runtime.Remoting.Messaging.IMessageCtrl
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageCtrl
  nameWithType: IMessageCtrl
  fullName: System.Runtime.Remoting.Messaging.IMessageCtrl
- uid: System.Runtime.Remoting.Messaging.IMessage
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: System.Runtime.Remoting.Messaging.IMessage
- uid: System.Runtime.Remoting.Messaging.IMessageSink
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageSink
  nameWithType: IMessageSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: GetReplyMessage()
  nameWithType: AsyncResult.GetReplyMessage()
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: NextSink
  nameWithType: AsyncResult.NextSink
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SetMessageCtrl(IMessageCtrl)
  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SyncProcessMessage(IMessage)
  nameWithType: AsyncResult.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncProcessMessage
  nameWithType: AsyncResult.AsyncProcessMessage
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: GetReplyMessage
  nameWithType: AsyncResult.GetReplyMessage
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: NextSink
  nameWithType: AsyncResult.NextSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SetMessageCtrl
  nameWithType: AsyncResult.SetMessageCtrl
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SyncProcessMessage
  nameWithType: AsyncResult.SyncProcessMessage
