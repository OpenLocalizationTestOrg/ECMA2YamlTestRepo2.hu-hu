### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "Kulcs karakterláncnak társítja <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> megadását <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> objektumok."
  remarks: "A szemantikai kifejezés System.Speech alapvető egysége van a <xref:System.Speech.Recognition.SemanticValue>, amely a kulcs/érték pár.</xref:System.Speech.Recognition.SemanticValue>       SemanticResultKey-objektumok segítségével címkéz <xref:System.Speech.Recognition.SemanticResultValue>lévő példányok <xref:System.Speech.Recognition.GrammarBuilder>objektumokat, és úgy, hogy az értékek könnyen előfordulhat, hogy elérhető a karakterláncok <xref:System.Speech.Recognition.SemanticValue>példányok a felismerési.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>       Használhat <xref:System.Speech.Recognition.SemanticResultValue>és SemanticResultKey objektumok együtt <xref:System.Speech.Recognition.GrammarBuilder>és <xref:System.Speech.Recognition.Choices>objektumok, a beszédfelismerés felismerés nyelvtanhoz szemantikai struktúra.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> Felismerés eredményben Szemantikus információk eléréséhez szerezze be <xref:System.Speech.Recognition.SemanticValue>a <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>tulajdonság a <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> keresztül</xref:System.Speech.Recognition.SemanticValue> példánya       Használatáról további információt <xref:System.Speech.Recognition.SemanticResultValue>és SemanticResultKey objektumok, lásd: [ismertetése SemanticResultValue és SemanticResultKey objektumok](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) és [egy SemanticResultKey segítségével bontsa ki a SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) a a [rendszer beszéd programozási útmutató a .NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "A szemantikai kulcs rendel hozzá egy vagy több <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> a beszédfelismerés felismerés nyelvtan létrehozásához használt objektumok."
  remarks: "Implicit konverzió, mert a `builders` argumentum támogatja <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, és <xref:System.String>objektumokat is szerepeltethet.</xref:System.String> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> Implicit konverzió további információkért lásd: <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       A felismerési művelet végrehajtása során a <xref:System.Speech.Recognition.GrammarBuilder>található objektumok a `builders` argumentumot kell kezelni, soros.</xref:System.Speech.Recognition.GrammarBuilder> Például ha a következő <xref:System.Speech.Recognition.SemanticResultValue>segítségével hozza létre a <xref:System.Speech.Recognition.Grammar>, a felismerési bemenete tartalmaznia kell a &quot;hol nem volt&quot; szavak sorrendben ismeri.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ```A `semanticResultKey` argumentumot tartalmaz, a használt kód eléréséhez a <xref:System.Speech.Recognition.SemanticValue>amely esetleg visszaadott.</xref:System.Speech.Recognition.SemanticValue>       A <xref:System.Speech.Recognition.SemanticValue.Value%2A>, a <xref:System.Speech.Recognition.SemanticValue>határozza meg a <xref:System.Speech.Recognition.GrammarBuilder>példány által biztosított a `builders` paraméter.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       Ha a <xref:System.Speech.Recognition.GrammarBuilder>objektumok definiáló példánya sem tartalmazhat <xref:System.Speech.Recognition.SemanticResultValue>, értékét a <xref:System.Speech.Recognition.SemanticValue>van `null`.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>       Ha a <xref:System.Speech.Recognition.GrammarBuilder>található objektumok a `builders` paraméter adja meg egy címke nélküli (nincs társítva egy <xref:System.Speech.Recognition.SemanticResultKey>objektum) <xref:System.Speech.Recognition.SemanticResultValue>felismerés logikát, adott példánya által használt példány <xref:System.Speech.Recognition.SemanticResultValue>határozza meg az a <xref:System.Speech.Recognition.SemanticValue.Value%2A>tulajdonsága a <xref:System.Speech.Recognition.SemanticValue>előállított.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder>       Lennie kell egy, és csak egy címkézetlen <xref:System.Speech.Recognition.SemanticResultValue>a példányt a <xref:System.Speech.Recognition.GrammarBuilder>által meghatározott objektumok a `builders` paraméter.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> Ha több példánya címkézetlen <xref:System.Speech.Recognition.SemanticResultValue>társított a <xref:System.Speech.Recognition.SemanticResultKey>, minden egyes megkísérli a készlet értékének a <xref:System.Speech.Recognition.SemanticValue>a felismerési eredmény előállított.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> Ez nem engedélyezett, és a felismerő kivételt hoz létre, amikor megkísérli használni egy <xref:System.Speech.Recognition.Grammar>létre például egy <xref:System.Speech.Recognition.SemanticResultKey>példány.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Grammar>       Példányai <xref:System.Speech.Recognition.SemanticResultValue>szerepel a <xref:System.Speech.Recognition.GrammarBuilder>által meghatározott objektumok a `builders` paraméter és a már társítva van egy másik <xref:System.Speech.Recognition.SemanticResultKey>nincsenek hatással az aktuális <xref:System.Speech.Recognition.SemanticResultKey>példány.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "A címkéhez való eléréséhez használható szemantikai kulcsként a <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> társított példány a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> által meghatározott objektumok a `builders` argumentum."
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "Egy tömb nyelvtan összetevők lesznek társítva egy <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> érhetők el a meghatározott címke objektum `semanticResultKey`."
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "A szemantikai kulcs rendel hozzá egy vagy több <xref:System.String>a beszédfelismerés felismerés nyelvtan létrehozásához használt példányok.</xref:System.String>"
  remarks: "A felismerési művelet végrehajtása során a <xref:System.String>használt objektumok a `phrases` paraméter kell kezelni, soros.</xref:System.String> Például ha a következő <xref:System.Speech.Recognition.SemanticResultValue>segítségével hozza létre a <xref:System.Speech.Recognition.Grammar>, a felismerési bemenete tartalmaznia kell a &quot;hol nem volt&quot; szavak sorrendben ismeri.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ```A `semanticResultKey` argumentum meghatározza, hogy a kulcs eléréséhez a <xref:System.Speech.Recognition.SemanticValue>amely esetleg visszaadott.</xref:System.Speech.Recognition.SemanticValue>       Ha a létrehozott egy <xref:System.Speech.Recognition.Grammar>használatával egy <xref:System.Speech.Recognition.GrammarBuilder>objektum, amely egy karakterlánc objektumokból álló tömb szemantikai kulcsot tartalmazza a <xref:System.Speech.Recognition.SemanticValue.Value%2A>, a <xref:System.Speech.Recognition.SemanticValue>a felismerési művelet által létrehozott lesz a felismerés során használt karakterlánc.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar> Az előző példában ez azt jelenti, hogy <xref:System.Speech.Recognition.SemanticValue.Value%2A>&quot;hol nem volt&quot; lenne.</xref:System.Speech.Recognition.SemanticValue.Value%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "A címke kell hozzáférés használt a <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> társított példány a <xref:System.String>által meghatározott objektumok a `phrases` argumentum.</xref:System.String>"
    - id: phrases
      type: System.String[]
      description: "Egy vagy több <xref:System.String>objektumok, amelyek összefűzött szöveg társított egy <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> érhetők el a meghatározott címke objektum `semanticResultKey`.</xref:System.String>"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Egy példányát adja vissza <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> az aktuális értékekből összeállított <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> példány."
  remarks: "Használatát <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>használata egyenértékű a <xref:System.Speech.Recognition.GrammarBuilder>konstruktort, amely fogad <xref:System.Speech.Recognition.SemanticResultKey>argumentumként (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Egy példányát adja vissza <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> az aktuális értékekből összeállított <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> példány."
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
