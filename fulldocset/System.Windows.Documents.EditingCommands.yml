### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.EditingCommands
  id: EditingCommands
  children:
  - System.Windows.Documents.EditingCommands.AlignCenter
  - System.Windows.Documents.EditingCommands.AlignJustify
  - System.Windows.Documents.EditingCommands.AlignLeft
  - System.Windows.Documents.EditingCommands.AlignRight
  - System.Windows.Documents.EditingCommands.Backspace
  - System.Windows.Documents.EditingCommands.CorrectSpellingError
  - System.Windows.Documents.EditingCommands.DecreaseFontSize
  - System.Windows.Documents.EditingCommands.DecreaseIndentation
  - System.Windows.Documents.EditingCommands.Delete
  - System.Windows.Documents.EditingCommands.DeleteNextWord
  - System.Windows.Documents.EditingCommands.DeletePreviousWord
  - System.Windows.Documents.EditingCommands.EnterLineBreak
  - System.Windows.Documents.EditingCommands.EnterParagraphBreak
  - System.Windows.Documents.EditingCommands.IgnoreSpellingError
  - System.Windows.Documents.EditingCommands.IncreaseFontSize
  - System.Windows.Documents.EditingCommands.IncreaseIndentation
  - System.Windows.Documents.EditingCommands.MoveDownByLine
  - System.Windows.Documents.EditingCommands.MoveDownByPage
  - System.Windows.Documents.EditingCommands.MoveDownByParagraph
  - System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  - System.Windows.Documents.EditingCommands.MoveLeftByWord
  - System.Windows.Documents.EditingCommands.MoveRightByCharacter
  - System.Windows.Documents.EditingCommands.MoveRightByWord
  - System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  - System.Windows.Documents.EditingCommands.MoveToDocumentStart
  - System.Windows.Documents.EditingCommands.MoveToLineEnd
  - System.Windows.Documents.EditingCommands.MoveToLineStart
  - System.Windows.Documents.EditingCommands.MoveUpByLine
  - System.Windows.Documents.EditingCommands.MoveUpByPage
  - System.Windows.Documents.EditingCommands.MoveUpByParagraph
  - System.Windows.Documents.EditingCommands.SelectDownByLine
  - System.Windows.Documents.EditingCommands.SelectDownByPage
  - System.Windows.Documents.EditingCommands.SelectDownByParagraph
  - System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  - System.Windows.Documents.EditingCommands.SelectLeftByWord
  - System.Windows.Documents.EditingCommands.SelectRightByCharacter
  - System.Windows.Documents.EditingCommands.SelectRightByWord
  - System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  - System.Windows.Documents.EditingCommands.SelectToDocumentStart
  - System.Windows.Documents.EditingCommands.SelectToLineEnd
  - System.Windows.Documents.EditingCommands.SelectToLineStart
  - System.Windows.Documents.EditingCommands.SelectUpByLine
  - System.Windows.Documents.EditingCommands.SelectUpByPage
  - System.Windows.Documents.EditingCommands.SelectUpByParagraph
  - System.Windows.Documents.EditingCommands.TabBackward
  - System.Windows.Documents.EditingCommands.TabForward
  - System.Windows.Documents.EditingCommands.ToggleBold
  - System.Windows.Documents.EditingCommands.ToggleBullets
  - System.Windows.Documents.EditingCommands.ToggleInsert
  - System.Windows.Documents.EditingCommands.ToggleItalic
  - System.Windows.Documents.EditingCommands.ToggleNumbering
  - System.Windows.Documents.EditingCommands.ToggleSubscript
  - System.Windows.Documents.EditingCommands.ToggleSuperscript
  - System.Windows.Documents.EditingCommands.ToggleUnderline
  langs:
  - csharp
  name: EditingCommands
  nameWithType: EditingCommands
  fullName: System.Windows.Documents.EditingCommands
  type: Class
  summary: "Számos szabványos szerkesztési kapcsolódó parancsokat."
  remarks: "Az alábbi táblázat a parancsokat és a társított alapértelmezett kulcs kézmozdulatok (a kulcsneveket és az <xref:System.Windows.Input.Key>és <xref:System.Windows.Input.ModifierKeys>enumerálások).</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key>      | Szerkesztése parancs |} Kulcs kézmozdulat alapértelmezett |}   |---------------------|-------------------------|   | <xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>| `Ctrl`+`E`|   | <xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>| `Ctrl`+`J`|   | <xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>| `Ctrl`+`L`|   | <xref:System.Windows.Documents.EditingCommands.AlignRight%2A>| `Ctrl`+`R`|   | <xref:System.Windows.Documents.EditingCommands.Backspace%2A>| `Backspace`|   | <xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|} kulcs nem alapértelmezett hitelesítési módok |}   | <xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>| `Ctrl`+`OemOpenBrackets`|   | <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>| `Ctrl`+`Shift`+`T`|   | <xref:System.Windows.Documents.EditingCommands.Delete%2A>| `Delete`|   | <xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>| `Ctrl`+`Delete`|   | <xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>| `Ctrl`+`Backspace`|   | <xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>| `Shift`+`Enter`|   | <xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>| `Enter`|   | <xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|} kulcs nem alapértelmezett hitelesítési módok |}   | <xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>| `Ctrl`+`OemCloseBrackets`|   | <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>| `Ctrl`+`T`|   | <xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>| `Down`|   | <xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>| `PageDown`|   | <xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>| `Ctrl`+`Down`|   | <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>| `Left`|   | <xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>| `Ctrl`+`Left`|   | <xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>| `Right`|   | <xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>| `Ctrl`+`Right`|   | <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>| `Ctrl`+`End`|   | <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>| `Ctrl`+`Home`|   | <xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>| `End`|   | <xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>| `Home`|   | <xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>| `Up`|   | <xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>| `PageUp`|   | <xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>| `Ctrl`+`Up`|   | <xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>| `Shift`+`Down`|   | <xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>| `Shift`+`PageDown`|   | <xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>| `Ctrl`+`Shift`+`Down`|   | <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>| `Shift`+`Left`|   | <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>| `Ctrl`+`Shift`+`Left`|   | <xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>| `Shift`+`Right`|   | <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>| `Ctrl`+`Shift`+`Right`|   | <xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>| `Ctrl`+`Shift`+`End`|   | <xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>| `Ctrl`+`Shift`+`Home`|   | <xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>| `Shift`+`End`|   | <xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>| `Shift`+`Home`|   | <xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>| `Shift`+`Up`|   | <xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>| `Shift`+`PageUp`|   | <xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>| `Ctrl`+`Shift`+`Up`|   | <xref:System.Windows.Documents.EditingCommands.TabBackward%2A>| `Shift`+`Tab`|   | <xref:System.Windows.Documents.EditingCommands.TabForward%2A>| `Tab`|   | <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>| `Ctrl`+`B`|   | <xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>| `Ctrl`+`Shift`+`L`|   | <xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>| `Insert`|   | <xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>| `Ctrl`+`I`|   | <xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>| `Ctrl`+`Shift`+`N`|   | <xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>| `Ctrl`+`OemPlus`|   | <xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>| `Ctrl`+`Shift+OemPlus`|   | <xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>| `Ctrl`+`U`|       Kalap mozgási parancsok és parancsok bővülő kiválasztása közös jellemzőkkel bíró alapértelmezett kulcs kézmozdulatok, az általános eltérőek</xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A> </xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A> </xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A> </xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A> </xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A> </xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A> </xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A> </xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> </xref:System.Windows.Documents.EditingCommands.TabForward%2A> </xref:System.Windows.Documents.EditingCommands.TabBackward%2A> </xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A> </xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A> </xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A> </xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A> </xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A> </xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A> </xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A> </xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> </xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A> </xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A> </xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A> </xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A> </xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A> </xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A> </xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> </xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> </xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A> </xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A> </xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A> </xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A> </xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A> </xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A> </xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A> </xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A> </xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A> </xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A> </xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A> </xref:System.Windows.Documents.EditingCommands.Delete%2A> </xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A> </xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A> </xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A> </xref:System.Windows.Documents.EditingCommands.Backspace%2A> </xref:System.Windows.Documents.EditingCommands.AlignRight%2A> </xref:System.Windows.Documents.EditingCommands.AlignLeft%2A> </xref:System.Windows.Documents.EditingCommands.AlignJustify%2A> </xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>  Például a <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>parancs van a kulcs alapértelmezett kézmozdulatok <xref:System.Windows.Input.Key>, és a megfelelő <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>parancsnak + <xref:System.Windows.Input.ModifierKeys><xref:System.Windows.Input.Key>.</xref:System.Windows.Input.Key> </xref:System.Windows.Input.ModifierKeys> alapértelmezett kulcs kézmozdulatok</xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> </xref:System.Windows.Input.Key> </xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>       Általában nem végzi el a parancs-definíciók EditingCommands osztály parancs paraméterek használatát (a `parameter` által várt paraméter a <xref:System.Windows.Input.ICommand.Execute%2A>metódus).</xref:System.Windows.Input.ICommand.Execute%2A>       A parancsok és commanding további információkért lásd: [bemeneti áttekintése](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static class EditingCommands
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignCenter
  id: AlignCenter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
  fullName: System.Windows.Documents.EditingCommands.AlignCenter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A AlignCenter parancs, amely kéri, hogy az aktuális bekezdés vagy bekezdések kijelölés középre jelöli."
  remarks: "Ez a parancs működik, a <xref:System.Windows.Documents.Paragraph>szint.</xref:System.Windows.Documents.Paragraph>  Ha ez a parancs a részleges tartalom (beleértve a beszúrási jel helyére a bekezdésen belül egy üres kiválasztott) bekezdésbe kijelölt hivatkoznak, a kért hatása a teljes bekezdés vonatkozik.  Ha ez a parancs több bekezdés kiterjedő kijelölés hivatkoznak, a hatás vonatkozik minden bekezdéséhez alkalmazásakor a kijelölés a teljes tartalmát.       Az alábbi ábra középre tartalom példáját mutatja be.       ![Képernyőfelvétel: TextAlign tulajdonság értékének Center](~/add/media/flowdoc-textalign-center.png &quot;képernyőkép: Center TextAlign tulajdonság értékének&quot;) Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignCenter&quot;></a>## XAML attribútumok használata```   <object property=&quot;AlignCenter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignCenter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_E&quot; name=&quot;E&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.AlignCenter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignJustify
  id: AlignJustify
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
  fullName: System.Windows.Documents.EditingCommands.AlignJustify
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A AlignJustify parancs, amely kéri, hogy az aktuális bekezdés vagy bekezdések kijelölés indokolt jelöli."
  remarks: "Ez a parancs működik, a <xref:System.Windows.Documents.Paragraph>szint.</xref:System.Windows.Documents.Paragraph>  Ha ez a parancs a részleges tartalom (beleértve a beszúrási jel helyére a bekezdésen belül egy üres kiválasztott) bekezdésbe kijelölt hivatkoznak, a kért hatása a teljes bekezdés vonatkozik.  Ha ez a parancs több bekezdés kiterjedő kijelölés hivatkoznak, a hatás a kijelölésben szereplő összes bekezdés vonatkozik.       Ha a tartalom indokolt, belül minden sor a tartalom vízszintes szövegtávolság, amelyek a indokolt sorok nagyobb vagy egyenlő közelében szélességének módosul.  Tartalom általában indokolt zökkenőmentes élei számára a tartalom oldalán létrehozásához.       Gyakran rövidebb, mint a többi, mert az utolsó sort a bekezdés maradhatnak indokolatlanul után ez a parancs meghívták.       Az alábbi ábrán látható indokolatlanul (balra igazított) tartalmát.       ![Képernyőfelvétel: A tartalom nem indokolt](~/add/media/content-unjustified.png &quot;képernyőkép: tartalom nem indokolt&quot;) indokolt lett után az alábbi ábrán láthatók az ugyanahhoz a tartalomhoz.       ![Képernyőkép a tartalom indokolt szöveg](~/add/media/content-justified.png &quot;Képernyőkép a tartalom indokolt szöveg&quot;) nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignJustify&quot;></a>## XAML attribútumok használata```   <object property=&quot;AlignJustify&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignJustify { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_J&quot; name=&quot;J&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.AlignJustify*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignLeft
  id: AlignLeft
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
  fullName: System.Windows.Documents.EditingCommands.AlignLeft
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A AlignLeft parancs, amely kéri, hogy a kijelölés tartalom balra kell-e igazítva jelöli."
  remarks: "Ez a parancs működik, a <xref:System.Windows.Documents.Paragraph>szint.</xref:System.Windows.Documents.Paragraph>  Ha ez a parancs a részleges tartalom (beleértve a beszúrási jel helyére a bekezdésen belül egy üres kiválasztott) bekezdésbe kijelölt hivatkoznak, a kért hatása a teljes bekezdés vonatkozik.  Ha ez a parancs több bekezdés kiterjedő kijelölés hivatkoznak, a hatás vonatkozik minden bekezdéséhez alkalmazásakor a kijelölés a teljes tartalmát.       Az alábbi ábra a tartalom balra igazított példáját mutatja be.       ![Képernyőfelvétel: TextAlign tulajdonságának értéke Left](~/add/media/flowdoc-textalign-left.png &quot;képernyőkép: TextAlign tulajdonságának értéke Left&quot;) nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignLeft&quot;></a>## XAML attribútumok használata```   <object property=&quot;AlignLeft&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignLeft { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_L&quot; name=&quot;L&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.AlignLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignRight
  id: AlignRight
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
  fullName: System.Windows.Documents.EditingCommands.AlignRight
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A AlignRight parancs, amely kéri, hogy a kijelölés tartalom jobb egyeztetni jelöli."
  remarks: "Ez a parancs működik, a <xref:System.Windows.Documents.Paragraph>szint.</xref:System.Windows.Documents.Paragraph>  Ha ez a parancs a részleges tartalom (beleértve a beszúrási jel helyére a bekezdésen belül egy üres kiválasztott) bekezdésbe kijelölt hivatkoznak, a kért hatása a teljes bekezdés vonatkozik.  Ha ez a parancs több bekezdés kiterjedő kijelölés hivatkoznak, a hatás vonatkozik minden bekezdéséhez alkalmazásakor a kijelölés a teljes tartalmát.       Az alábbi ábra a tartalom jobbra igazított példáját mutatja be.       ![Képernyőfelvétel: TextAlign értékének jobb](~/add/media/flowdoc-textalign-right.png &quot;képernyőkép: jobb TextAlign értékének&quot;) nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignRight&quot;></a>## XAML attribútumok használata```   <object property=&quot;AlignRight&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignRight { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_R&quot; name=&quot;R&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.AlignRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.Backspace
  id: Backspace
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: Backspace
  nameWithType: EditingCommands.Backspace
  fullName: System.Windows.Documents.EditingCommands.Backspace
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A Backspace parancs, amely kéri, hogy egy backspace adni a jelenlegi állapotában vagy a jelenlegi kijelölés jelöli."
  remarks: "Hívjon meg egy üres kijelölés, amikor a beszúrási jel előtt karakter- és elválasztó törli. Meghívásakor a nem üres kijelölés, törli a kijelölt.       Ez a parancs megtartja a törölt telepítendő tartalom azonnal ugyanazon a helyen után ez a parancs meghívták formázás.  Ezzel szemben a a <xref:System.Windows.Documents.EditingCommands.Delete%2A>parancsot, amely nem őriz meg az előző formázás.</xref:System.Windows.Documents.EditingCommands.Delete%2A>       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_Backspace&quot;></a>## XAML attribútumok használata```   <object property=&quot;Backspace&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand Backspace { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Backspace&quot; name=&quot;Backspace&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.Backspace*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError
  id: CorrectSpellingError
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A CorrectSpellingError parancs, amely kéri, hogy a jelenlegi állapotában bármely helyesírási javítani jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.      <a name=&quot;xamlAttributeUsage_CorrectSpellingError&quot;></a>## XAML attribútumok használata```   <object property=&quot;CorrectSpellingError&quot;/>   ```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  Ez a parancs nem alapértelmezett kulcs kézmozdulat rendelkezik."
  overload: System.Windows.Documents.EditingCommands.CorrectSpellingError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize
  id: DecreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A DecreaseFontSize parancs, amely kéri, hogy a betűméret a kijelölt 1 ponttal csökkenteni lehet jelöli."
  remarks: "Ha ez a parancs meghívták a egy üres kiválasztását, ahol a billentyűzettel esik-e szó, a kijelölés automatikusan kiterjed a parancs a teljes word vonatkoznak.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DecreaseFontSize&quot;></a>## XAML attribútumok használata```   <object property=&quot;DecreaseFontSize&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemOpenBrackets&quot; name=&quot;OemOpenBrackets&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.DecreaseFontSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation
  id: DecreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A DecreaseIndentation parancs, amely kéri, hogy az aktuális bekezdés behúzásának csökkenteni lehet-e egy tabulátorral által jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      > [!IMPORTANT] > Ez a parancs van a szöveg elem hatása, ha a <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>szöveg elem tulajdonsága `true`.</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>      <a name=&quot;xamlAttributeUsage_DecreaseIndentation&quot;></a>## XAML attribútumok használata```   <object property=&quot;DecreaseIndentation&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_T&quot; name=&quot;T&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.DecreaseIndentation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.Delete
  id: Delete
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: Delete
  nameWithType: EditingCommands.Delete
  fullName: System.Windows.Documents.EditingCommands.Delete
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A Delete parancs esetében, amely kéri, hogy törölhető-e az aktuális kijelölés jelöli."
  remarks: "Ez a parancs elveti a törölt kijelölés formázás.  Ezzel szemben a a <xref:System.Windows.Documents.EditingCommands.Backspace%2A>parancsot, amely megtartja a törölt telepítendő tartalom azonnal ugyanazon a helyen után ez a parancs meghívták formázás.</xref:System.Windows.Documents.EditingCommands.Backspace%2A>       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_Delete&quot;></a>## XAML attribútumok használata```   <object property=&quot;Delete&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand Delete { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord
  id: DeleteNextWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A DeleteNextWord parancs, amely kéri, hogy törölhető-e a következő szó (viszonyított jelenlegi pozíciója) jelöli."
  remarks: "Ha a beszúrási jel egy szó, a word, az aktuális pozíciót és a szó végéig között további része törlődik.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DeleteNextWord&quot;></a>## XAML attribútumok használata```   <object property=&quot;DeleteNextWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.DeleteNextWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord
  id: DeletePreviousWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A DeletePreviousWord parancs, amely kéri, hogy törölhető-e az előző szó (viszonyított jelenlegi pozíciója) jelöli."
  remarks: "Ha a beszúrási jel egy szó, a word, az aktuális pozíciót és a word kezdete közötti fennmaradó törlődik.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DeletePreviousWord&quot;></a>## XAML attribútumok használata```   <object property=&quot;DeletePreviousWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Backspace&quot; name=&quot;Backspace&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.DeletePreviousWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak
  id: EnterLineBreak
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A EnterLineBreak parancs, amely kéri, hogy a jelenlegi állapotában vagy a jelenlegi kijelölés keresztül beilleszteni sortörés jelöli."
  remarks: "Szerkesztő, amely támogatja a folyamat tartalmak, például a <xref:System.Windows.Controls.RichTextBox>, a parancs okok egy <xref:System.Windows.Documents.LineBreak>elem illeszthető be az aktuális pozíciót.</xref:System.Windows.Documents.LineBreak> </xref:System.Windows.Controls.RichTextBox>       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_EnterLineBreak&quot;></a>## XAML attribútumok használata```   <object property=&quot;EnterLineBreak&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Enter&quot; name=&quot;Enter&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.EnterLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  id: EnterParagraphBreak
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A EnterParagraphBreak parancs, amely kéri, hogy a jelenlegi állapotában vagy a jelenlegi kijelölésben beszúrni egy bekezdés break jelöli."
  remarks: "Ez a parancs megegyezik a felhasználó nyomja le az ENTER billentyűt.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>és <xref:System.Windows.Controls.TextBox>(Ha a <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>tulajdonság `true`).</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      > [!IMPORTANT] > Ez a parancs van a szöveg elem hatása, ha a <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>szöveg elem tulajdonsága `true`.</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>      <a name=&quot;xamlAttributeUsage_EnterParagraphBreak&quot;></a>## XAML attribútumok használata```   <object property=&quot;EnterParagraphBreak&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Enter&quot; name=&quot;Enter&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.EnterParagraphBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  id: IgnoreSpellingError
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A IgnoreSpellingError parancs, amely kéri, hogy az aktuális helyen, illetve az aktuális kijelölés minden példányát figyelmen kívül lesz hagyva jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.      <a name=&quot;xamlAttributeUsage_IgnoreSpellingError&quot;></a>## XAML attribútumok használata```   <object property=&quot;IgnoreSpellingError&quot;/>   ```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  Ez a parancs nem alapértelmezett kulcs kézmozdulat rendelkezik."
  overload: System.Windows.Documents.EditingCommands.IgnoreSpellingError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize
  id: IncreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A IncreaseFontSize parancs, amely kéri, hogy a betűméret a kijelölt 1 pont megnövelhető jelöli."
  remarks: "Ha ez a parancs meghívták a egy üres kiválasztását, ahol a billentyűzettel esik-e szó, a kijelölés ki van bontva a parancs a teljes word vonatkoznak.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_IncreaseFontSize&quot;></a>## XAML attribútumok használata```   <object property=&quot;IncreaseFontSize&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemCloseBrackets&quot; name=&quot;OemCloseBrackets&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.IncreaseFontSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation
  id: IncreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A IncreaseIndentation parancs, amely kéri, hogy az aktuális bekezdés behúzásának megnövelhető egy tabulátorral jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      > [!IMPORTANT] > Ez a parancs van a szöveg elem hatása, ha a <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>szöveg elem tulajdonsága `true`.</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>      <a name=&quot;xamlAttributeUsage_IncreaseIndentation&quot;></a>## XAML attribútumok használata```   <object property=&quot;IncreaseIndentation&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_T&quot; name=&quot;T&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.IncreaseIndentation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine
  id: MoveDownByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveDownByLine parancs, amely kéri, hogy egy vonal lejjebb a beszúrási jel jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveDownByLine&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveDownByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveDownByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage
  id: MoveDownByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveDownByPage parancs, amely kéri, hogy egy lap lejjebb a beszúrási jel jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveDownByPage&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveDownByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_PageDown&quot; name=&quot;PageDown&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveDownByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  id: MoveDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveDownByParagraph parancs, amely kéri, hogy egy bekezdésben lejjebb a beszúrási jel jelöli."
  remarks: "Ez a parancs a billentyűzettel állítható be a következő bekezdés elején.       Ez a parancs <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>meghívásakor a <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> viselkedik       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveDownByParagraph&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveDownByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveDownByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  id: MoveLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveLeftByCharacter parancs, amely kéri, hogy a beszúrási jel mozgatása egy karakterrel balra jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveLeftByCharacter&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveLeftByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord
  id: MoveLeftByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveLeftByWord parancs, amely kéri, hogy a billentyűzettel áthelyezése balra szó jelöli."
  remarks: "Ha a beszúrási jel egy szó, ez a parancs a a szó elejéig helyezi át a beszúrási jel.  Ellenkező esetben ez a parancs helyezi át az előző szó elejéig a beszúrási jel.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveLeftByWord&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveLeftByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveLeftByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  id: MoveRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveRightByCharacter parancs, amely kéri, hogy a beszúrási jel mozgatása egy karakterrel jobbra jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveRightByCharacter&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveRightByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveRightByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord
  id: MoveRightByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveRightByWord parancs, amely kéri, hogy a beszúrási jel mozgatása jobbra egy Word jelöli."
  remarks: "Ha a beszúrási jel egy szó, a parancs a szó végéig helyezi át a beszúrási jel.  Ellenkező esetben ez a parancs a következő szó elejéig helyezi át a beszúrási jel.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveRightByWord&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveRightByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveRightByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  id: MoveToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveToDocumentEnd parancs, amely kéri, hogy a billentyűzettel helyezze át a rendszert a tartalom végét jelöli."
  remarks: "A *szövegtároló* összekapcsolja a tartalom az elvégzendő végső szegély eleme.  <xref:System.Windows.Controls.TextBlock>és <xref:System.Windows.Documents.FlowDocument>szöveg tárolók példák.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  A tartalom a szövegtároló együttesen lévő nevezzük egy *dokumentum*.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToDocumentEnd&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveToDocumentEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  id: MoveToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveToDocumentStart parancs, amely kéri, hogy a billentyűzettel helyezze át a rendszert kezdetben a tartalom jelöli."
  remarks: "A *szövegtároló* összekapcsolja a tartalom az elvégzendő végső szegély eleme.  <xref:System.Windows.Controls.TextBlock>és <xref:System.Windows.Documents.FlowDocument>szöveg tárolók példák.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  A tartalom a szövegtároló együttesen lévő nevezzük egy *dokumentum*.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToDocumentStart&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveToDocumentStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveToDocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd
  id: MoveToLineEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveToLineEnd parancs, amely kéri, hogy a billentyűzettel helyezze át az aktuális sor végén jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToLineEnd&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveToLineEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveToLineEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart
  id: MoveToLineStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveToLineStart parancs, amely kéri, hogy a billentyűzettel helyezze át az aktuális sor elejére jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToLineStart&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveToLineStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveToLineStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine
  id: MoveUpByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveUpByLine parancsot, amely kéri, hogy a beszúrási jel mozgatása felfelé a egy vonal jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveUpByLine&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveUpByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveUpByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage
  id: MoveUpByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveUpByPage parancs, amely kéri, hogy egy lap feljebb a beszúrási jel jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveUpByPage&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveUpByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_PageUp&quot; name=&quot;PageUp&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveUpByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  id: MoveUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A MoveUpByParagraph parancs, amely kéri, hogy egy bekezdésben feljebb a beszúrási jel jelöli."
  remarks: "Ez a parancs a billentyűzettel állítható be a következő bekezdés elején.       Ez a parancs <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>meghívásakor a <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> viselkedik       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott és <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveUpByParagraph&quot;></a>## XAML attribútumok használata```   <object property=&quot;MoveUpByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.MoveUpByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine
  id: SelectDownByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectDownByLine parancs, amely kéri, hogy az aktuális kijelölés bővíthető le egy vonal jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByLine&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectDownByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectDownByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage
  id: SelectDownByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectDownByPage parancs, amely kéri, hogy az aktuális kijelölés le bonthatók az oldalak jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByPage&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectDownByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_PageDown&quot; name=&quot;PageDown&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectDownByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  id: SelectDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectDownByParagraph parancs, amely kéri, hogy az aktuális kijelölés bővíthető le egy bekezdésben jelöli."
  remarks: "Ez a parancs a kijelölés bővíti a következő bekezdés elejére.  Ellenkező esetben ez a parancs bontja ki a kijelölést az aktuális bekezdés végén.  A kibontott tartalmaz a bekezdés egységhez, amely a bekezdés végét jelöli.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByParagraph&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectDownByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectDownByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  id: SelectLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectLeftByCharacter parancs, amely kéri, hogy az aktuális kijelölés balra kell bővíteni egy karakter jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectLeftByCharacter&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectLeftByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord
  id: SelectLeftByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectLeftByWord parancs, amely kéri, hogy az aktuális kijelölés balra kell bővíteni egy Word jelöli."
  remarks: "Ha a beszúrási jel egy szó, a parancs a kijelölés adott szó elejére bontja ki.  Ellenkező esetben ez a parancs az előző szó elejéig bővíti a kijelölést.       A kibontott kijelölés nem tartalmazza a word elválasztó.  Ezzel szemben a <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, amely a word elválasztó tartalmaz a bővített kijelölésben szereplő.</xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectLeftByWord&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectLeftByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectLeftByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  id: SelectRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectRightByCharacter parancs, amely kéri, hogy az aktuális kijelölés oldhatók fel egy karakterrel jobbra által jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectRightByCharacter&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectRightByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectRightByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord
  id: SelectRightByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectRightByWord parancs, amely kéri, hogy az aktuális kijelölés bonthatók ki közvetlenül egy word által jelöli."
  remarks: "Ha a beszúrási jel egy szó, a parancs a kijelölés a szó végéig bontja ki.  Ellenkező esetben ez a parancs a következő szó végéig bővíti a kijelölést.       A bővített a word elválasztókaraktert tartalmaz.  Ezzel szemben a <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>amely nem tartalmazza a word elválasztó a bővített kijelölés.</xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectRightByWord&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectRightByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectRightByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  id: SelectToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectToDocumentEnd parancs, amely kéri, hogy az aktuális kijelölés oldhatók fel annak a nagyon a tartalom végét jelöli."
  remarks: "A *szövegtároló* összekapcsolja a tartalom az elvégzendő végső szegély eleme.  <xref:System.Windows.Controls.TextBlock>és <xref:System.Windows.Documents.FlowDocument>szöveg tárolók példák.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  A tartalom a szövegtároló együttesen lévő nevezzük egy *dokumentum*.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToDocumentEnd&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectToDocumentEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  id: SelectToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectToDocumentStart parancs, amely kéri, hogy az aktuális kijelölés oldhatók fel annak a rendszert kezdetben a tartalom jelöli."
  remarks: "A *szövegtároló* összekapcsolja a tartalom az elvégzendő végső szegély eleme.  <xref:System.Windows.Controls.TextBlock>és <xref:System.Windows.Documents.FlowDocument>szöveg tárolók példák.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  A tartalom a szövegtároló együttesen lévő nevezzük egy *dokumentum*.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToDocumentStart&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectToDocumentStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectToDocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd
  id: SelectToLineEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectToLineEnd parancs, amely kéri, hogy az aktuális kijelölés oldhatók fel az aktuális sor végére jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToLineEnd&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectToLineEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectToLineEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart
  id: SelectToLineStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectToLineStart parancs, amely kéri, hogy az aktuális kijelölés oldhatók fel az aktuális sor elejére jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToLineStart&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectToLineStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectToLineStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine
  id: SelectUpByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectUpByLine parancs, amely kéri, hogy az aktuális kijelölés bővíthető fel egy vonal jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByLine&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectUpByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectUpByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage
  id: SelectUpByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectUpByPage parancs, amely kéri, hogy a jelenlegi beállítás mentése bonthatók az oldalak jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByPage&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectUpByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_PageUp&quot; name=&quot;PageUp&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectUpByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  id: SelectUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A SelectUpByParagraph parancs, amely kéri, hogy az aktuális kijelölés bővíthető be egy bekezdésben jelöli."
  remarks: "Ha a beszúrási jel bekezdés elején, ez a parancs a elem az előző bekezdésben szereplő esetekben elejére kibontása.  Ellenkező esetben ez a parancs bontja ki a kijelölést az aktuális bekezdés elejére.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByParagraph&quot;></a>## XAML attribútumok használata```   <object property=&quot;SelectUpByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.SelectUpByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.TabBackward
  id: TabBackward
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
  fullName: System.Windows.Documents.EditingCommands.TabBackward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A TabBackward parancs jelöli."
  remarks: "A parancs a viselkedés attól függ, hogy az aktuális kijelölés. Ha az érték nem lehet üres, a parancs megegyezik-e a <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A> Ha a beszúrási jel egy cellába (által képviselt a <xref:System.Windows.Documents.TableCell>elem), ez a parancs a billentyűzettel helyezi át az előző cella.</xref:System.Windows.Documents.TableCell> Ellenkező esetben aktuális pozícióját tabulátor szerepel.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>és <xref:System.Windows.Controls.TextBox>(Ha a <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>tulajdonság `true`).</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_TabBackward&quot;></a>## XAML attribútumok használata```   <object property=&quot;TabBackward&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n```c#  \nRichTextBox rTB = new RichTextBox();  \n  \nEditingCommands.ToggleInsert.Execute(null, rTB);  \n  \n```  \n  \n```vb  \n			Dim rTB As New RichTextBox()  \n  \n			EditingCommands.ToggleInsert.Execute(Nothing, rTB)  \n```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand TabBackward { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Tab&quot; name=&quot;Tab&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.TabBackward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.TabForward
  id: TabForward
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: TabForward
  nameWithType: EditingCommands.TabForward
  fullName: System.Windows.Documents.EditingCommands.TabForward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A TabForward parancs jelöli."
  remarks: "A parancs a viselkedés attól függ, hogy az aktuális kijelölés. Ha az érték nem lehet üres, vagy ha az érték üres, és az aktuális beszúrási pozíciója a bekezdés elején, ez a parancs egyenértékű parancs, akkor a <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A> Ha a beszúrási jel egy cellába (által képviselt a <xref:System.Windows.Documents.TableCell>elem), ez a parancs a billentyűzettel áthelyezése a következő cellájára.</xref:System.Windows.Documents.TableCell> Ha a beszúrási jel a tábla utolsó cellába, ez a parancs hatására az egy új sort a beszúrási jel el, az első cellába, az új sor a hozzáfűzi a tábla.  Ellenkező esetben aktuális pozícióját tabulátor szerepel.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>és <xref:System.Windows.Controls.TextBox>(Ha a <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>tulajdonság `true`).</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_TabForward&quot;></a>## XAML attribútumok használata```   <object property=&quot;TabForward&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n```c#  \nRichTextBox rTB = new RichTextBox();  \n  \nEditingCommands.ToggleInsert.Execute(null, rTB);  \n  \n```  \n  \n```vb  \n			Dim rTB As New RichTextBox()  \n  \n			EditingCommands.ToggleInsert.Execute(Nothing, rTB)  \n```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand TabForward { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Tab&quot; name=&quot;Tab&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.TabForward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleBold
  id: ToggleBold
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
  fullName: System.Windows.Documents.EditingCommands.ToggleBold
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleBold parancs, amely kéri, hogy jelöli <xref href=&quot;System.Windows.Documents.Bold&quot;> </xref> formázást kell váltható a jelenlegi kijelölés."
  remarks: "Ha a <xref:System.Windows.FontWeight>tartománya: az aktuális kijelölés <xref:System.Windows.FontWeights.Thin%2A>való <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A>alkalmazott a kijelölt.</xref:System.Windows.FontWeights.Bold%2A> </xref:System.Windows.FontWeights.SemiBold%2A> </xref:System.Windows.FontWeights.Thin%2A> </xref:System.Windows.FontWeight>  Ellenkező esetben <xref:System.Windows.FontWeights.Normal%2A>vonatkozik.</xref:System.Windows.FontWeights.Normal%2A>  <xref:System.Windows.FontWeight>Értékek, lásd: <xref:System.Windows.FontWeights>.</xref:System.Windows.FontWeights> </xref:System.Windows.FontWeight> összehasonlító listája       Ha az érték üres, és a billentyűzettel szót belül van, a kijelölés ki van bontva a teljes szót tartalmaz.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleBold&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleBold&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleBold { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_B&quot; name=&quot;B&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleBold*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleBullets
  id: ToggleBullets
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
  fullName: System.Windows.Documents.EditingCommands.ToggleBullets
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleBullets parancs, amely kéri, hogy (más néven felsorolás) rendezetlen lista formázás váltható a jelenlegi kijelölés jelöli."
  remarks: "Ez a parancs működik, a <xref:System.Windows.Documents.Paragraph>szint.</xref:System.Windows.Documents.Paragraph>  Ha ez a parancs a részleges tartalom (beleértve a beszúrási jel helyére a bekezdésen belül egy üres kiválasztott) bekezdésbe kijelölt hivatkoznak, a kért hatása a teljes bekezdés vonatkozik.  Ha ez a parancs több bekezdés kiterjedő kijelölés hivatkoznak, a hatás vonatkozik minden bekezdéséhez alkalmazásakor a kijelölés a teljes tartalmát.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleBullets&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleBullets&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_L&quot; name=&quot;L&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleBullets*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleInsert
  id: ToggleInsert
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
  fullName: System.Windows.Documents.EditingCommands.ToggleInsert
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleInsert parancsot, amely ki-és a gépelési módját a Beszúrás és felülírás jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs által natívan támogatott <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, és <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleInsert&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleInsert&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Insert&quot; name=&quot;Insert&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleItalic
  id: ToggleItalic
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
  fullName: System.Windows.Documents.EditingCommands.ToggleItalic
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleItalic parancs, amely kéri, hogy jelöli <xref href=&quot;System.Windows.Documents.Italic&quot;> </xref> formázást kell váltható a jelenlegi kijelölés."
  remarks: "Ha a <xref:System.Windows.FontStyle>az az aktuális kijelölés <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A>alkalmazott a kijelölt.</xref:System.Windows.FontStyles.Italic%2A> </xref:System.Windows.FontStyles.Normal%2A> </xref:System.Windows.FontStyle>  Ellenkező esetben <xref:System.Windows.FontStyles.Normal%2A>vonatkozik.</xref:System.Windows.FontStyles.Normal%2A>       Ha az érték üres, és a billentyűzettel szót belül van, a kijelölés ki van bontva a teljes szót tartalmaz.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleItalic&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleItalic&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_I&quot; name=&quot;I&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleItalic*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering
  id: ToggleNumbering
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleNumbering parancs, amely kéri, hogy (más néven számozott lista) rendezett lista formázás váltható a jelenlegi kijelölés jelöli."
  remarks: "Ez a parancs működik, a <xref:System.Windows.Documents.Paragraph>szint.</xref:System.Windows.Documents.Paragraph>  Ha ez a parancs a részleges tartalom (beleértve a beszúrási jel helyére a bekezdésen belül egy üres kiválasztott) bekezdésbe kijelölt hivatkoznak, a kért hatása a teljes bekezdés vonatkozik.  Ha ez a parancs több bekezdés kiterjedő kijelölés hivatkoznak, a hatás vonatkozik minden bekezdéséhez alkalmazásakor a kijelölés a teljes tartalmát.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleNumbering&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleNumbering&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_N&quot; name=&quot;N&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleNumbering*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript
  id: ToggleSubscript
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleSubscript parancs, amely kéri, hogy index formázás váltható a jelenlegi kijelölés jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.      <a name=&quot;xamlAttributeUsage_ToggleSubscript&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleSubscript&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemPlus&quot; name=&quot;OemPlus&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleSubscript*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript
  id: ToggleSuperscript
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleSuperscript parancs, amely kéri, hogy felső formázás váltható a jelenlegi kijelölés jelöli."
  remarks: "Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.      <a name=&quot;xamlAttributeUsage_ToggleSuperscript&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleSuperscript&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemPlus&quot; name=&quot;OemPlus&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleSuperscript*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline
  id: ToggleUnderline
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "A ToggleUnderline parancs, amely kéri, hogy jelöli <xref href=&quot;System.Windows.Documents.Underline&quot;> </xref> formázást kell váltható a jelenlegi kijelölés."
  remarks: "Ha az érték üres, és a billentyűzettel szót belül van, a kijelölés ki van bontva a teljes szót tartalmaz.       Nincs feltétlenül tényleges megvalósítást, amely válaszol a parancs egy adott objektumra; sok esetben válaszol-e a parancs végrehajtása feladata az alkalmazás-író.       Ez a parancs alapértelmezés szerint támogatott <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleUnderline&quot;></a>## XAML attribútumok használata```   <object property=&quot;ToggleUnderline&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "A kért parancs.  A parancs az alapértelmezett kulcs kézmozdulatok <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_U&quot; name=&quot;U&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.EditingCommands.ToggleUnderline*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Documents.EditingCommands.AlignCenter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
  fullName: System.Windows.Documents.EditingCommands.AlignCenter
- uid: System.Windows.Input.RoutedUICommand
  parent: System.Windows.Input
  isExternal: false
  name: RoutedUICommand
  nameWithType: RoutedUICommand
  fullName: System.Windows.Input.RoutedUICommand
- uid: System.Windows.Documents.EditingCommands.AlignJustify
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
  fullName: System.Windows.Documents.EditingCommands.AlignJustify
- uid: System.Windows.Documents.EditingCommands.AlignLeft
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
  fullName: System.Windows.Documents.EditingCommands.AlignLeft
- uid: System.Windows.Documents.EditingCommands.AlignRight
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
  fullName: System.Windows.Documents.EditingCommands.AlignRight
- uid: System.Windows.Documents.EditingCommands.Backspace
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Backspace
  nameWithType: EditingCommands.Backspace
  fullName: System.Windows.Documents.EditingCommands.Backspace
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation
- uid: System.Windows.Documents.EditingCommands.Delete
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Delete
  nameWithType: EditingCommands.Delete
  fullName: System.Windows.Documents.EditingCommands.Delete
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph
- uid: System.Windows.Documents.EditingCommands.TabBackward
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
  fullName: System.Windows.Documents.EditingCommands.TabBackward
- uid: System.Windows.Documents.EditingCommands.TabForward
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabForward
  nameWithType: EditingCommands.TabForward
  fullName: System.Windows.Documents.EditingCommands.TabForward
- uid: System.Windows.Documents.EditingCommands.ToggleBold
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
  fullName: System.Windows.Documents.EditingCommands.ToggleBold
- uid: System.Windows.Documents.EditingCommands.ToggleBullets
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
  fullName: System.Windows.Documents.EditingCommands.ToggleBullets
- uid: System.Windows.Documents.EditingCommands.ToggleInsert
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
  fullName: System.Windows.Documents.EditingCommands.ToggleInsert
- uid: System.Windows.Documents.EditingCommands.ToggleItalic
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
  fullName: System.Windows.Documents.EditingCommands.ToggleItalic
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline
- uid: System.Windows.Documents.EditingCommands.AlignCenter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
- uid: System.Windows.Documents.EditingCommands.AlignJustify*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
- uid: System.Windows.Documents.EditingCommands.AlignLeft*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
- uid: System.Windows.Documents.EditingCommands.AlignRight*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
- uid: System.Windows.Documents.EditingCommands.Backspace*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Backspace
  nameWithType: EditingCommands.Backspace
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
- uid: System.Windows.Documents.EditingCommands.Delete*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Delete
  nameWithType: EditingCommands.Delete
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
- uid: System.Windows.Documents.EditingCommands.TabBackward*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
- uid: System.Windows.Documents.EditingCommands.TabForward*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabForward
  nameWithType: EditingCommands.TabForward
- uid: System.Windows.Documents.EditingCommands.ToggleBold*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
- uid: System.Windows.Documents.EditingCommands.ToggleBullets*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
- uid: System.Windows.Documents.EditingCommands.ToggleInsert*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
- uid: System.Windows.Documents.EditingCommands.ToggleItalic*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
