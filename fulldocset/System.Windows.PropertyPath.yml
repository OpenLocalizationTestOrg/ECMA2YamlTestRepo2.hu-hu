### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Valósít meg olyan adatszerkezet tulajdonság leíró elérési útnak alatt egy másik tulajdonságot, vagy a tulajdonos típus alatt. A tulajdonság elérési út szerepel adatkötés objektumra, és storyboards és ütemtervek animációk."
  remarks: "Ez az osztály tartalmaz egy karakterláncot <xref:System.Windows.PropertyPath.Path%2A>, és az <xref:System.Windows.PropertyPath.PathParameters%2A>azokat a karakterlánc<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> függőségi tulajdonságok listája</xref:System.Windows.PropertyPath.Path%2A>       A PropertyPath működés két módot támogat: **forrás mód** írja le egy forrásként használt más műveletet tulajdonság elérési útját. Ebben a módban használja a <xref:System.Windows.Data.Binding>osztályra, hogy támogatja az adatkötést.</xref:System.Windows.Data.Binding>       **Cél mód** ismerteti egy tulajdonságot, amelynek lesz beállítva a target tulajdonság elérési útját. Ebben a módban az animáció storyboard és ütemterv Setter elemek támogatásához használja.       Például `Background.Opacity` kétlépéses elérési úton található. Azt jelenti, az elérési út: először keresse meg a `Background` objektumtulajdonság, az érték objektum beolvasása, amely a `Background` tulajdonság van beállítva, és ezután a értékének beolvasása a `Opacity` tulajdonság az adott objektumhoz.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## XAML attribútumok használata ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## XAML értékek *propertyPath* karakterlánc, amely ki lesz értékelve kell lennie, vagy egy egyszerű vagy összetett tulajdonság-elérésiúton.       A PropertyPath beállítását szintaxisa [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] sokoldalú azonban bonyolult, és külön témakörben ismertetett [PropertyPath XAML szintaxis](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> osztály."
  remarks: "Ez a konstruktor van két teljesen különböző módjait, attól függően, hogy használja a forrás módú tulajdonság elérési kötés, vagy a storyboard-cél egy cél módú egylépéses tulajdonság az elérési úthoz.       Ha használja a <xref:System.Windows.PropertyPath>forrás módban az egyik kötéshez `parameter` karakterláncként tulajdonság nevét, vagy lehet olyan karakterlánc, amely a tulajdonságot az &quot;léptetéses&quot; elérési a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] hálózatiobjektum-modellje, az objektum, amely használatban van a forrásként az egyik kötéshez.</xref:System.Windows.PropertyPath> Egy kötelező tulajdonság az elérési úthoz a karakter, amely azonosítja a &quot;lépés&quot; egy pontot (.). Az indexelő hivatkozik (beleértve a több indexelők és típus megkülönböztetési) is támogatottak. Az <xref:System.Windows.Data.Binding>objektumazonosító, tekintse meg a <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> kifejezetten használt karakterlánc szintaxisát a kapcsolatos további részletek A kötési adatforrásként használt tulajdonság nem kell a függőség tulajdonság. Ha a kötés kétirányú frissíti, a hivatkozott tulajdonság írhatónak és olvashatónak kell lennie. Vegye figyelembe azt is, hogy a kötés cél feltétlenül egy függőség tulajdonság. További információkért lásd: [kötés – áttekintés](~/add/includes/ajax-current-ext-md.md).       Ha használja a <xref:System.Windows.PropertyPath>storyboard célként, egylépéses út cél módban `parameter` <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> típusként általában biztosított</xref:System.Windows.PropertyPath> Azt is megadhatja, amely egy karakterlánc, a <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> Mindkét kiértékelésének eredménye ugyanazt az eredményt, mert belső karakterláncként. A megadott <xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> keresztül karakterlánccá alakítja át</xref:System.Windows.DependencyProperty> A <xref:System.Windows.Markup.DependencyPropertyConverter>a függőségi tulajdonságok támogatja egy minősített névadási formáját, így megadhatja egy *typeName*.* a propertyName* függőség tulajdonság név karakterláncát a PropertyPath konstruktor kódban minősíteni.</xref:System.Windows.Markup.DependencyPropertyConverter> A függőség tulajdonság azonosítója minősített elérési útja a különböző fogalom, mint egy összetett elérési út. Egy összetett elérési <xref:System.Windows.PropertyPath>helyette kell létrehozni a <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>konstruktor.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Egy vagy leíró elérési útvonal egy [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] , vagy egy egyetlen függőség tulajdonság."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Egy új példányát inicializálja a <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> osztályra, a megadott pathing token karakterláncot és a paraméterek."
  remarks: "Az aláírás általában csak akkor használják a cél-mód <xref:System.Windows.PropertyPath>összetett görbékkel módjait.</xref:System.Windows.PropertyPath>       Ez a konstruktor támogatja `params` a a `pathParameters` típuskonstruktor-argumentum. Ezért megadhatja a tartalmát `pathParameters` sorozataként vesszővel tagolt konstruktorargumentumokat, amely a tömb, nem pedig egy tömb dimenziójának, és töltse fel tagokkal együtt kell tölteni a `pathParameters` elemeket. Minden egyes megadott elemnek kell lennie a következő típusok egyikét: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       További információ a követelményei, a paraméterek közül <xref:System.Windows.PropertyPath.Path%2A>és <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A> :"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "Karakterlánc, amely meghatározza a <xref:System.Windows.PropertyPath.Path*>, tokenekre formátumban.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "Objektumok tömbje, amely beállítja a <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Lekérdezi vagy beállítja a karakterlánc, amely az elérési út."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "A karakterlánc, amely az elérési út."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Beolvassa az elérési út hivatkozik indexelt paraméterek használandó paraméterek listáját."
  remarks: "A következő tulajdonságait egy <xref:System.Windows.PropertyPath>általában jönnek létre a konstruktorok.</xref:System.Windows.PropertyPath> A PathParameters, a <xref:System.Windows.PropertyPath.%23ctor%2A>konstruktor lehetőség különösen akkor hasznos, mert a `pathParameters` típuskonstruktor-argumentum kijelölt `params`, ami azt jelenti, hogy nem kell létrehozni, vagy a konstrukció tömb dimenziójának.</xref:System.Windows.PropertyPath.%23ctor%2A> Egyszerűen adja meg a tömb minden egyes tagjára további paraméterként.       Ha a végső célja tulajdonság egy <xref:System.Windows.Freezable>Írja be, hogy a rendszer klónozhatók-e értéket.</xref:System.Windows.Freezable> További információkért lásd: [Storyboards áttekintése](~/add/includes/ajax-current-ext-md.md).       A storyboard fájlt az animáció mechanizmusok tényleges értékelése után a tulajdonság lánc történik. : A <xref:System.Windows.PropertyPath>szint nincs érvényesség győződjön meg arról, hogy az elérési út a lépéseket minden csatlakozni.</xref:System.Windows.PropertyPath> Például, hogyan hozhat létre a tulajdonság elérési utat, amelyhez <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>első lépéseként és <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>második lépéseként.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> De a tulajdonság elérési sikertelen lesz, ha ténylegesen alkalmazott célként, mert a ecset, írja be, hogy kitöltés <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>nem rendelkezik egy <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>tulajdonság.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Érvénytelen a tulajdonság elérési utak csendes sikertelen. További információkért lásd: [Storyboards áttekintése](../Topic/Storyboards%20Overview.md).       **XAML-KÓDBAN:** használata esetén egy <xref:System.Windows.PropertyPath>egy tulajdonsághivatkozás leírására [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], mert egy attribútum értéke a megadott karakterlánc első kezeli olyan típuskonvertert (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> A típus konverter majd dolgozza fel a karakterláncot, és alapján a szintaxist fel fogja hívni egyikét a <xref:System.Windows.PropertyPath>konstruktor aláírások.</xref:System.Windows.PropertyPath> Egy attribútumérték kezelése típuskonverternek keresztül a kiosztótábla használatának általában <xref:System.Windows.PropertyPath>a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], ahelyett, hogy deklaráló egy <xref:System.Windows.PropertyPath>objektum elem és a majd alkalmazása az adott értékek attribútumok például <xref:System.Windows.PropertyPath.Path%2A>és PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> További információkért lásd: [PropertyPath XAML szintaxis](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## XAML szöveg használati tagjai a <xref:System.Windows.PropertyPath>típus általában nem megfelelőek a közvetlen [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] szintaxis.</xref:System.Windows.PropertyPath> Tekintse meg a megjegyzés."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "A paraméterlista."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
