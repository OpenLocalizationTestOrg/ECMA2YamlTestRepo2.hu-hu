### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "A metódus, amely végrehajtja a jelöli egy <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "Egy felügyelt szál jön létre, amikor a metódus, amely végrehajtja a szálon által képviselt: - A <xref:System.Threading.ThreadStart>átadott delegált a <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>konstruktor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  Bármelyik módszert, amelynek nincsenek paraméterei, és, amely visszaadja a `void` C# nyelven íródtak, vagy egy `Sub` eljárás a Visual Basic jelenthet a delegált.      -A ParameterizedThreadStart delegált átadott a <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>konstruktor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> Bármelyik módszert, amelynek egyetlen paramétert <xref:System.Object>, és adja vissza &quot;void&quot;, a C# vagy a Visual Basic szubrutin is képviseli a delegált.</xref:System.Object>       A szál nem kezdődik, amíg végrehajtása a <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>metódust.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> A <xref:System.Threading.ThreadStart>ParameterizedThreadStart delegált meghívták a szálban, illetve az első sor a delegált által képviselt metódus végrehajtása kezdődik.</xref:System.Threading.ThreadStart> A ParameterizedThreadStart küldött, az átadott objektum esetén a <xref:System.Threading.Thread.Start%28System.Object%29>metódus kap a delegálandó.</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > Visual Basic és a C# felhasználók kihagyhatja a <xref:System.Threading.ThreadStart>vagy ParameterizedThreadStart delegált konstruktora a szál létrehozása során.</xref:System.Threading.ThreadStart> A Visual Basic, használja a `AddressOf` operátor történő átadásakor a metódust a <xref:System.Threading.Thread.%23ctor%2A>konstruktor, például `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> A C# egyszerűen adja meg a szál eljárás nevét. A fordítóprogram kiválasztja a megfelelő delegált konstruktorában.      > [!NOTE] > Példánymetódusnak ParameterizedThreadStart meghatalmazottként c++ létrehozásakor az első paraméter az konstruktor-e a példány változó. A statikus metódus konstruktorának az első paraméter értéke nulla. Egy statikus metódus a delegált konstruktorában csak egy paraméter szükséges: az osztály minősíteni visszahívási metódus címét.       A ParameterizedThreadStart delegált és <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>metódus túlterhelési ellenőrizze egyszerűen szál eljárás, de ezzel a módszerrel adatok típus nem biztonságos, mert az objektumok adhatók át <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> Egy sokkal hatékonyabban adatok átadása egy szál eljárás módja a szál eljárás, mind az adatmezők üzembe egy munkavégző objektum. További információkért lásd: [szál létrehozása és adatok továbbításához kezdete](~/add/includes/ajax-current-ext-md.md).       A ParameterizedThreadStart delegált csak egyetlen paramétert támogat. Lehet átadni több adatelemek a ParameterizedThreadStart azáltal, hogy a paraméter, a következők egyikét: - tömbben.      -Gyűjteménytípus, ha az összes, az adatelemek ugyanabba a típusba tartozik.      -A rekord típusát, például <xref:System.Tuple%602>vagy <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
